
NUCleo_CAN_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b064  0800b064  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b06c  0800b06c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000054fc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005584  20005584  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024273  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042c7  00000000  00000000  0004432b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d00  00000000  00000000  000485f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b78  00000000  00000000  0004a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f55  00000000  00000000  0004be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205ec  00000000  00000000  00050dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd464  00000000  00000000  000713b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e815  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000080cc  00000000  00000000  0016e868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af0c 	.word	0x0800af0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800af0c 	.word	0x0800af0c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

	uint8_t TXdata_CAN1[8];
	uint8_t RXdata_CAN1[8];
	uint32_t TxMailBox;

	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0  , &RxHeader, RXdata_CAN1);
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f002 f930 	bl	8002818 <HAL_CAN_GetRxMessage>
		if(RxHeader.DLC == 3 )
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d104      	bne.n	80005ca <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80005c6:	f003 feea 	bl	800439e <HAL_GPIO_TogglePin>
	}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001ec 	.word	0x200001ec
 80005d8:	200001d0 	.word	0x200001d0
 80005dc:	40020400 	.word	0x40020400

080005e0 <MAve_Filter_use>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t updating_index = 0;
uint8_t checkTx_UART3 =0;

uint32_t MAve_Filter_use(uint32_t * buffer, int length){
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	int sum= 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
	for(int i=0; i <length ; i++)// moving average
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	e00a      	b.n	800060a <MAve_Filter_use+0x2a>
			sum = sum + buffer[i];
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
	for(int i=0; i <length ; i++)// moving average
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	3301      	adds	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	dbf0      	blt.n	80005f4 <MAve_Filter_use+0x14>
	return sum/length; //take averagevalue
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <MAve_Filter_fill>:
int MAve_Filter_fill(uint32_t * buffer, int length ,uint32_t new_value){
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]

	if(updating_index >= length)//if reached size
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MAve_Filter_fill+0x48>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	4293      	cmp	r3, r2
 800063e:	dc02      	bgt.n	8000646 <MAve_Filter_fill+0x1e>
		updating_index =0;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MAve_Filter_fill+0x48>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]

	buffer[updating_index]=new_value; // update with new value
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MAve_Filter_fill+0x48>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	601a      	str	r2, [r3, #0]
	updating_index++;//move to next index point
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MAve_Filter_fill+0x48>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <MAve_Filter_fill+0x48>)
 800065e:	701a      	strb	r2, [r3, #0]
	return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000bc8 	.word	0x20000bc8

08000674 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	  MAve_Filter_fill(m_ave_buff[0],sizeof(m_ave_buff[0])/sizeof(m_ave_buff[0][0]),adcdma[0]);
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	2114      	movs	r1, #20
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_ADC_ConvCpltCallback+0x40>)
 8000686:	f7ff ffcf 	bl	8000628 <MAve_Filter_fill>
	  MAve_Filter_fill(m_ave_buff[1],sizeof(m_ave_buff[1])/sizeof(m_ave_buff[1][0]),adcdma[1]);
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	461a      	mov	r2, r3
 8000690:	2114      	movs	r1, #20
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000694:	f7ff ffc8 	bl	8000628 <MAve_Filter_fill>
	  MAve_Filter_fill(m_ave_buff[2],sizeof(m_ave_buff[2])/sizeof(m_ave_buff[2][0]),adcdma[2]);
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	461a      	mov	r2, r3
 800069e:	2114      	movs	r1, #20
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <HAL_ADC_ConvCpltCallback+0x48>)
 80006a2:	f7ff ffc1 	bl	8000628 <MAve_Filter_fill>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000a8 	.word	0x200000a8
 80006b4:	200000b4 	.word	0x200000b4
 80006b8:	20000104 	.word	0x20000104
 80006bc:	20000154 	.word	0x20000154

080006c0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart){
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	  checkTx_UART3 = 1;
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <HAL_UART_TxCpltCallback+0x1c>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000bc9 	.word	0x20000bc9

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 f9fa 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f884 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 fb74 	bl	8000dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f0:	f000 fb2c 	bl	8000d4c <MX_DMA_Init>
  MX_ETH_Init();
 80006f4:	f000 f9d8 	bl	8000aa8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006f8:	f000 fad0 	bl	8000c9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006fc:	f000 faf8 	bl	8000cf0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000700:	f000 f8e4 	bl	80008cc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000704:	f000 fa1e 	bl	8000b44 <MX_TIM1_Init>
  MX_DAC_Init();
 8000708:	f000 f9a4 	bl	8000a54 <MX_DAC_Init>
  MX_CAN1_Init();
 800070c:	f000 f94e 	bl	80009ac <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)  adcdma , hadc1.Init.NbrOfConversion );
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <main+0xc8>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	461a      	mov	r2, r3
 8000716:	4925      	ldr	r1, [pc, #148]	; (80007ac <main+0xcc>)
 8000718:	4823      	ldr	r0, [pc, #140]	; (80007a8 <main+0xc8>)
 800071a:	f001 fa89 	bl	8001c30 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,  &pwm_outLED , 1 );
 800071e:	2301      	movs	r3, #1
 8000720:	4a23      	ldr	r2, [pc, #140]	; (80007b0 <main+0xd0>)
 8000722:	2100      	movs	r1, #0
 8000724:	4823      	ldr	r0, [pc, #140]	; (80007b4 <main+0xd4>)
 8000726:	f004 fd55 	bl	80051d4 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2 , (&pwm_outSERV) , 1 );
 800072a:	2301      	movs	r3, #1
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <main+0xd8>)
 800072e:	2104      	movs	r1, #4
 8000730:	4820      	ldr	r0, [pc, #128]	; (80007b4 <main+0xd4>)
 8000732:	f004 fd4f 	bl	80051d4 <HAL_TIM_PWM_Start_DMA>

  HAL_CAN_Start(&hcan1);
 8000736:	4821      	ldr	r0, [pc, #132]	; (80007bc <main+0xdc>)
 8000738:	f002 f82a 	bl	8002790 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800073c:	2102      	movs	r1, #2
 800073e:	481f      	ldr	r0, [pc, #124]	; (80007bc <main+0xdc>)
 8000740:	f002 f97c 	bl	8002a3c <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 4;//data length
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0xe0>)
 8000746:	2204      	movs	r2, #4
 8000748:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <main+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x371; // The ID
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <main+0xe0>)
 8000758:	f240 3271 	movw	r2, #881	; 0x371
 800075c:	601a      	str	r2, [r3, #0]
  //HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &adc_input[2] , 1 , DAC_ALIGN_12B_R );

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800075e:	f007 f9e1 	bl	8007b24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <main+0xe4>)
 8000764:	2100      	movs	r1, #0
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <main+0xe8>)
 8000768:	f007 fa26 	bl	8007bb8 <osThreadNew>
 800076c:	4603      	mov	r3, r0
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <main+0xec>)
 8000770:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <main+0xf0>)
 8000774:	2100      	movs	r1, #0
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <main+0xf4>)
 8000778:	f007 fa1e 	bl	8007bb8 <osThreadNew>
 800077c:	4603      	mov	r3, r0
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <main+0xf8>)
 8000780:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <main+0xfc>)
 8000784:	2100      	movs	r1, #0
 8000786:	4816      	ldr	r0, [pc, #88]	; (80007e0 <main+0x100>)
 8000788:	f007 fa16 	bl	8007bb8 <osThreadNew>
 800078c:	4603      	mov	r3, r0
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <main+0x104>)
 8000790:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <main+0x108>)
 8000794:	2100      	movs	r1, #0
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <main+0x10c>)
 8000798:	f007 fa0e 	bl	8007bb8 <osThreadNew>
 800079c:	4603      	mov	r3, r0
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <main+0x110>)
 80007a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a2:	f007 f9e3 	bl	8007b6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <main+0xc6>
 80007a8:	2000036c 	.word	0x2000036c
 80007ac:	200000a8 	.word	0x200000a8
 80007b0:	200001b0 	.word	0x200001b0
 80007b4:	20000560 	.word	0x20000560
 80007b8:	200001b4 	.word	0x200001b4
 80007bc:	20000414 	.word	0x20000414
 80007c0:	200001b8 	.word	0x200001b8
 80007c4:	0800af80 	.word	0x0800af80
 80007c8:	08000f51 	.word	0x08000f51
 80007cc:	20000bb8 	.word	0x20000bb8
 80007d0:	0800afa4 	.word	0x0800afa4
 80007d4:	08000fcd 	.word	0x08000fcd
 80007d8:	20000bbc 	.word	0x20000bbc
 80007dc:	0800afc8 	.word	0x0800afc8
 80007e0:	08001035 	.word	0x08001035
 80007e4:	20000bc0 	.word	0x20000bc0
 80007e8:	0800afec 	.word	0x0800afec
 80007ec:	0800106d 	.word	0x0800106d
 80007f0:	20000bc4 	.word	0x20000bc4

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f009 ff1a 	bl	800a63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <SystemClock_Config+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <SystemClock_Config+0xd0>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <SystemClock_Config+0xd0>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SystemClock_Config+0xd4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000840:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <SystemClock_Config+0xd4>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <SystemClock_Config+0xd4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000858:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085e:	2302      	movs	r3, #2
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000868:	2304      	movs	r3, #4
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800086c:	23c0      	movs	r3, #192	; 0xc0
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000870:	2306      	movs	r3, #6
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000874:	2308      	movs	r3, #8
 8000876:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fec5 	bl	800460c <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000888:	f000 fc38 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2302      	movs	r3, #2
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2102      	movs	r1, #2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 f926 	bl	8004afc <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008b6:	f000 fc21 	bl	80010fc <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3750      	adds	r7, #80	; 0x50
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <MX_ADC1_Init+0xd4>)
 80008e0:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <MX_ADC1_Init+0xd8>)
 80008e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <MX_ADC1_Init+0xd4>)
 80008e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <MX_ADC1_Init+0xd4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <MX_ADC1_Init+0xd4>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <MX_ADC1_Init+0xd4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_ADC1_Init+0xd4>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_ADC1_Init+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <MX_ADC1_Init+0xd4>)
 800090e:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <MX_ADC1_Init+0xdc>)
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_ADC1_Init+0xd4>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_ADC1_Init+0xd4>)
 800091a:	2203      	movs	r2, #3
 800091c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_ADC1_Init+0xd4>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_ADC1_Init+0xd4>)
 8000928:	2201      	movs	r2, #1
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_ADC1_Init+0xd4>)
 800092e:	f001 f93b 	bl	8001ba8 <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 fbe0 	bl	80010fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800093c:	2303      	movs	r3, #3
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000944:	2304      	movs	r3, #4
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4814      	ldr	r0, [pc, #80]	; (80009a0 <MX_ADC1_Init+0xd4>)
 800094e:	f001 fa93 	bl	8001e78 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000958:	f000 fbd0 	bl	80010fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800095c:	2305      	movs	r3, #5
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_ADC1_Init+0xd4>)
 800096a:	f001 fa85 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000974:	f000 fbc2 	bl	80010fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000978:	2306      	movs	r3, #6
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800097c:	2303      	movs	r3, #3
 800097e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000980:	2305      	movs	r3, #5
 8000982:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_ADC1_Init+0xd4>)
 800098a:	f001 fa75 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000994:	f000 fbb2 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000036c 	.word	0x2000036c
 80009a4:	40012000 	.word	0x40012000
 80009a8:	0f000001 	.word	0x0f000001

080009ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <MX_CAN1_Init+0xa4>)
 80009b6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009d4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009d8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009fe:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_CAN1_Init+0xa0>)
 8000a00:	f001 fcea 	bl	80023d8 <HAL_CAN_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a0a:	f000 fb77 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000a12:	2312      	movs	r3, #18
 8000a14:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x446<<5;
 8000a1a:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000a1e:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8000a24:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000a28:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000a36:	2314      	movs	r3, #20
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_CAN1_Init+0xa0>)
 8000a40:	f001 fdc6 	bl	80025d0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000414 	.word	0x20000414
 8000a50:	40006400 	.word	0x40006400

08000a54 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_DAC_Init+0x4c>)
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <MX_DAC_Init+0x50>)
 8000a66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_DAC_Init+0x4c>)
 8000a6a:	f002 fb1f 	bl	80030ac <HAL_DAC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a74:	f000 fb42 	bl	80010fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_DAC_Init+0x4c>)
 8000a88:	f002 fb32 	bl	80030f0 <HAL_DAC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a92:	f000 fb33 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000043c 	.word	0x2000043c
 8000aa4:	40007400 	.word	0x40007400

08000aa8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_ETH_Init+0x84>)
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <MX_ETH_Init+0x88>)
 8000ab0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ac0:	22e1      	movs	r2, #225	; 0xe1
 8000ac2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_ETH_Init+0x84>)
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <MX_ETH_Init+0x8c>)
 8000ada:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_ETH_Init+0x84>)
 8000ade:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ae2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_ETH_Init+0x84>)
 8000ae6:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <MX_ETH_Init+0x90>)
 8000ae8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_ETH_Init+0x84>)
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_ETH_Init+0x94>)
 8000aee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_ETH_Init+0x84>)
 8000af2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000af6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_ETH_Init+0x84>)
 8000afa:	f002 ff4b 	bl	8003994 <HAL_ETH_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b04:	f000 fafa 	bl	80010fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b08:	2238      	movs	r2, #56	; 0x38
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b0e:	f009 fd95 	bl	800a63c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b14:	2221      	movs	r2, #33	; 0x21
 8000b16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_ETH_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200004b0 	.word	0x200004b0
 8000b30:	40028000 	.word	0x40028000
 8000b34:	20000bcc 	.word	0x20000bcc
 8000b38:	200002cc 	.word	0x200002cc
 8000b3c:	2000022c 	.word	0x2000022c
 8000b40:	200001f4 	.word	0x200001f4

08000b44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2220      	movs	r2, #32
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f009 fd5d 	bl	800a63c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b82:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000b84:	4a44      	ldr	r2, [pc, #272]	; (8000c98 <MX_TIM1_Init+0x154>)
 8000b86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000b8a:	2213      	movs	r2, #19
 8000b8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000b96:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bae:	4839      	ldr	r0, [pc, #228]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000bb0:	f004 f9f6 	bl	8004fa0 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bba:	f000 fa9f 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4832      	ldr	r0, [pc, #200]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000bcc:	f004 fe94 	bl	80058f8 <HAL_TIM_ConfigClockSource>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bd6:	f000 fa91 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bda:	482e      	ldr	r0, [pc, #184]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000bdc:	f004 faa0 	bl	8005120 <HAL_TIM_PWM_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000be6:	f000 fa89 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4826      	ldr	r0, [pc, #152]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000bfa:	f005 fb61 	bl	80062c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c04:	f000 fa7a 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c08:	2360      	movs	r3, #96	; 0x60
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4819      	ldr	r0, [pc, #100]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000c2e:	f004 fda1 	bl	8005774 <HAL_TIM_PWM_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c38:	f000 fa60 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	2204      	movs	r2, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000c46:	f004 fd95 	bl	8005774 <HAL_TIM_PWM_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c50:	f000 fa54 	bl	80010fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000c78:	f005 fb9e 	bl	80063b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c82:	f000 fa3b 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM1_Init+0x150>)
 8000c88:	f000 fcfa 	bl	8001680 <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3758      	adds	r7, #88	; 0x58
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000560 	.word	0x20000560
 8000c98:	40010000 	.word	0x40010000

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART3_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cd4:	f005 fbd6 	bl	8006484 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 fa0d 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000668 	.word	0x20000668
 8000cec:	40004800 	.word	0x40004800

08000cf0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	f003 fb4d 	bl	80043d2 <HAL_PCD_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f9dd 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200006ac 	.word	0x200006ac

08000d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_DMA_Init+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <MX_DMA_Init+0x88>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_DMA_Init+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_DMA_Init+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <MX_DMA_Init+0x88>)
 8000d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_DMA_Init+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	2010      	movs	r0, #16
 8000d90:	f002 f962 	bl	8003058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d94:	2010      	movs	r0, #16
 8000d96:	f002 f97b 	bl	8003090 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2038      	movs	r0, #56	; 0x38
 8000da0:	f002 f95a 	bl	8003058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000da4:	2038      	movs	r0, #56	; 0x38
 8000da6:	f002 f973 	bl	8003090 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	2039      	movs	r0, #57	; 0x39
 8000db0:	f002 f952 	bl	8003058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000db4:	2039      	movs	r0, #57	; 0x39
 8000db6:	f002 f96b 	bl	8003090 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	203a      	movs	r0, #58	; 0x3a
 8000dc0:	f002 f94a 	bl	8003058 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000dc4:	203a      	movs	r0, #58	; 0x3a
 8000dc6:	f002 f963 	bl	8003090 <HAL_NVIC_EnableIRQ>

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a52      	ldr	r2, [pc, #328]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a4b      	ldr	r2, [pc, #300]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a36      	ldr	r2, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a28      	ldr	r2, [pc, #160]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_GPIO_Init+0x168>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_GPIO_Init+0x16c>)
 8000eba:	f003 fa57 	bl	800436c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2140      	movs	r1, #64	; 0x40
 8000ec2:	4821      	ldr	r0, [pc, #132]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000ec4:	f003 fa52 	bl	800436c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ece:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <MX_GPIO_Init+0x174>)
 8000ee0:	f003 f880 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ee4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MX_GPIO_Init+0x16c>)
 8000efe:	f003 f871 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f02:	2340      	movs	r3, #64	; 0x40
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000f1a:	f003 f863 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000f32:	f003 f857 	bl	8003fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	; 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40020800 	.word	0x40020800

08000f50 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {//servo and push button
	 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET ){
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <StartTask01+0x64>)
 8000f5e:	f003 f9ed 	bl	800433c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <StartTask01+0x2a>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <StartTask01+0x68>)
 8000f6e:	f003 f9fd 	bl	800436c <HAL_GPIO_WritePin>
		  BlueBtn = 1;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <StartTask01+0x6c>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e007      	b.n	8000f8a <StartTask01+0x3a>
	 }
	 else{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <StartTask01+0x68>)
 8000f80:	f003 f9f4 	bl	800436c <HAL_GPIO_WritePin>
		  BlueBtn = 0;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <StartTask01+0x6c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	 }


//
	adc_input[0] = MAve_Filter_use(m_ave_buff[0],sizeof(m_ave_buff[0])/sizeof(m_ave_buff[0][0]) );
 8000f8a:	2114      	movs	r1, #20
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <StartTask01+0x70>)
 8000f8e:	f7ff fb27 	bl	80005e0 <MAve_Filter_use>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <StartTask01+0x74>)
 8000f96:	6013      	str	r3, [r2, #0]
	pwm_outSERV = (adc_input[0]*15)/8 + 915;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <StartTask01+0x74>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	f203 3393 	addw	r3, r3, #915	; 0x393
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <StartTask01+0x78>)
 8000faa:	6013      	str	r3, [r2, #0]
    osDelay(180);
 8000fac:	20b4      	movs	r0, #180	; 0xb4
 8000fae:	f006 fe95 	bl	8007cdc <osDelay>
	 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET ){
 8000fb2:	e7d1      	b.n	8000f58 <StartTask01+0x8>
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	200000a4 	.word	0x200000a4
 8000fc0:	200000b4 	.word	0x200000b4
 8000fc4:	200001a4 	.word	0x200001a4
 8000fc8:	200001b4 	.word	0x200001b4

08000fcc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint16_t ShmTrig_value = 2047;
 8000fd4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fd8:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {//Blue led
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)== GPIO_PIN_SET)
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	4812      	ldr	r0, [pc, #72]	; (8001028 <StartTask02+0x5c>)
 8000fde:	f003 f9ad 	bl	800433c <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d103      	bne.n	8000ff0 <StartTask02+0x24>
	  	  ShmTrig_value=1023;
 8000fe8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	e002      	b.n	8000ff6 <StartTask02+0x2a>
	  else
		  ShmTrig_value=3071;
 8000ff0:	f640 33ff 	movw	r3, #3071	; 0xbff
 8000ff4:	81fb      	strh	r3, [r7, #14]
	adc_input[2] =MAve_Filter_use(m_ave_buff[2], sizeof(m_ave_buff[2])/sizeof(m_ave_buff[2][0]) );
 8000ff6:	2114      	movs	r1, #20
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <StartTask02+0x60>)
 8000ffa:	f7ff faf1 	bl	80005e0 <MAve_Filter_use>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <StartTask02+0x64>)
 8001002:	6093      	str	r3, [r2, #8]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,adc_input[2] >ShmTrig_value);
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <StartTask02+0x64>)
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	429a      	cmp	r2, r3
 800100c:	bf8c      	ite	hi
 800100e:	2301      	movhi	r3, #1
 8001010:	2300      	movls	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	2180      	movs	r1, #128	; 0x80
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <StartTask02+0x5c>)
 800101a:	f003 f9a7 	bl	800436c <HAL_GPIO_WritePin>

    osDelay(150);
 800101e:	2096      	movs	r0, #150	; 0x96
 8001020:	f006 fe5c 	bl	8007cdc <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)== GPIO_PIN_SET)
 8001024:	e7d9      	b.n	8000fda <StartTask02+0xe>
 8001026:	bf00      	nop
 8001028:	40020400 	.word	0x40020400
 800102c:	20000154 	.word	0x20000154
 8001030:	200001a4 	.word	0x200001a4

08001034 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	 adc_input[1] = MAve_Filter_use(m_ave_buff[1], sizeof(m_ave_buff[1])/sizeof(m_ave_buff[1][0]));
 800103c:	2114      	movs	r1, #20
 800103e:	4808      	ldr	r0, [pc, #32]	; (8001060 <StartTask03+0x2c>)
 8001040:	f7ff face 	bl	80005e0 <MAve_Filter_use>
 8001044:	4603      	mov	r3, r0
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <StartTask03+0x30>)
 8001048:	6053      	str	r3, [r2, #4]
	 pwm_outLED = adc_input[1] * 15;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <StartTask03+0x30>)
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <StartTask03+0x34>)
 8001056:	6013      	str	r3, [r2, #0]
	  osDelay(200);
 8001058:	20c8      	movs	r0, #200	; 0xc8
 800105a:	f006 fe3f 	bl	8007cdc <osDelay>
	 adc_input[1] = MAve_Filter_use(m_ave_buff[1], sizeof(m_ave_buff[1])/sizeof(m_ave_buff[1][0]));
 800105e:	e7ed      	b.n	800103c <StartTask03+0x8>
 8001060:	20000104 	.word	0x20000104
 8001064:	200001a4 	.word	0x200001a4
 8001068:	200001b0 	.word	0x200001b0

0800106c <StartTask04>:
unsigned const char  struart[40] = "I like ride a bike ";

unsigned  char TXstr_Usart3[20] = "LOOK AT ME";    // sprintf
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	6078      	str	r0, [r7, #4]
	 if(checkTx_UART3)
	 */
	 {
		 // HAL_UART_Transmit(&huart3, &struart,  strlen(struart) , 200);

		 memset((char*)TXstr_Usart3,0,sizeof(TXstr_Usart3));
 8001074:	2214      	movs	r2, #20
 8001076:	2100      	movs	r1, #0
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <StartTask04+0x54>)
 800107a:	f009 fadf 	bl	800a63c <memset>
		 sprintf((char*)TXstr_Usart3,"%lu  %lu  %lu %d\n" , adc_input[0], adc_input[1], adc_input[2], BlueBtn);
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <StartTask04+0x58>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <StartTask04+0x58>)
 8001084:	6859      	ldr	r1, [r3, #4]
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <StartTask04+0x58>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	480f      	ldr	r0, [pc, #60]	; (80010c8 <StartTask04+0x5c>)
 800108c:	7800      	ldrb	r0, [r0, #0]
 800108e:	9001      	str	r0, [sp, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	460b      	mov	r3, r1
 8001094:	490d      	ldr	r1, [pc, #52]	; (80010cc <StartTask04+0x60>)
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <StartTask04+0x54>)
 8001098:	f009 fad8 	bl	800a64c <siprintf>
		 HAL_UART_Transmit(&huart3, (const unsigned * )TXstr_Usart3,  strlen(TXstr_Usart3) , 100);
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <StartTask04+0x54>)
 800109e:	f7ff f8a7 	bl	80001f0 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	4905      	ldr	r1, [pc, #20]	; (80010c0 <StartTask04+0x54>)
 80010aa:	4809      	ldr	r0, [pc, #36]	; (80010d0 <StartTask04+0x64>)
 80010ac:	f005 fa37 	bl	800651e <HAL_UART_Transmit>
		 checkTx_UART3=0;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <StartTask04+0x68>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	 }
//sizeof(TXdata_Usart3)/sizeof(TXdata_Usart3[0])
	 osDelay(140);
 80010b6:	208c      	movs	r0, #140	; 0x8c
 80010b8:	f006 fe10 	bl	8007cdc <osDelay>
	 {
 80010bc:	e7da      	b.n	8001074 <StartTask04+0x8>
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000
 80010c4:	200001a4 	.word	0x200001a4
 80010c8:	200000a4 	.word	0x200000a4
 80010cc:	0800af54 	.word	0x0800af54
 80010d0:	20000668 	.word	0x20000668
 80010d4:	20000bc9 	.word	0x20000bc9

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ea:	f000 fd19 	bl	8001b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40001400 	.word	0x40001400

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_MspInit+0x54>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <HAL_MspInit+0x54>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x54>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_MspInit+0x54>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_MspInit+0x54>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_MspInit+0x54>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	210f      	movs	r1, #15
 800114a:	f06f 0001 	mvn.w	r0, #1
 800114e:	f001 ff83 	bl	8003058 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a2f      	ldr	r2, [pc, #188]	; (800123c <HAL_ADC_MspInit+0xdc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d158      	bne.n	8001234 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_ADC_MspInit+0xe0>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <HAL_ADC_MspInit+0xe0>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_ADC_MspInit+0xe0>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_ADC_MspInit+0xe0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_ADC_MspInit+0xe0>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_ADC_MspInit+0xe0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80011ba:	2368      	movs	r3, #104	; 0x68
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	481d      	ldr	r0, [pc, #116]	; (8001244 <HAL_ADC_MspInit+0xe4>)
 80011ce:	f002 ff09 	bl	8003fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_ADC_MspInit+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 80011fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001200:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 8001204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001208:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 800120c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001210:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 800121a:	f001 ffb9 	bl	8003190 <HAL_DMA_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001224:	f7ff ff6a 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_ADC_MspInit+0xe8>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	200003b4 	.word	0x200003b4
 800124c:	40026410 	.word	0x40026410

08001250 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_CAN_MspInit+0x94>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d133      	bne.n	80012da <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_CAN_MspInit+0x98>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_CAN_MspInit+0x98>)
 800127c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_CAN_MspInit+0x98>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_CAN_MspInit+0x98>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_CAN_MspInit+0x98>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_CAN_MspInit+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012aa:	2303      	movs	r3, #3
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012ba:	2309      	movs	r3, #9
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_CAN_MspInit+0x9c>)
 80012c6:	f002 fe8d 	bl	8003fe4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	2014      	movs	r0, #20
 80012d0:	f001 fec2 	bl	8003058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012d4:	2014      	movs	r0, #20
 80012d6:	f001 fedb 	bl	8003090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40006400 	.word	0x40006400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020c00 	.word	0x40020c00

080012f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <HAL_DAC_MspInit+0xdc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d158      	bne.n	80013c4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_DAC_MspInit+0xe0>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a2d      	ldr	r2, [pc, #180]	; (80013d0 <HAL_DAC_MspInit+0xe0>)
 800131c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_DAC_MspInit+0xe0>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_DAC_MspInit+0xe0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <HAL_DAC_MspInit+0xe0>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_DAC_MspInit+0xe0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800134a:	2310      	movs	r3, #16
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <HAL_DAC_MspInit+0xe4>)
 800135e:	f002 fe41 	bl	8003fe4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_DAC_MspInit+0xec>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 800136a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800136e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 800137e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001382:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 8001386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 8001396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 80013aa:	f001 fef1 	bl	8003190 <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80013b4:	f7ff fea2 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_DAC_MspInit+0xe8>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40007400 	.word	0x40007400
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	20000450 	.word	0x20000450
 80013dc:	40026088 	.word	0x40026088

080013e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a55      	ldr	r2, [pc, #340]	; (8001554 <HAL_ETH_MspInit+0x174>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	f040 80a4 	bne.w	800154c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800140e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800142a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	4b45      	ldr	r3, [pc, #276]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a44      	ldr	r2, [pc, #272]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a3d      	ldr	r2, [pc, #244]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a36      	ldr	r2, [pc, #216]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_ETH_MspInit+0x178>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_ETH_MspInit+0x178>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6313      	str	r3, [r2, #48]	; 0x30
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_ETH_MspInit+0x178>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ETH_MspInit+0x178>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a28      	ldr	r2, [pc, #160]	; (8001558 <HAL_ETH_MspInit+0x178>)
 80014b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_ETH_MspInit+0x178>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014c8:	2332      	movs	r3, #50	; 0x32
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	481e      	ldr	r0, [pc, #120]	; (800155c <HAL_ETH_MspInit+0x17c>)
 80014e4:	f002 fd7e 	bl	8003fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014e8:	2386      	movs	r3, #134	; 0x86
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f8:	230b      	movs	r3, #11
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <HAL_ETH_MspInit+0x180>)
 8001504:	f002 fd6e 	bl	8003fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151a:	230b      	movs	r3, #11
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	480f      	ldr	r0, [pc, #60]	; (8001564 <HAL_ETH_MspInit+0x184>)
 8001526:	f002 fd5d 	bl	8003fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800152a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800153c:	230b      	movs	r3, #11
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <HAL_ETH_MspInit+0x188>)
 8001548:	f002 fd4c 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	; 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40028000 	.word	0x40028000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40021800 	.word	0x40021800

0800156c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_TIM_Base_MspInit+0xfc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d16f      	bne.n	800165e <HAL_TIM_Base_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_TIM_Base_MspInit+0x100>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a39      	ldr	r2, [pc, #228]	; (800166c <HAL_TIM_Base_MspInit+0x100>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_TIM_Base_MspInit+0x100>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 800159c:	4a35      	ldr	r2, [pc, #212]	; (8001674 <HAL_TIM_Base_MspInit+0x108>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015a2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b31      	ldr	r3, [pc, #196]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ba:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ca:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015e0:	4823      	ldr	r0, [pc, #140]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015e2:	f001 fdd5 	bl	8003190 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80015ec:	f7ff fd86 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_TIM_Base_MspInit+0x104>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 80015fe:	4a1f      	ldr	r2, [pc, #124]	; (800167c <HAL_TIM_Base_MspInit+0x110>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001604:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001608:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001624:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001628:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001634:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001644:	f001 fda4 	bl	8003190 <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 800164e:	f7ff fd55 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_TIM_Base_MspInit+0x10c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40010000 	.word	0x40010000
 800166c:	40023800 	.word	0x40023800
 8001670:	200005a8 	.word	0x200005a8
 8001674:	40026428 	.word	0x40026428
 8001678:	20000608 	.word	0x20000608
 800167c:	40026440 	.word	0x40026440

08001680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_TIM_MspPostInit+0x68>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d11e      	bne.n	80016e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80016c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_TIM_MspPostInit+0x70>)
 80016dc:	f002 fc82 	bl	8003fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_UART_MspInit+0x94>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d134      	bne.n	8001780 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_UART_MspInit+0x98>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a1b      	ldr	r2, [pc, #108]	; (800178c <HAL_UART_MspInit+0x98>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_UART_MspInit+0x98>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_UART_MspInit+0x98>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <HAL_UART_MspInit+0x98>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_UART_MspInit+0x98>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800174e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001760:	2307      	movs	r3, #7
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4809      	ldr	r0, [pc, #36]	; (8001790 <HAL_UART_MspInit+0x9c>)
 800176c:	f002 fc3a 	bl	8003fe4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2105      	movs	r1, #5
 8001774:	2027      	movs	r0, #39	; 0x27
 8001776:	f001 fc6f 	bl	8003058 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800177a:	2027      	movs	r0, #39	; 0x27
 800177c:	f001 fc88 	bl	8003090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40004800 	.word	0x40004800
 800178c:	40023800 	.word	0x40023800
 8001790:	40020c00 	.word	0x40020c00

08001794 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b4:	d13f      	bne.n	8001836 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_PCD_MspInit+0xac>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <HAL_PCD_MspInit+0xac>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_PCD_MspInit+0xac>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017e4:	230a      	movs	r3, #10
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4815      	ldr	r0, [pc, #84]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 80017f0:	f002 fbf8 	bl	8003fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <HAL_PCD_MspInit+0xb0>)
 800180a:	f002 fbeb 	bl	8003fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_PCD_MspInit+0xac>)
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_PCD_MspInit+0xac>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001818:	6353      	str	r3, [r2, #52]	; 0x34
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_PCD_MspInit+0xac>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_PCD_MspInit+0xac>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_PCD_MspInit+0xac>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_InitTick+0xe4>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a32      	ldr	r2, [pc, #200]	; (800192c <HAL_InitTick+0xe4>)
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_InitTick+0xe4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fb5c 	bl	8004f3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800188e:	f003 fb2d 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 8001892:	6378      	str	r0, [r7, #52]	; 0x34
 8001894:	e004      	b.n	80018a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001896:	f003 fb29 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800189a:	4603      	mov	r3, r0
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_InitTick+0xe8>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	3b01      	subs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_InitTick+0xec>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_InitTick+0xf0>)
 80018b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_InitTick+0xec>)
 80018b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_InitTick+0xec>)
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_InitTick+0xec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_InitTick+0xec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_InitTick+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_InitTick+0xec>)
 80018d6:	f003 fb63 	bl	8004fa0 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11b      	bne.n	8001920 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <HAL_InitTick+0xec>)
 80018ea:	f003 fba9 	bl	8005040 <HAL_TIM_Base_Start_IT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018fc:	2037      	movs	r0, #55	; 0x37
 80018fe:	f001 fbc7 	bl	8003090 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d808      	bhi.n	800191a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2037      	movs	r0, #55	; 0x37
 800190e:	f001 fba3 	bl	8003058 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_InitTick+0xf4>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e002      	b.n	8001920 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001924:	4618      	mov	r0, r3
 8001926:	3738      	adds	r7, #56	; 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	431bde83 	.word	0x431bde83
 8001934:	20000bd4 	.word	0x20000bd4
 8001938:	40001400 	.word	0x40001400
 800193c:	20000018 	.word	0x20000018

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <DMA1_Stream5_IRQHandler+0x10>)
 8001972:	f001 fda5 	bl	80034c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000450 	.word	0x20000450

08001980 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <CAN1_RX0_IRQHandler+0x10>)
 8001986:	f001 f87f 	bl	8002a88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000414 	.word	0x20000414

08001994 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <USART3_IRQHandler+0x10>)
 800199a:	f004 fe53 	bl	8006644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000668 	.word	0x20000668

080019a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM7_IRQHandler+0x10>)
 80019ae:	f003 fdd9 	bl	8005564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000bd4 	.word	0x20000bd4

080019bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA2_Stream0_IRQHandler+0x10>)
 80019c2:	f001 fd7d 	bl	80034c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200003b4 	.word	0x200003b4

080019d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA2_Stream1_IRQHandler+0x10>)
 80019d6:	f001 fd73 	bl	80034c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200005a8 	.word	0x200005a8

080019e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <DMA2_Stream2_IRQHandler+0x10>)
 80019ea:	f001 fd69 	bl	80034c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000608 	.word	0x20000608

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f008 fdd0 	bl	800a5cc <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20030000 	.word	0x20030000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	20000c1c 	.word	0x20000c1c
 8001a60:	20005588 	.word	0x20005588

08001a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 

  ldr   sp, =_estack       /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa4:	4c0b      	ldr	r4, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab2:	f7ff ffd7 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f008 fd8f 	bl	800a5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7fe fe11 	bl	80006e0 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ac0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001acc:	0800b074 	.word	0x0800b074
  ldr r2, =_sbss
 8001ad0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001ad4:	20005584 	.word	0x20005584

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_Init+0x40>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_Init+0x40>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_Init+0x40>)
 8001af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_Init+0x40>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f001 fa9c 	bl	8003042 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f7ff fe9c 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fafa 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x20>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_IncTick+0x24>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_IncTick+0x24>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000001c 	.word	0x2000001c
 8001b44:	20000c20 	.word	0x20000c20

08001b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_GetTick+0x14>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000c20 	.word	0x20000c20

08001b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ffee 	bl	8001b48 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d005      	beq.n	8001b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_Delay+0x44>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b86:	bf00      	nop
 8001b88:	f7ff ffde 	bl	8001b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d8f7      	bhi.n	8001b88 <HAL_Delay+0x28>
  {
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000001c 	.word	0x2000001c

08001ba8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e033      	b.n	8001c26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff faca 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bee:	f023 0302 	bic.w	r3, r3, #2
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fa6e 	bl	80020dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	f043 0201 	orr.w	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
 8001c16:	e001      	b.n	8001c1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Start_DMA+0x1e>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e0e9      	b.n	8001e22 <HAL_ADC_Start_DMA+0x1f2>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d018      	beq.n	8001c96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_ADC_Start_DMA+0x1fc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6d      	ldr	r2, [pc, #436]	; (8001e30 <HAL_ADC_Start_DMA+0x200>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9a      	lsrs	r2, r3, #18
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c88:	e002      	b.n	8001c90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f9      	bne.n	8001c8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	f040 80a1 	bne.w	8001e08 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f023 0206 	bic.w	r2, r3, #6
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
 8001d12:	e002      	b.n	8001d1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_ADC_Start_DMA+0x204>)
 8001d24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_ADC_Start_DMA+0x208>)
 8001d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_ADC_Start_DMA+0x20c>)
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	4a41      	ldr	r2, [pc, #260]	; (8001e40 <HAL_ADC_Start_DMA+0x210>)
 8001d3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	334c      	adds	r3, #76	; 0x4c
 8001d72:	4619      	mov	r1, r3
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f001 fab8 	bl	80032ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12a      	bne.n	8001dde <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <HAL_ADC_Start_DMA+0x214>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d015      	beq.n	8001dbe <HAL_ADC_Start_DMA+0x18e>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <HAL_ADC_Start_DMA+0x218>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_Start_DMA+0x178>
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_ADC_Start_DMA+0x204>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_ADC_Start_DMA+0x21c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d136      	bne.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_ADC_Start_DMA+0x204>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d130      	bne.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d129      	bne.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e020      	b.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_ADC_Start_DMA+0x214>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d11b      	bne.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d114      	bne.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	e00b      	b.n	8001e20 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0210 	orr.w	r2, r3, #16
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000014 	.word	0x20000014
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	40012300 	.word	0x40012300
 8001e38:	080022d5 	.word	0x080022d5
 8001e3c:	0800238f 	.word	0x0800238f
 8001e40:	080023ab 	.word	0x080023ab
 8001e44:	40012000 	.word	0x40012000
 8001e48:	40012100 	.word	0x40012100
 8001e4c:	40012200 	.word	0x40012200

08001e50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e113      	b.n	80020bc <HAL_ADC_ConfigChannel+0x244>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d925      	bls.n	8001ef0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b1e      	subs	r3, #30
 8001eba:	2207      	movs	r2, #7
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43da      	mvns	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68d9      	ldr	r1, [r3, #12]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4403      	add	r3, r0
 8001ee2:	3b1e      	subs	r3, #30
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	e022      	b.n	8001f36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6919      	ldr	r1, [r3, #16]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	2207      	movs	r2, #7
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6919      	ldr	r1, [r3, #16]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4403      	add	r3, r0
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d824      	bhi.n	8001f88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b05      	subs	r3, #5
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b05      	subs	r3, #5
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34
 8001f86:	e04c      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	d824      	bhi.n	8001fda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b23      	subs	r3, #35	; 0x23
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	400a      	ands	r2, r1
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b23      	subs	r3, #35	; 0x23
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd8:	e023      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b41      	subs	r3, #65	; 0x41
 8001fec:	221f      	movs	r2, #31
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b41      	subs	r3, #65	; 0x41
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_ADC_ConfigChannel+0x250>)
 8002024:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_ADC_ConfigChannel+0x254>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10f      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d8>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d10b      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <HAL_ADC_ConfigChannel+0x254>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d12b      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x23a>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <HAL_ADC_ConfigChannel+0x1f4>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b11      	cmp	r3, #17
 800206a:	d122      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d111      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	0c9a      	lsrs	r2, r3, #18
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40012300 	.word	0x40012300
 80020cc:	40012000 	.word	0x40012000
 80020d0:	10000012 	.word	0x10000012
 80020d4:	20000014 	.word	0x20000014
 80020d8:	431bde83 	.word	0x431bde83

080020dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e4:	4b79      	ldr	r3, [pc, #484]	; (80022cc <ADC_Init+0x1f0>)
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <ADC_Init+0x1f4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e00f      	b.n	80021da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0202 	bic.w	r2, r2, #2
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7e1b      	ldrb	r3, [r3, #24]
 80021f4:	005a      	lsls	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002216:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002226:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	035a      	lsls	r2, r3, #13
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	e007      	b.n	8002250 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	3b01      	subs	r3, #1
 800226c:	051a      	lsls	r2, r3, #20
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002292:	025a      	lsls	r2, r3, #9
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	029a      	lsls	r2, r3, #10
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d13c      	bne.n	8002368 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d12b      	bne.n	8002360 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d127      	bne.n	8002360 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002328:	2b00      	cmp	r3, #0
 800232a:	d119      	bne.n	8002360 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0220 	bic.w	r2, r2, #32
 800233a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7fe f987 	bl	8000674 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002366:	e00e      	b.n	8002386 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff fd75 	bl	8001e64 <HAL_ADC_ErrorCallback>
}
 800237a:	e004      	b.n	8002386 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7ff fd57 	bl	8001e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0204 	orr.w	r2, r3, #4
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff fd4a 	bl	8001e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0ed      	b.n	80025c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe ff2a 	bl	8001250 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240c:	f7ff fb9c 	bl	8001b48 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002412:	e012      	b.n	800243a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002414:	f7ff fb98 	bl	8001b48 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b0a      	cmp	r3, #10
 8002420:	d90b      	bls.n	800243a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2205      	movs	r2, #5
 8002432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0c5      	b.n	80025c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0e5      	beq.n	8002414 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0202 	bic.w	r2, r2, #2
 8002456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002458:	f7ff fb76 	bl	8001b48 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800245e:	e012      	b.n	8002486 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002460:	f7ff fb72 	bl	8001b48 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b0a      	cmp	r3, #10
 800246c:	d90b      	bls.n	8002486 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2205      	movs	r2, #5
 800247e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e09f      	b.n	80025c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e5      	bne.n	8002460 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e1b      	ldrb	r3, [r3, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7e5b      	ldrb	r3, [r3, #25]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d108      	bne.n	80024d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e007      	b.n	80024e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e9b      	ldrb	r3, [r3, #26]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d108      	bne.n	8002502 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e007      	b.n	8002512 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0220 	bic.w	r2, r2, #32
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7edb      	ldrb	r3, [r3, #27]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0210 	bic.w	r2, r2, #16
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e007      	b.n	800253c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0210 	orr.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7f1b      	ldrb	r3, [r3, #28]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d108      	bne.n	8002556 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e007      	b.n	8002566 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0208 	bic.w	r2, r2, #8
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7f5b      	ldrb	r3, [r3, #29]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d108      	bne.n	8002580 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0204 	orr.w	r2, r2, #4
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e007      	b.n	8002590 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	ea42 0103 	orr.w	r1, r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <HAL_CAN_ConfigFilter+0x26>
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f040 80be 	bne.w	8002772 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_CAN_ConfigFilter+0x1bc>)
 80025f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002610:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	431a      	orrs	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2201      	movs	r2, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	401a      	ands	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d123      	bne.n	80026a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800267a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3248      	adds	r2, #72	; 0x48
 8002680:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002694:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002696:	6979      	ldr	r1, [r7, #20]
 8002698:	3348      	adds	r3, #72	; 0x48
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d122      	bne.n	80026ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3248      	adds	r2, #72	; 0x48
 80026ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026e4:	6979      	ldr	r1, [r7, #20]
 80026e6:	3348      	adds	r3, #72	; 0x48
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	401a      	ands	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002708:	e007      	b.n	800271a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	431a      	orrs	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002734:	e007      	b.n	8002746 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	431a      	orrs	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	431a      	orrs	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002764:	f023 0201 	bic.w	r2, r3, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e006      	b.n	8002780 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40006400 	.word	0x40006400

08002790 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d12e      	bne.n	8002802 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027bc:	f7ff f9c4 	bl	8001b48 <HAL_GetTick>
 80027c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027c2:	e012      	b.n	80027ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027c4:	f7ff f9c0 	bl	8001b48 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b0a      	cmp	r3, #10
 80027d0:	d90b      	bls.n	80027ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2205      	movs	r2, #5
 80027e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e012      	b.n	8002810 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e5      	bne.n	80027c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e006      	b.n	8002810 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d003      	beq.n	800283c <HAL_CAN_GetRxMessage+0x24>
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b02      	cmp	r3, #2
 8002838:	f040 80f3 	bne.w	8002a22 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10e      	bne.n	8002860 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0e7      	b.n	8002a30 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d107      	bne.n	800287e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0d8      	b.n	8002a30 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	331b      	adds	r3, #27
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0204 	and.w	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10c      	bne.n	80028b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	331b      	adds	r3, #27
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	4413      	add	r3, r2
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0d5b      	lsrs	r3, r3, #21
 80028ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e00b      	b.n	80028ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	331b      	adds	r3, #27
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4413      	add	r3, r2
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	08db      	lsrs	r3, r3, #3
 80028c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	331b      	adds	r3, #27
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0202 	and.w	r2, r3, #2
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	331b      	adds	r3, #27
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	331b      	adds	r3, #27
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	b2da      	uxtb	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	331b      	adds	r3, #27
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	b29a      	uxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	4413      	add	r3, r2
 8002936:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4413      	add	r3, r2
 800294c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0a1a      	lsrs	r2, r3, #8
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	4413      	add	r3, r2
 8002966:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0c1a      	lsrs	r2, r3, #16
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	3302      	adds	r3, #2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e1a      	lsrs	r2, r3, #24
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3303      	adds	r3, #3
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3304      	adds	r3, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0a1a      	lsrs	r2, r3, #8
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3305      	adds	r3, #5
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0c1a      	lsrs	r2, r3, #16
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3306      	adds	r3, #6
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e1a      	lsrs	r2, r3, #24
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3307      	adds	r3, #7
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	e007      	b.n	8002a1e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e006      	b.n	8002a30 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d002      	beq.n	8002a5a <HAL_CAN_ActivateNotification+0x1e>
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d109      	bne.n	8002a6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6959      	ldr	r1, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e006      	b.n	8002a7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d07c      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f983 	bl	8002df6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002af0:	e016      	b.n	8002b20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	e00c      	b.n	8002b20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	e002      	b.n	8002b20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f989 	bl	8002e32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f963 	bl	8002e0a <HAL_CAN_TxMailbox1CompleteCallback>
 8002b44:	e016      	b.n	8002b74 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e00c      	b.n	8002b74 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	e002      	b.n	8002b74 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f969 	bl	8002e46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d024      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f943 	bl	8002e1e <HAL_CAN_TxMailbox2CompleteCallback>
 8002b98:	e016      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e00c      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	e002      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f949 	bl	8002e5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2210      	movs	r2, #16
 8002bea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2208      	movs	r2, #8
 8002c06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f930 	bl	8002e6e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd fcbc 	bl	80005a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f912 	bl	8002e96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8f9 	bl	8002e82 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8fc 	bl	8002eaa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8f5 	bl	8002ebe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d07b      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d072      	beq.n	8002dce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d043      	beq.n	8002dce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03e      	beq.n	8002dce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d56:	2b60      	cmp	r3, #96	; 0x60
 8002d58:	d02b      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x32a>
 8002d5a:	2b60      	cmp	r3, #96	; 0x60
 8002d5c:	d82e      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d5e:	2b50      	cmp	r3, #80	; 0x50
 8002d60:	d022      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x320>
 8002d62:	2b50      	cmp	r3, #80	; 0x50
 8002d64:	d82a      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d019      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x316>
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d826      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d6e:	2b30      	cmp	r3, #48	; 0x30
 8002d70:	d010      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x30c>
 8002d72:	2b30      	cmp	r3, #48	; 0x30
 8002d74:	d822      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d002      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x2f8>
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d005      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d7e:	e01d      	b.n	8002dbc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d88:	e019      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d92:	e014      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d9c:	e00f      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da6:	e00a      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db0:	e005      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dba:	e000      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            break;
 8002dbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dcc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f872 	bl	8002ed2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	; 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <__NVIC_EnableIRQ+0x38>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
         );
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff4c 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306a:	f7ff ff61 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 800306e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	6978      	ldr	r0, [r7, #20]
 8003076:	f7ff ffb1 	bl	8002fdc <NVIC_EncodePriority>
 800307a:	4602      	mov	r2, r0
 800307c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff80 	bl	8002f88 <__NVIC_SetPriority>
}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff54 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e014      	b.n	80030e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	791b      	ldrb	r3, [r3, #4]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fe f90e 	bl	80012f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	795b      	ldrb	r3, [r3, #5]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_DAC_ConfigChannel+0x18>
 8003104:	2302      	movs	r3, #2
 8003106:	e03c      	b.n	8003182 <HAL_DAC_ConfigChannel+0x92>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2202      	movs	r2, #2
 8003112:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4013      	ands	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	22c0      	movs	r2, #192	; 0xc0
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	400a      	ands	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7fe fcd4 	bl	8001b48 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e099      	b.n	80032e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	e00f      	b.n	80031ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ce:	f7fe fcbb 	bl	8001b48 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d908      	bls.n	80031ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e078      	b.n	80032e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e8      	bne.n	80031ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_DMA_Init+0x158>)
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b04      	cmp	r3, #4
 8003246:	d107      	bne.n	8003258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4313      	orrs	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0307 	bic.w	r3, r3, #7
 800326e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b04      	cmp	r3, #4
 8003280:	d117      	bne.n	80032b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fb01 	bl	800389c <DMA_CheckFifoParam>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2240      	movs	r2, #64	; 0x40
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ae:	2301      	movs	r3, #1
 80032b0:	e016      	b.n	80032e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fab8 	bl	8003830 <DMA_CalcBaseAndBitshift>
 80032c0:	4603      	mov	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	223f      	movs	r2, #63	; 0x3f
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	f010803f 	.word	0xf010803f

080032ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Start_IT+0x26>
 800330e:	2302      	movs	r3, #2
 8003310:	e040      	b.n	8003394 <HAL_DMA_Start_IT+0xa8>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d12f      	bne.n	8003386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa4a 	bl	80037d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0216 	orr.w	r2, r2, #22
 800335a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e005      	b.n	8003392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800338e:	2302      	movs	r3, #2
 8003390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003392:	7dfb      	ldrb	r3, [r7, #23]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033aa:	f7fe fbcd 	bl	8001b48 <HAL_GetTick>
 80033ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d008      	beq.n	80033ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e052      	b.n	8003474 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0216 	bic.w	r2, r2, #22
 80033dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_DMA_Abort+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341e:	e013      	b.n	8003448 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003420:	f7fe fb92 	bl	8001b48 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b05      	cmp	r3, #5
 800342c:	d90c      	bls.n	8003448 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2203      	movs	r2, #3
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e015      	b.n	8003474 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e4      	bne.n	8003420 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	223f      	movs	r2, #63	; 0x3f
 800345c:	409a      	lsls	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d004      	beq.n	800349a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e00c      	b.n	80034b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2205      	movs	r2, #5
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034cc:	4b8e      	ldr	r3, [pc, #568]	; (8003708 <HAL_DMA_IRQHandler+0x248>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a8e      	ldr	r2, [pc, #568]	; (800370c <HAL_DMA_IRQHandler+0x24c>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2208      	movs	r2, #8
 80034ec:	409a      	lsls	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01a      	beq.n	800352c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0204 	bic.w	r2, r2, #4
 8003512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	2208      	movs	r2, #8
 800351a:	409a      	lsls	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	2201      	movs	r2, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2201      	movs	r2, #1
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	2204      	movs	r2, #4
 8003568:	409a      	lsls	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d012      	beq.n	8003598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2204      	movs	r2, #4
 8003586:	409a      	lsls	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0204 	orr.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2210      	movs	r2, #16
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d043      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03c      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2210      	movs	r2, #16
 80035bc:	409a      	lsls	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d018      	beq.n	8003602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d024      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
 80035ee:	e01f      	b.n	8003630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
 8003600:	e016      	b.n	8003630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d107      	bne.n	8003620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0208 	bic.w	r2, r2, #8
 800361e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2220      	movs	r2, #32
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 808f 	beq.w	8003760 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8087 	beq.w	8003760 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	2220      	movs	r2, #32
 8003658:	409a      	lsls	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b05      	cmp	r3, #5
 8003668:	d136      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0216 	bic.w	r2, r2, #22
 8003678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <HAL_DMA_IRQHandler+0x1da>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0208 	bic.w	r2, r2, #8
 80036a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	223f      	movs	r2, #63	; 0x3f
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d07e      	beq.n	80037cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
        }
        return;
 80036d6:	e079      	b.n	80037cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10d      	bne.n	8003710 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d031      	beq.n	8003760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e02c      	b.n	8003760 <HAL_DMA_IRQHandler+0x2a0>
 8003706:	bf00      	nop
 8003708:	20000014 	.word	0x20000014
 800370c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d023      	beq.n	8003760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e01e      	b.n	8003760 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0210 	bic.w	r2, r2, #16
 800373e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	2b00      	cmp	r3, #0
 8003766:	d032      	beq.n	80037ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d022      	beq.n	80037ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2205      	movs	r2, #5
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	3301      	adds	r3, #1
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	429a      	cmp	r2, r3
 8003796:	d307      	bcc.n	80037a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f2      	bne.n	800378c <HAL_DMA_IRQHandler+0x2cc>
 80037a6:	e000      	b.n	80037aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
 80037ca:	e000      	b.n	80037ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80037cc:	bf00      	nop
    }
  }
}
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d108      	bne.n	8003814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003812:	e007      	b.n	8003824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	60da      	str	r2, [r3, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	3b10      	subs	r3, #16
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <DMA_CalcBaseAndBitshift+0x64>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800384a:	4a13      	ldr	r2, [pc, #76]	; (8003898 <DMA_CalcBaseAndBitshift+0x68>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d909      	bls.n	8003872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
 8003870:	e007      	b.n	8003882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	aaaaaaab 	.word	0xaaaaaaab
 8003898:	0800b028 	.word	0x0800b028

0800389c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11f      	bne.n	80038f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d856      	bhi.n	800396a <DMA_CheckFifoParam+0xce>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <DMA_CheckFifoParam+0x28>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038e7 	.word	0x080038e7
 80038cc:	080038d5 	.word	0x080038d5
 80038d0:	0800396b 	.word	0x0800396b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d046      	beq.n	800396e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e4:	e043      	b.n	800396e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ee:	d140      	bne.n	8003972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f4:	e03d      	b.n	8003972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fe:	d121      	bne.n	8003944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d837      	bhi.n	8003976 <DMA_CheckFifoParam+0xda>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <DMA_CheckFifoParam+0x70>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	0800391d 	.word	0x0800391d
 8003910:	08003923 	.word	0x08003923
 8003914:	0800391d 	.word	0x0800391d
 8003918:	08003935 	.word	0x08003935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e030      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d025      	beq.n	800397a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e022      	b.n	800397a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800393c:	d11f      	bne.n	800397e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003942:	e01c      	b.n	800397e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d903      	bls.n	8003952 <DMA_CheckFifoParam+0xb6>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d003      	beq.n	8003958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003950:	e018      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      break;
 8003956:	e015      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e00b      	b.n	8003982 <DMA_CheckFifoParam+0xe6>
      break;
 800396a:	bf00      	nop
 800396c:	e00a      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 800396e:	bf00      	nop
 8003970:	e008      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
 8003974:	e006      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 8003976:	bf00      	nop
 8003978:	e004      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;   
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 8003982:	bf00      	nop
    }
  } 
  
  return status; 
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06c      	b.n	8003a80 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2223      	movs	r2, #35	; 0x23
 80039b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fd fd11 	bl	80013e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_ETH_Init+0xf4>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_ETH_Init+0xf4>)
 80039c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_ETH_Init+0xf4>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_ETH_Init+0xf8>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <HAL_ETH_Init+0xf8>)
 80039e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80039e6:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <HAL_ETH_Init+0xf8>)
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	4927      	ldr	r1, [pc, #156]	; (8003a8c <HAL_ETH_Init+0xf8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_ETH_Init+0xf8>)
 80039f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a10:	f7fe f89a 	bl	8001b48 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a16:	e011      	b.n	8003a3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a18:	f7fe f896 	bl	8001b48 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a26:	d909      	bls.n	8003a3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	22e0      	movs	r2, #224	; 0xe0
 8003a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e021      	b.n	8003a80 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e4      	bne.n	8003a18 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f958 	bl	8003d04 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f9ff 	bl	8003e58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa55 	bl	8003f0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	461a      	mov	r2, r3
 8003a66:	2100      	movs	r1, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9bd 	bl	8003de8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40013800 	.word	0x40013800

08003a90 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4b51      	ldr	r3, [pc, #324]	; (8003bec <ETH_SetMACConfig+0x15c>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	7c1b      	ldrb	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <ETH_SetMACConfig+0x28>
 8003ab2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ab6:	e000      	b.n	8003aba <ETH_SetMACConfig+0x2a>
 8003ab8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	7c5b      	ldrb	r3, [r3, #17]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <ETH_SetMACConfig+0x38>
 8003ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ac6:	e000      	b.n	8003aca <ETH_SetMACConfig+0x3a>
 8003ac8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003aca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ad0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	7fdb      	ldrb	r3, [r3, #31]
 8003ad6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ad8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ade:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	7f92      	ldrb	r2, [r2, #30]
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d102      	bne.n	8003aee <ETH_SetMACConfig+0x5e>
 8003ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aec:	e000      	b.n	8003af0 <ETH_SetMACConfig+0x60>
 8003aee:	2200      	movs	r2, #0
                        macconf->Speed |
 8003af0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	7f1b      	ldrb	r3, [r3, #28]
 8003af6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003af8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003afe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	791b      	ldrb	r3, [r3, #4]
 8003b04:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	d102      	bne.n	8003b18 <ETH_SetMACConfig+0x88>
 8003b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b16:	e000      	b.n	8003b1a <ETH_SetMACConfig+0x8a>
 8003b18:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	7bdb      	ldrb	r3, [r3, #15]
 8003b20:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b22:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b30:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b32:	4313      	orrs	r3, r2
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f7fe f808 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	d101      	bne.n	8003b7e <ETH_SetMACConfig+0xee>
 8003b7a:	2280      	movs	r2, #128	; 0x80
 8003b7c:	e000      	b.n	8003b80 <ETH_SetMACConfig+0xf0>
 8003b7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b80:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003b8e:	2a01      	cmp	r2, #1
 8003b90:	d101      	bne.n	8003b96 <ETH_SetMACConfig+0x106>
 8003b92:	2208      	movs	r2, #8
 8003b94:	e000      	b.n	8003b98 <ETH_SetMACConfig+0x108>
 8003b96:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003ba0:	2a01      	cmp	r2, #1
 8003ba2:	d101      	bne.n	8003ba8 <ETH_SetMACConfig+0x118>
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	e000      	b.n	8003baa <ETH_SetMACConfig+0x11a>
 8003ba8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003bb2:	2a01      	cmp	r2, #1
 8003bb4:	d101      	bne.n	8003bba <ETH_SetMACConfig+0x12a>
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	e000      	b.n	8003bbc <ETH_SetMACConfig+0x12c>
 8003bba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7fd ffc3 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	619a      	str	r2, [r3, #24]
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	ff20810f 	.word	0xff20810f

08003bf0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <ETH_SetDMAConfig+0x110>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	7b1b      	ldrb	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <ETH_SetDMAConfig+0x2c>
 8003c16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c1a:	e000      	b.n	8003c1e <ETH_SetDMAConfig+0x2e>
 8003c1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	7b5b      	ldrb	r3, [r3, #13]
 8003c22:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c24:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	7f52      	ldrb	r2, [r2, #29]
 8003c2a:	2a00      	cmp	r2, #0
 8003c2c:	d102      	bne.n	8003c34 <ETH_SetDMAConfig+0x44>
 8003c2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c32:	e000      	b.n	8003c36 <ETH_SetDMAConfig+0x46>
 8003c34:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	7b9b      	ldrb	r3, [r3, #14]
 8003c3c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c3e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	7f1b      	ldrb	r3, [r3, #28]
 8003c4a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c4c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	7f9b      	ldrb	r3, [r3, #30]
 8003c52:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c54:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c62:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c64:	4313      	orrs	r3, r2
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c74:	461a      	mov	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7fd ff6a 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	461a      	mov	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	791b      	ldrb	r3, [r3, #4]
 8003c9e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ca4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003caa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003cb0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cb8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003cba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003cc2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003cc8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cd6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f7fd ff3b 	bl	8001b60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	f8de3f23 	.word	0xf8de3f23

08003d04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b0a6      	sub	sp, #152	; 0x98
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d40:	2300      	movs	r3, #0
 8003d42:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fe86 	bl	8003a90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003da6:	2300      	movs	r3, #0
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dbe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dc4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003dd4:	f107 0308 	add.w	r3, r7, #8
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff08 	bl	8003bf0 <ETH_SetDMAConfig>
}
 8003de0:	bf00      	nop
 8003de2:	3798      	adds	r7, #152	; 0x98
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3305      	adds	r3, #5
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	3204      	adds	r2, #4
 8003e00:	7812      	ldrb	r2, [r2, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <ETH_MACAddressConfig+0x68>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3303      	adds	r3, #3
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	061a      	lsls	r2, r3, #24
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3301      	adds	r3, #1
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <ETH_MACAddressConfig+0x6c>)
 8003e3a:	4413      	add	r3, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40028040 	.word	0x40028040
 8003e54:	40028044 	.word	0x40028044

08003e58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e03e      	b.n	8003ee4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68d9      	ldr	r1, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	3206      	adds	r2, #6
 8003e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d80c      	bhi.n	8003ec8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68d9      	ldr	r1, [r3, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	e004      	b.n	8003ed2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d9bd      	bls.n	8003e66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efc:	611a      	str	r2, [r3, #16]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e046      	b.n	8003fa6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6919      	ldr	r1, [r3, #16]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f54:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003f5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	3212      	adds	r2, #18
 8003f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d80c      	bhi.n	8003f96 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6919      	ldr	r1, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e004      	b.n	8003fa0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d9b5      	bls.n	8003f18 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd6:	60da      	str	r2, [r3, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e177      	b.n	80042f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004000:	2201      	movs	r2, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4013      	ands	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	429a      	cmp	r2, r3
 800401a:	f040 8166 	bne.w	80042ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d005      	beq.n	8004036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004032:	2b02      	cmp	r3, #2
 8004034:	d130      	bne.n	8004098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	2203      	movs	r2, #3
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800406c:	2201      	movs	r2, #1
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 0201 	and.w	r2, r3, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d017      	beq.n	80040d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d123      	bne.n	8004128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	08da      	lsrs	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3208      	adds	r2, #8
 80040e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	220f      	movs	r2, #15
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	08da      	lsrs	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3208      	adds	r2, #8
 8004122:	69b9      	ldr	r1, [r7, #24]
 8004124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 0203 	and.w	r2, r3, #3
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80c0 	beq.w	80042ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b66      	ldr	r3, [pc, #408]	; (8004308 <HAL_GPIO_Init+0x324>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4a65      	ldr	r2, [pc, #404]	; (8004308 <HAL_GPIO_Init+0x324>)
 8004174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004178:	6453      	str	r3, [r2, #68]	; 0x44
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_GPIO_Init+0x324>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004186:	4a61      	ldr	r2, [pc, #388]	; (800430c <HAL_GPIO_Init+0x328>)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	3302      	adds	r3, #2
 800418e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a58      	ldr	r2, [pc, #352]	; (8004310 <HAL_GPIO_Init+0x32c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d037      	beq.n	8004222 <HAL_GPIO_Init+0x23e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a57      	ldr	r2, [pc, #348]	; (8004314 <HAL_GPIO_Init+0x330>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_GPIO_Init+0x23a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a56      	ldr	r2, [pc, #344]	; (8004318 <HAL_GPIO_Init+0x334>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <HAL_GPIO_Init+0x236>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a55      	ldr	r2, [pc, #340]	; (800431c <HAL_GPIO_Init+0x338>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d025      	beq.n	8004216 <HAL_GPIO_Init+0x232>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a54      	ldr	r2, [pc, #336]	; (8004320 <HAL_GPIO_Init+0x33c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01f      	beq.n	8004212 <HAL_GPIO_Init+0x22e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a53      	ldr	r2, [pc, #332]	; (8004324 <HAL_GPIO_Init+0x340>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d019      	beq.n	800420e <HAL_GPIO_Init+0x22a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_GPIO_Init+0x344>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_GPIO_Init+0x226>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a51      	ldr	r2, [pc, #324]	; (800432c <HAL_GPIO_Init+0x348>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00d      	beq.n	8004206 <HAL_GPIO_Init+0x222>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a50      	ldr	r2, [pc, #320]	; (8004330 <HAL_GPIO_Init+0x34c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <HAL_GPIO_Init+0x21e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4f      	ldr	r2, [pc, #316]	; (8004334 <HAL_GPIO_Init+0x350>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_GPIO_Init+0x21a>
 80041fa:	2309      	movs	r3, #9
 80041fc:	e012      	b.n	8004224 <HAL_GPIO_Init+0x240>
 80041fe:	230a      	movs	r3, #10
 8004200:	e010      	b.n	8004224 <HAL_GPIO_Init+0x240>
 8004202:	2308      	movs	r3, #8
 8004204:	e00e      	b.n	8004224 <HAL_GPIO_Init+0x240>
 8004206:	2307      	movs	r3, #7
 8004208:	e00c      	b.n	8004224 <HAL_GPIO_Init+0x240>
 800420a:	2306      	movs	r3, #6
 800420c:	e00a      	b.n	8004224 <HAL_GPIO_Init+0x240>
 800420e:	2305      	movs	r3, #5
 8004210:	e008      	b.n	8004224 <HAL_GPIO_Init+0x240>
 8004212:	2304      	movs	r3, #4
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x240>
 8004216:	2303      	movs	r3, #3
 8004218:	e004      	b.n	8004224 <HAL_GPIO_Init+0x240>
 800421a:	2302      	movs	r3, #2
 800421c:	e002      	b.n	8004224 <HAL_GPIO_Init+0x240>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_GPIO_Init+0x240>
 8004222:	2300      	movs	r3, #0
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f002 0203 	and.w	r2, r2, #3
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	4093      	lsls	r3, r2
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004234:	4935      	ldr	r1, [pc, #212]	; (800430c <HAL_GPIO_Init+0x328>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_GPIO_Init+0x354>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004266:	4a34      	ldr	r2, [pc, #208]	; (8004338 <HAL_GPIO_Init+0x354>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_GPIO_Init+0x354>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004290:	4a29      	ldr	r2, [pc, #164]	; (8004338 <HAL_GPIO_Init+0x354>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004296:	4b28      	ldr	r3, [pc, #160]	; (8004338 <HAL_GPIO_Init+0x354>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_GPIO_Init+0x354>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_GPIO_Init+0x354>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_GPIO_Init+0x354>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	f67f ae84 	bls.w	8004000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	40013800 	.word	0x40013800
 8004310:	40020000 	.word	0x40020000
 8004314:	40020400 	.word	0x40020400
 8004318:	40020800 	.word	0x40020800
 800431c:	40020c00 	.word	0x40020c00
 8004320:	40021000 	.word	0x40021000
 8004324:	40021400 	.word	0x40021400
 8004328:	40021800 	.word	0x40021800
 800432c:	40021c00 	.word	0x40021c00
 8004330:	40022000 	.word	0x40022000
 8004334:	40022400 	.word	0x40022400
 8004338:	40013c00 	.word	0x40013c00

0800433c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	e001      	b.n	800435e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
 8004378:	4613      	mov	r3, r2
 800437a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800437c:	787b      	ldrb	r3, [r7, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004388:	e003      	b.n	8004392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800438a:	887b      	ldrh	r3, [r7, #2]
 800438c:	041a      	lsls	r2, r3, #16
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	619a      	str	r2, [r3, #24]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043b0:	887a      	ldrh	r2, [r7, #2]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	041a      	lsls	r2, r3, #16
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43d9      	mvns	r1, r3
 80043bc:	887b      	ldrh	r3, [r7, #2]
 80043be:	400b      	ands	r3, r1
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	619a      	str	r2, [r3, #24]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d4:	b08f      	sub	sp, #60	; 0x3c
 80043d6:	af0a      	add	r7, sp, #40	; 0x28
 80043d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e10f      	b.n	8004604 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd f9c8 	bl	8001794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2203      	movs	r2, #3
 8004408:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f003 f899 	bl	800755a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	687e      	ldr	r6, [r7, #4]
 8004430:	466d      	mov	r5, sp
 8004432:	f106 0410 	add.w	r4, r6, #16
 8004436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800443a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800443c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800443e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004442:	e885 0003 	stmia.w	r5, {r0, r1}
 8004446:	1d33      	adds	r3, r6, #4
 8004448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800444a:	6838      	ldr	r0, [r7, #0]
 800444c:	f003 f824 	bl	8007498 <USB_CoreInit>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0d0      	b.n	8004604 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f003 f887 	bl	800757c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e04a      	b.n	800450a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	333d      	adds	r3, #61	; 0x3d
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	333c      	adds	r3, #60	; 0x3c
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	b298      	uxth	r0, r3
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3344      	adds	r3, #68	; 0x44
 80044b0:	4602      	mov	r2, r0
 80044b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044b4:	7bfa      	ldrb	r2, [r7, #15]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	3340      	adds	r3, #64	; 0x40
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044c8:	7bfa      	ldrb	r2, [r7, #15]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	3348      	adds	r3, #72	; 0x48
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044dc:	7bfa      	ldrb	r2, [r7, #15]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	334c      	adds	r3, #76	; 0x4c
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3354      	adds	r3, #84	; 0x54
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	3301      	adds	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d3af      	bcc.n	8004474 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
 8004518:	e044      	b.n	80045a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004530:	7bfa      	ldrb	r2, [r7, #15]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004546:	7bfa      	ldrb	r2, [r7, #15]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	3301      	adds	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3b5      	bcc.n	800451a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	687e      	ldr	r6, [r7, #4]
 80045b6:	466d      	mov	r5, sp
 80045b8:	f106 0410 	add.w	r4, r6, #16
 80045bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80045cc:	1d33      	adds	r3, r6, #4
 80045ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d0:	6838      	ldr	r0, [r7, #0]
 80045d2:	f003 f81f 	bl	8007614 <USB_DevInit>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e00d      	b.n	8004604 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f003 f9ea 	bl	80079d6 <USB_DevDisconnect>

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800460c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e267      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d075      	beq.n	8004716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	4b88      	ldr	r3, [pc, #544]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b04      	cmp	r3, #4
 8004634:	d00c      	beq.n	8004650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004636:	4b85      	ldr	r3, [pc, #532]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d112      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004642:	4b82      	ldr	r3, [pc, #520]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800464e:	d10b      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4b7e      	ldr	r3, [pc, #504]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05b      	beq.n	8004714 <HAL_RCC_OscConfig+0x108>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d157      	bne.n	8004714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e242      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d106      	bne.n	8004680 <HAL_RCC_OscConfig+0x74>
 8004672:	4b76      	ldr	r3, [pc, #472]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a75      	ldr	r2, [pc, #468]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e01d      	b.n	80046bc <HAL_RCC_OscConfig+0xb0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x98>
 800468a:	4b70      	ldr	r3, [pc, #448]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6f      	ldr	r2, [pc, #444]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b6d      	ldr	r3, [pc, #436]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a6c      	ldr	r2, [pc, #432]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0xb0>
 80046a4:	4b69      	ldr	r3, [pc, #420]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a68      	ldr	r2, [pc, #416]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d013      	beq.n	80046ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fd fa40 	bl	8001b48 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fd fa3c 	bl	8001b48 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e207      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	4b5b      	ldr	r3, [pc, #364]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0xc0>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd fa2c 	bl	8001b48 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fd fa28 	bl	8001b48 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1f3      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0xe8>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d063      	beq.n	80047ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004736:	2b08      	cmp	r3, #8
 8004738:	d11c      	bne.n	8004774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473a:	4b44      	ldr	r3, [pc, #272]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004746:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_RCC_OscConfig+0x152>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e1c7      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4937      	ldr	r1, [pc, #220]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004772:	e03a      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_OscConfig+0x244>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fd f9e1 	bl	8001b48 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478a:	f7fd f9dd 	bl	8001b48 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e1a8      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4925      	ldr	r1, [pc, #148]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]
 80047bc:	e015      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_OscConfig+0x244>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd f9c0 	bl	8001b48 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fd f9bc 	bl	8001b48 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e187      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d036      	beq.n	8004864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <HAL_RCC_OscConfig+0x248>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fd f9a0 	bl	8001b48 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800480c:	f7fd f99c 	bl	8001b48 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e167      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481e:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_OscConfig+0x240>)
 8004820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x200>
 800482a:	e01b      	b.n	8004864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_OscConfig+0x248>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004832:	f7fd f989 	bl	8001b48 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004838:	e00e      	b.n	8004858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800483a:	f7fd f985 	bl	8001b48 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d907      	bls.n	8004858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e150      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
 800484c:	40023800 	.word	0x40023800
 8004850:	42470000 	.word	0x42470000
 8004854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ea      	bne.n	800483a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8097 	beq.w	80049a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004876:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	4b7d      	ldr	r3, [pc, #500]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	; 0x40
 8004892:	4b7a      	ldr	r3, [pc, #488]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	4b77      	ldr	r3, [pc, #476]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d118      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a73      	ldr	r2, [pc, #460]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ba:	f7fd f945 	bl	8001b48 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fd f941 	bl	8001b48 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e10c      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <HAL_RCC_OscConfig+0x474>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2ea>
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a63      	ldr	r2, [pc, #396]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	e01c      	b.n	8004930 <HAL_RCC_OscConfig+0x324>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x30c>
 80048fe:	4b5f      	ldr	r3, [pc, #380]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a5e      	ldr	r2, [pc, #376]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	4b5c      	ldr	r3, [pc, #368]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a5b      	ldr	r2, [pc, #364]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6713      	str	r3, [r2, #112]	; 0x70
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0x324>
 8004918:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4a57      	ldr	r2, [pc, #348]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	6713      	str	r3, [r2, #112]	; 0x70
 8004924:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	4a54      	ldr	r2, [pc, #336]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800492a:	f023 0304 	bic.w	r3, r3, #4
 800492e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd f906 	bl	8001b48 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	e00a      	b.n	8004956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fd f902 	bl	8001b48 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0cb      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ee      	beq.n	8004940 <HAL_RCC_OscConfig+0x334>
 8004962:	e014      	b.n	800498e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004964:	f7fd f8f0 	bl	8001b48 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496a:	e00a      	b.n	8004982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496c:	f7fd f8ec 	bl	8001b48 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0b5      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ee      	bne.n	800496c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d105      	bne.n	80049a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004994:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a1 	beq.w	8004aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d05c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d141      	bne.n	8004a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049be:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <HAL_RCC_OscConfig+0x478>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fd f8c0 	bl	8001b48 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd f8bc 	bl	8001b48 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e087      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	019b      	lsls	r3, r3, #6
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	3b01      	subs	r3, #1
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	491b      	ldr	r1, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_RCC_OscConfig+0x478>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd f895 	bl	8001b48 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fd f891 	bl	8001b48 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e05c      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x416>
 8004a40:	e054      	b.n	8004aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <HAL_RCC_OscConfig+0x478>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fd f87e 	bl	8001b48 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd f87a 	bl	8001b48 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e045      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_OscConfig+0x470>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x444>
 8004a6e:	e03d      	b.n	8004aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e038      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40007000 	.word	0x40007000
 8004a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d028      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d121      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d11a      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d111      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800

08004afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0cc      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b68      	ldr	r3, [pc, #416]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90c      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b65      	ldr	r3, [pc, #404]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4a58      	ldr	r2, [pc, #352]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d044      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d119      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	4b3f      	ldr	r3, [pc, #252]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e06f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	4b3b      	ldr	r3, [pc, #236]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e067      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4934      	ldr	r1, [pc, #208]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bec:	f7fc ffac 	bl	8001b48 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc ffa8 	bl	8001b48 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e04f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d20c      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc fdd0 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0800b010 	.word	0x0800b010
 8004cc0:	20000014 	.word	0x20000014
 8004cc4:	20000018 	.word	0x20000018

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ccc:	b094      	sub	sp, #80	; 0x50
 8004cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce0:	4b79      	ldr	r3, [pc, #484]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d00d      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x40>
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	f200 80e1 	bhi.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x34>
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfa:	e0db      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b73      	ldr	r3, [pc, #460]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d00:	e0db      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d02:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d06:	e0d8      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d08:	4b6f      	ldr	r3, [pc, #444]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d12:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
 8004d32:	2300      	movs	r3, #0
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
 8004d36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	f04f 0000 	mov.w	r0, #0
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	0159      	lsls	r1, r3, #5
 8004d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4c:	0150      	lsls	r0, r2, #5
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4621      	mov	r1, r4
 8004d54:	1a51      	subs	r1, r2, r1
 8004d56:	6139      	str	r1, [r7, #16]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	018b      	lsls	r3, r1, #6
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d76:	4651      	mov	r1, sl
 8004d78:	018a      	lsls	r2, r1, #6
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d80:	4659      	mov	r1, fp
 8004d82:	eb63 0901 	sbc.w	r9, r3, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9a:	4690      	mov	r8, r2
 8004d9c:	4699      	mov	r9, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	eb18 0303 	adds.w	r3, r8, r3
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	462b      	mov	r3, r5
 8004da8:	eb49 0303 	adc.w	r3, r9, r3
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	024b      	lsls	r3, r1, #9
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	024a      	lsls	r2, r1, #9
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dce:	2200      	movs	r2, #0
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd8:	f7fb fa62 	bl	80002a0 <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4613      	mov	r3, r2
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de4:	e058      	b.n	8004e98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de6:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	2200      	movs	r2, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	4611      	mov	r1, r2
 8004df2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	0159      	lsls	r1, r3, #5
 8004e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e12:	0150      	lsls	r0, r2, #5
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4641      	mov	r1, r8
 8004e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e38:	ebb2 040a 	subs.w	r4, r2, sl
 8004e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	00eb      	lsls	r3, r5, #3
 8004e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e4e:	00e2      	lsls	r2, r4, #3
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	4643      	mov	r3, r8
 8004e56:	18e3      	adds	r3, r4, r3
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	eb45 0303 	adc.w	r3, r5, r3
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	028b      	lsls	r3, r1, #10
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e78:	4621      	mov	r1, r4
 8004e7a:	028a      	lsls	r2, r1, #10
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	2200      	movs	r2, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	61fa      	str	r2, [r7, #28]
 8004e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e8c:	f7fb fa08 	bl	80002a0 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x204>)
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3750      	adds	r7, #80	; 0x50
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200

08004ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000014 	.word	0x20000014

08004eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef0:	f7ff fff0 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a9b      	lsrs	r3, r3, #10
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	0800b020 	.word	0x0800b020

08004f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f18:	f7ff ffdc 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	0b5b      	lsrs	r3, r3, #13
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4903      	ldr	r1, [pc, #12]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800b020 	.word	0x0800b020

08004f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	220f      	movs	r2, #15
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0203 	and.w	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_RCC_GetClockConfig+0x60>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 020f 	and.w	r2, r3, #15
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40023c00 	.word	0x40023c00

08004fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e041      	b.n	8005036 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fad0 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f000 fe5e 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04e      	b.n	80050f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <HAL_TIM_Base_Start_IT+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d01d      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_TIM_Base_Start_IT+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_TIM_Base_Start_IT+0xcc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_TIM_Base_Start_IT+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_TIM_Base_Start_IT+0xdc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d111      	bne.n	80050e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d010      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	e007      	b.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40010400 	.word	0x40010400
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800

08005120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e041      	b.n	80051b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f839 	bl	80051be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 fd9e 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <HAL_TIM_PWM_Start_DMA+0x2c>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e022      	b.n	8005246 <HAL_TIM_PWM_Start_DMA+0x72>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b04      	cmp	r3, #4
 8005204:	d109      	bne.n	800521a <HAL_TIM_PWM_Start_DMA+0x46>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	e015      	b.n	8005246 <HAL_TIM_PWM_Start_DMA+0x72>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d109      	bne.n	8005234 <HAL_TIM_PWM_Start_DMA+0x60>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	e008      	b.n	8005246 <HAL_TIM_PWM_Start_DMA+0x72>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	e171      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_TIM_PWM_Start_DMA+0x94>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e022      	b.n	80052ae <HAL_TIM_PWM_Start_DMA+0xda>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b04      	cmp	r3, #4
 800526c:	d109      	bne.n	8005282 <HAL_TIM_PWM_Start_DMA+0xae>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	bf0c      	ite	eq
 800527a:	2301      	moveq	r3, #1
 800527c:	2300      	movne	r3, #0
 800527e:	b2db      	uxtb	r3, r3
 8005280:	e015      	b.n	80052ae <HAL_TIM_PWM_Start_DMA+0xda>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d109      	bne.n	800529c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	e008      	b.n	80052ae <HAL_TIM_PWM_Start_DMA+0xda>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d024      	beq.n	80052fc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start_DMA+0xee>
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e137      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d0:	e016      	b.n	8005300 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e0:	e00e      	b.n	8005300 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f0:	e006      	b.n	8005300 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052fa:	e001      	b.n	8005300 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e118      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	f200 80ae 	bhi.w	8005464 <HAL_TIM_PWM_Start_DMA+0x290>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	08005465 	.word	0x08005465
 8005318:	08005465 	.word	0x08005465
 800531c:	08005465 	.word	0x08005465
 8005320:	0800538d 	.word	0x0800538d
 8005324:	08005465 	.word	0x08005465
 8005328:	08005465 	.word	0x08005465
 800532c:	08005465 	.word	0x08005465
 8005330:	080053d5 	.word	0x080053d5
 8005334:	08005465 	.word	0x08005465
 8005338:	08005465 	.word	0x08005465
 800533c:	08005465 	.word	0x08005465
 8005340:	0800541d 	.word	0x0800541d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	4a7c      	ldr	r2, [pc, #496]	; (800553c <HAL_TIM_PWM_Start_DMA+0x368>)
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	4a7b      	ldr	r2, [pc, #492]	; (8005540 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	4a7a      	ldr	r2, [pc, #488]	; (8005544 <HAL_TIM_PWM_Start_DMA+0x370>)
 800535a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3334      	adds	r3, #52	; 0x34
 8005368:	461a      	mov	r2, r3
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	f7fd ffbe 	bl	80032ec <HAL_DMA_Start_IT>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e0db      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	60da      	str	r2, [r3, #12]
      break;
 800538a:	e06e      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	4a6a      	ldr	r2, [pc, #424]	; (800553c <HAL_TIM_PWM_Start_DMA+0x368>)
 8005392:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	4a69      	ldr	r2, [pc, #420]	; (8005540 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	4a68      	ldr	r2, [pc, #416]	; (8005544 <HAL_TIM_PWM_Start_DMA+0x370>)
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3338      	adds	r3, #56	; 0x38
 80053b0:	461a      	mov	r2, r3
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	f7fd ff9a 	bl	80032ec <HAL_DMA_Start_IT>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0b7      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d0:	60da      	str	r2, [r3, #12]
      break;
 80053d2:	e04a      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_TIM_PWM_Start_DMA+0x368>)
 80053da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4a56      	ldr	r2, [pc, #344]	; (8005544 <HAL_TIM_PWM_Start_DMA+0x370>)
 80053ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	333c      	adds	r3, #60	; 0x3c
 80053f8:	461a      	mov	r2, r3
 80053fa:	887b      	ldrh	r3, [r7, #2]
 80053fc:	f7fd ff76 	bl	80032ec <HAL_DMA_Start_IT>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e093      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005418:	60da      	str	r2, [r3, #12]
      break;
 800541a:	e026      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	4a46      	ldr	r2, [pc, #280]	; (800553c <HAL_TIM_PWM_Start_DMA+0x368>)
 8005422:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	4a45      	ldr	r2, [pc, #276]	; (8005540 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	4a44      	ldr	r2, [pc, #272]	; (8005544 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005432:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3340      	adds	r3, #64	; 0x40
 8005440:	461a      	mov	r2, r3
 8005442:	887b      	ldrh	r3, [r7, #2]
 8005444:	f7fd ff52 	bl	80032ec <HAL_DMA_Start_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e06f      	b.n	8005532 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005460:	60da      	str	r2, [r3, #12]
      break;
 8005462:	e002      	b.n	800546a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]
      break;
 8005468:	bf00      	nop
  }

  if (status == HAL_OK)
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d15f      	bne.n	8005530 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fefb 	bl	8006274 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a31      	ldr	r2, [pc, #196]	; (8005548 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_PWM_Start_DMA+0x2be>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <HAL_TIM_PWM_Start_DMA+0x378>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <HAL_TIM_PWM_Start_DMA+0x374>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d01d      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a22      	ldr	r2, [pc, #136]	; (8005550 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a21      	ldr	r2, [pc, #132]	; (8005554 <HAL_TIM_PWM_Start_DMA+0x380>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <HAL_TIM_PWM_Start_DMA+0x384>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <HAL_TIM_PWM_Start_DMA+0x378>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIM_PWM_Start_DMA+0x388>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_TIM_PWM_Start_DMA+0x328>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1a      	ldr	r2, [pc, #104]	; (8005560 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d111      	bne.n	8005520 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b06      	cmp	r3, #6
 800550c:	d010      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	e007      	b.n	8005530 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	08005b91 	.word	0x08005b91
 8005540:	08005c39 	.word	0x08005c39
 8005544:	08005aff 	.word	0x08005aff
 8005548:	40010000 	.word	0x40010000
 800554c:	40010400 	.word	0x40010400
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40014000 	.word	0x40014000
 8005560:	40001800 	.word	0x40001800

08005564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b02      	cmp	r3, #2
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0202 	mvn.w	r2, #2
 8005590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa77 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa69 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fa7a 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0204 	mvn.w	r2, #4
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa4d 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa3f 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fa50 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b08      	cmp	r3, #8
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0208 	mvn.w	r2, #8
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2204      	movs	r2, #4
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa23 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa15 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fa26 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b10      	cmp	r3, #16
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b10      	cmp	r3, #16
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0210 	mvn.w	r2, #16
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2208      	movs	r2, #8
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9f9 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9eb 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9fc 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10e      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0201 	mvn.w	r2, #1
 80056e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fb fcf8 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d10e      	bne.n	8005714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d107      	bne.n	8005714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 feae 	bl	8006470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d10e      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d107      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9cb 	bl	8005ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b20      	cmp	r3, #32
 800574c:	d10e      	bne.n	800576c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b20      	cmp	r3, #32
 800575a:	d107      	bne.n	800576c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0220 	mvn.w	r2, #32
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fe78 	bl	800645c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800578e:	2302      	movs	r3, #2
 8005790:	e0ae      	b.n	80058f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	f200 809f 	bhi.w	80058e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057dd 	.word	0x080057dd
 80057ac:	080058e1 	.word	0x080058e1
 80057b0:	080058e1 	.word	0x080058e1
 80057b4:	080058e1 	.word	0x080058e1
 80057b8:	0800581d 	.word	0x0800581d
 80057bc:	080058e1 	.word	0x080058e1
 80057c0:	080058e1 	.word	0x080058e1
 80057c4:	080058e1 	.word	0x080058e1
 80057c8:	0800585f 	.word	0x0800585f
 80057cc:	080058e1 	.word	0x080058e1
 80057d0:	080058e1 	.word	0x080058e1
 80057d4:	080058e1 	.word	0x080058e1
 80057d8:	0800589f 	.word	0x0800589f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fafc 	bl	8005de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0204 	bic.w	r2, r2, #4
 8005806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6999      	ldr	r1, [r3, #24]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	619a      	str	r2, [r3, #24]
      break;
 800581a:	e064      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fb4c 	bl	8005ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	021a      	lsls	r2, r3, #8
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
      break;
 800585c:	e043      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fba1 	bl	8005fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0208 	orr.w	r2, r2, #8
 8005878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0204 	bic.w	r2, r2, #4
 8005888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	61da      	str	r2, [r3, #28]
      break;
 800589c:	e023      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fbf5 	bl	8006094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	021a      	lsls	r2, r3, #8
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	61da      	str	r2, [r3, #28]
      break;
 80058de:	e002      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	75fb      	strb	r3, [r7, #23]
      break;
 80058e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIM_ConfigClockSource+0x1c>
 8005910:	2302      	movs	r3, #2
 8005912:	e0b4      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x186>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800593a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800594c:	d03e      	beq.n	80059cc <HAL_TIM_ConfigClockSource+0xd4>
 800594e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005952:	f200 8087 	bhi.w	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595a:	f000 8086 	beq.w	8005a6a <HAL_TIM_ConfigClockSource+0x172>
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d87f      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b70      	cmp	r3, #112	; 0x70
 8005966:	d01a      	beq.n	800599e <HAL_TIM_ConfigClockSource+0xa6>
 8005968:	2b70      	cmp	r3, #112	; 0x70
 800596a:	d87b      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b60      	cmp	r3, #96	; 0x60
 800596e:	d050      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x11a>
 8005970:	2b60      	cmp	r3, #96	; 0x60
 8005972:	d877      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b50      	cmp	r3, #80	; 0x50
 8005976:	d03c      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005978:	2b50      	cmp	r3, #80	; 0x50
 800597a:	d873      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d058      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x13a>
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d86f      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b30      	cmp	r3, #48	; 0x30
 8005986:	d064      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x15a>
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d86b      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b20      	cmp	r3, #32
 800598e:	d060      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x15a>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d867      	bhi.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d05c      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x15a>
 8005998:	2b10      	cmp	r3, #16
 800599a:	d05a      	beq.n	8005a52 <HAL_TIM_ConfigClockSource+0x15a>
 800599c:	e062      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6899      	ldr	r1, [r3, #8]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f000 fc41 	bl	8006234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	609a      	str	r2, [r3, #8]
      break;
 80059ca:	e04f      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6899      	ldr	r1, [r3, #8]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f000 fc2a 	bl	8006234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ee:	609a      	str	r2, [r3, #8]
      break;
 80059f0:	e03c      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f000 fb9e 	bl	8006140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2150      	movs	r1, #80	; 0x50
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fbf7 	bl	80061fe <TIM_ITRx_SetConfig>
      break;
 8005a10:	e02c      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f000 fbbd 	bl	800619e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2160      	movs	r1, #96	; 0x60
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fbe7 	bl	80061fe <TIM_ITRx_SetConfig>
      break;
 8005a30:	e01c      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f000 fb7e 	bl	8006140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2140      	movs	r1, #64	; 0x40
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fbd7 	bl	80061fe <TIM_ITRx_SetConfig>
      break;
 8005a50:	e00c      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f000 fbce 	bl	80061fe <TIM_ITRx_SetConfig>
      break;
 8005a62:	e003      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
      break;
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d107      	bne.n	8005b26 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	e02a      	b.n	8005b7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d107      	bne.n	8005b40 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2202      	movs	r2, #2
 8005b34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b3e:	e01d      	b.n	8005b7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d107      	bne.n	8005b5a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b58:	e010      	b.n	8005b7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d107      	bne.n	8005b74 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2208      	movs	r2, #8
 8005b68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b72:	e003      	b.n	8005b7c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff ffb4 	bl	8005aea <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d10b      	bne.n	8005bc0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d136      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bbe:	e031      	b.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10b      	bne.n	8005be2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d125      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be0:	e020      	b.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d10b      	bne.n	8005c04 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d114      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c02:	e00f      	b.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d10a      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff ff42 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d103      	bne.n	8005c58 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	771a      	strb	r2, [r3, #28]
 8005c56:	e019      	b.n	8005c8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d103      	bne.n	8005c6a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2202      	movs	r2, #2
 8005c66:	771a      	strb	r2, [r3, #28]
 8005c68:	e010      	b.n	8005c8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d103      	bne.n	8005c7c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2204      	movs	r2, #4
 8005c78:	771a      	strb	r2, [r3, #28]
 8005c7a:	e007      	b.n	8005c8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d102      	bne.n	8005c8c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff ff18 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a40      	ldr	r2, [pc, #256]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3d      	ldr	r2, [pc, #244]	; (8005db8 <TIM_Base_SetConfig+0x118>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3c      	ldr	r2, [pc, #240]	; (8005dbc <TIM_Base_SetConfig+0x11c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3b      	ldr	r2, [pc, #236]	; (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3a      	ldr	r2, [pc, #232]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d108      	bne.n	8005cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d027      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	; (8005db8 <TIM_Base_SetConfig+0x118>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d023      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <TIM_Base_SetConfig+0x11c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d017      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_Base_SetConfig+0x128>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <TIM_Base_SetConfig+0x12c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <TIM_Base_SetConfig+0x130>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <TIM_Base_SetConfig+0x134>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <TIM_Base_SetConfig+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <TIM_Base_SetConfig+0x13c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_Base_SetConfig+0xf8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d103      	bne.n	8005da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	615a      	str	r2, [r3, #20]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40000c00 	.word	0x40000c00
 8005dc4:	40010400 	.word	0x40010400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800
 8005dd4:	40001800 	.word	0x40001800
 8005dd8:	40001c00 	.word	0x40001c00
 8005ddc:	40002000 	.word	0x40002000

08005de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 0302 	bic.w	r3, r3, #2
 8005e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a20      	ldr	r2, [pc, #128]	; (8005eb8 <TIM_OC1_SetConfig+0xd8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC1_SetConfig+0x64>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <TIM_OC1_SetConfig+0xdc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10c      	bne.n	8005e5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0308 	bic.w	r3, r3, #8
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <TIM_OC1_SetConfig+0xd8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC1_SetConfig+0x8e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <TIM_OC1_SetConfig+0xdc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40010400 	.word	0x40010400

08005ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0210 	bic.w	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f023 0320 	bic.w	r3, r3, #32
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <TIM_OC2_SetConfig+0xe4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC2_SetConfig+0x68>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <TIM_OC2_SetConfig+0xe8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d10d      	bne.n	8005f44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <TIM_OC2_SetConfig+0xe4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_OC2_SetConfig+0x94>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <TIM_OC2_SetConfig+0xe8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d113      	bne.n	8005f7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40010400 	.word	0x40010400

08005fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a21      	ldr	r2, [pc, #132]	; (800608c <TIM_OC3_SetConfig+0xe0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_OC3_SetConfig+0x66>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a20      	ldr	r2, [pc, #128]	; (8006090 <TIM_OC3_SetConfig+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10d      	bne.n	800602e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800602c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a16      	ldr	r2, [pc, #88]	; (800608c <TIM_OC3_SetConfig+0xe0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d003      	beq.n	800603e <TIM_OC3_SetConfig+0x92>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a15      	ldr	r2, [pc, #84]	; (8006090 <TIM_OC3_SetConfig+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d113      	bne.n	8006066 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800604c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	621a      	str	r2, [r3, #32]
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40010000 	.word	0x40010000
 8006090:	40010400 	.word	0x40010400

08006094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a12      	ldr	r2, [pc, #72]	; (8006138 <TIM_OC4_SetConfig+0xa4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC4_SetConfig+0x68>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a11      	ldr	r2, [pc, #68]	; (800613c <TIM_OC4_SetConfig+0xa8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d109      	bne.n	8006110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f023 0201 	bic.w	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 030a 	bic.w	r3, r3, #10
 800617c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619e:	b480      	push	{r7}
 80061a0:	b087      	sub	sp, #28
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f023 0210 	bic.w	r2, r3, #16
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	031b      	lsls	r3, r3, #12
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	f043 0307 	orr.w	r3, r3, #7
 8006220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	609a      	str	r2, [r3, #8]
}
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	021a      	lsls	r2, r3, #8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	431a      	orrs	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	609a      	str	r2, [r3, #8]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	2201      	movs	r2, #1
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e05a      	b.n	800638e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a21      	ldr	r2, [pc, #132]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006324:	d01d      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10c      	bne.n	800637c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4313      	orrs	r3, r2
 8006372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40010000 	.word	0x40010000
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40010400 	.word	0x40010400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40001800 	.word	0x40001800

080063b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e03d      	b.n	8006450 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e03f      	b.n	8006516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb f922 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fd71 	bl	8006fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b08a      	sub	sp, #40	; 0x28
 8006522:	af02      	add	r7, sp, #8
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b20      	cmp	r3, #32
 800653c:	d17c      	bne.n	8006638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_UART_Transmit+0x2c>
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e075      	b.n	800663a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_UART_Transmit+0x3e>
 8006558:	2302      	movs	r3, #2
 800655a:	e06e      	b.n	800663a <HAL_UART_Transmit+0x11c>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2221      	movs	r2, #33	; 0x21
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006572:	f7fb fae9 	bl	8001b48 <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d108      	bne.n	80065a0 <HAL_UART_Transmit+0x82>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e003      	b.n	80065a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065b0:	e02a      	b.n	8006608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2180      	movs	r1, #128	; 0x80
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 faef 	bl	8006ba0 <UART_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e036      	b.n	800663a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3302      	adds	r3, #2
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e007      	b.n	80065fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1cf      	bne.n	80065b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	2140      	movs	r1, #64	; 0x40
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fabf 	bl	8006ba0 <UART_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e006      	b.n	800663a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e000      	b.n	800663a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b0ba      	sub	sp, #232	; 0xe8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800666a:	2300      	movs	r3, #0
 800666c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10f      	bne.n	80066aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <HAL_UART_IRQHandler+0x66>
 8006696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fbc9 	bl	8006e3a <UART_Receive_IT>
      return;
 80066a8:	e256      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80de 	beq.w	8006870 <HAL_UART_IRQHandler+0x22c>
 80066b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80d1 	beq.w	8006870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <HAL_UART_IRQHandler+0xae>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f043 0201 	orr.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <HAL_UART_IRQHandler+0xd2>
 80066fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f043 0202 	orr.w	r2, r3, #2
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <HAL_UART_IRQHandler+0xf6>
 8006722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f043 0204 	orr.w	r2, r3, #4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <HAL_UART_IRQHandler+0x126>
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d105      	bne.n	800675e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f043 0208 	orr.w	r2, r3, #8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 81ed 	beq.w	8006b4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_UART_IRQHandler+0x14e>
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fb54 	bl	8006e3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <HAL_UART_IRQHandler+0x17a>
 80067b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d04f      	beq.n	800685e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa5c 	bl	8006c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d141      	bne.n	8006856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3314      	adds	r3, #20
 80067fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800680a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1d9      	bne.n	80067d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	2b00      	cmp	r3, #0
 8006824:	d013      	beq.n	800684e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	4a7d      	ldr	r2, [pc, #500]	; (8006a20 <HAL_UART_IRQHandler+0x3dc>)
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	4618      	mov	r0, r3
 8006834:	f7fc fe22 	bl	800347c <HAL_DMA_Abort_IT>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d016      	beq.n	800686c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	e00e      	b.n	800686c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f990 	bl	8006b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e00a      	b.n	800686c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f98c 	bl	8006b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	e006      	b.n	800686c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f988 	bl	8006b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800686a:	e170      	b.n	8006b4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	bf00      	nop
    return;
 800686e:	e16e      	b.n	8006b4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	2b01      	cmp	r3, #1
 8006876:	f040 814a 	bne.w	8006b0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8143 	beq.w	8006b0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 813c 	beq.w	8006b0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	f040 80b4 	bne.w	8006a24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8140 	beq.w	8006b52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068da:	429a      	cmp	r2, r3
 80068dc:	f080 8139 	bcs.w	8006b52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f2:	f000 8088 	beq.w	8006a06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800690c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800692e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800693a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1d9      	bne.n	80068f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3314      	adds	r3, #20
 8006948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3314      	adds	r3, #20
 8006962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800696a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800696e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e1      	bne.n	8006942 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3314      	adds	r3, #20
 8006984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800698e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e3      	bne.n	800697e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d6:	f023 0310 	bic.w	r3, r3, #16
 80069da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80069ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e3      	bne.n	80069c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fc fccb 	bl	800339c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f8b6 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a1c:	e099      	b.n	8006b52 <HAL_UART_IRQHandler+0x50e>
 8006a1e:	bf00      	nop
 8006a20:	08006d43 	.word	0x08006d43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 808b 	beq.w	8006b56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8086 	beq.w	8006b56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e3      	bne.n	8006a4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	623b      	str	r3, [r7, #32]
   return(result);
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3314      	adds	r3, #20
 8006aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e3      	bne.n	8006a82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0310 	bic.w	r3, r3, #16
 8006ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006aec:	61fa      	str	r2, [r7, #28]
 8006aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	69b9      	ldr	r1, [r7, #24]
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	617b      	str	r3, [r7, #20]
   return(result);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e3      	bne.n	8006ac8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f83e 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b0c:	e023      	b.n	8006b56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_UART_IRQHandler+0x4ea>
 8006b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f91f 	bl	8006d6a <UART_Transmit_IT>
    return;
 8006b2c:	e014      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <HAL_UART_IRQHandler+0x514>
 8006b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f95f 	bl	8006e0a <UART_EndTransmit_IT>
    return;
 8006b4c:	e004      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
    return;
 8006b4e:	bf00      	nop
 8006b50:	e002      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
      return;
 8006b52:	bf00      	nop
 8006b54:	e000      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
      return;
 8006b56:	bf00      	nop
  }
}
 8006b58:	37e8      	adds	r7, #232	; 0xe8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b090      	sub	sp, #64	; 0x40
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb0:	e050      	b.n	8006c54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d04c      	beq.n	8006c54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc0:	f7fa ffc2 	bl	8001b48 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d241      	bcs.n	8006c54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bf0:	637a      	str	r2, [r7, #52]	; 0x34
 8006bf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e5      	bne.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3314      	adds	r3, #20
 8006c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	613b      	str	r3, [r7, #16]
   return(result);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3314      	adds	r3, #20
 8006c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c24:	623a      	str	r2, [r7, #32]
 8006c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e00f      	b.n	8006c74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d09f      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3740      	adds	r7, #64	; 0x40
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b095      	sub	sp, #84	; 0x54
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ca4:	643a      	str	r2, [r7, #64]	; 0x40
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e5      	bne.n	8006c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3314      	adds	r3, #20
 8006cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d119      	bne.n	8006d28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f023 0310 	bic.w	r3, r3, #16
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d14:	61ba      	str	r2, [r7, #24]
 8006d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6979      	ldr	r1, [r7, #20]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	613b      	str	r3, [r7, #16]
   return(result);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d36:	bf00      	nop
 8006d38:	3754      	adds	r7, #84	; 0x54
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff ff09 	bl	8006b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b21      	cmp	r3, #33	; 0x21
 8006d7c:	d13e      	bne.n	8006dfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d86:	d114      	bne.n	8006db2 <UART_Transmit_IT+0x48>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d110      	bne.n	8006db2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	1c9a      	adds	r2, r3, #2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	621a      	str	r2, [r3, #32]
 8006db0:	e008      	b.n	8006dc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1c59      	adds	r1, r3, #1
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6211      	str	r1, [r2, #32]
 8006dbc:	781a      	ldrb	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10f      	bne.n	8006df8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7f9 fc48 	bl	80006c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b08c      	sub	sp, #48	; 0x30
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b22      	cmp	r3, #34	; 0x22
 8006e4c:	f040 80ab 	bne.w	8006fa6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	d117      	bne.n	8006e8a <UART_Receive_IT+0x50>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d113      	bne.n	8006e8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
 8006e88:	e026      	b.n	8006ed8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9c:	d007      	beq.n	8006eae <UART_Receive_IT+0x74>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <UART_Receive_IT+0x82>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	e008      	b.n	8006ece <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d15a      	bne.n	8006fa2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0220 	bic.w	r2, r2, #32
 8006efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695a      	ldr	r2, [r3, #20]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d135      	bne.n	8006f98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	613b      	str	r3, [r7, #16]
   return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f023 0310 	bic.w	r3, r3, #16
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f52:	623a      	str	r2, [r7, #32]
 8006f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	69f9      	ldr	r1, [r7, #28]
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e5      	bne.n	8006f32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d10a      	bne.n	8006f8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fdf9 	bl	8006b88 <HAL_UARTEx_RxEventCallback>
 8006f96:	e002      	b.n	8006f9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff fde1 	bl	8006b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e002      	b.n	8006fa8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e000      	b.n	8006fa8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fa6:	2302      	movs	r3, #2
  }
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb4:	b0c0      	sub	sp, #256	; 0x100
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	ea40 0301 	orr.w	r3, r0, r1
 8006fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007008:	f021 010c 	bic.w	r1, r1, #12
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007016:	430b      	orrs	r3, r1
 8007018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702a:	6999      	ldr	r1, [r3, #24]
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	ea40 0301 	orr.w	r3, r0, r1
 8007036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b8f      	ldr	r3, [pc, #572]	; (800727c <UART_SetConfig+0x2cc>)
 8007040:	429a      	cmp	r2, r3
 8007042:	d005      	beq.n	8007050 <UART_SetConfig+0xa0>
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b8d      	ldr	r3, [pc, #564]	; (8007280 <UART_SetConfig+0x2d0>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d104      	bne.n	800705a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fd ff60 	bl	8004f14 <HAL_RCC_GetPCLK2Freq>
 8007054:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007058:	e003      	b.n	8007062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800705a:	f7fd ff47 	bl	8004eec <HAL_RCC_GetPCLK1Freq>
 800705e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800706c:	f040 810c 	bne.w	8007288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007074:	2200      	movs	r2, #0
 8007076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800707a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800707e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	1891      	adds	r1, r2, r2
 8007088:	65b9      	str	r1, [r7, #88]	; 0x58
 800708a:	415b      	adcs	r3, r3
 800708c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800708e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007092:	4621      	mov	r1, r4
 8007094:	eb12 0801 	adds.w	r8, r2, r1
 8007098:	4629      	mov	r1, r5
 800709a:	eb43 0901 	adc.w	r9, r3, r1
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070b2:	4690      	mov	r8, r2
 80070b4:	4699      	mov	r9, r3
 80070b6:	4623      	mov	r3, r4
 80070b8:	eb18 0303 	adds.w	r3, r8, r3
 80070bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070c0:	462b      	mov	r3, r5
 80070c2:	eb49 0303 	adc.w	r3, r9, r3
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070de:	460b      	mov	r3, r1
 80070e0:	18db      	adds	r3, r3, r3
 80070e2:	653b      	str	r3, [r7, #80]	; 0x50
 80070e4:	4613      	mov	r3, r2
 80070e6:	eb42 0303 	adc.w	r3, r2, r3
 80070ea:	657b      	str	r3, [r7, #84]	; 0x54
 80070ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070f4:	f7f9 f8d4 	bl	80002a0 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4b61      	ldr	r3, [pc, #388]	; (8007284 <UART_SetConfig+0x2d4>)
 80070fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	011c      	lsls	r4, r3, #4
 8007106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800710a:	2200      	movs	r2, #0
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007110:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	1891      	adds	r1, r2, r2
 800711e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007120:	415b      	adcs	r3, r3
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007128:	4641      	mov	r1, r8
 800712a:	eb12 0a01 	adds.w	sl, r2, r1
 800712e:	4649      	mov	r1, r9
 8007130:	eb43 0b01 	adc.w	fp, r3, r1
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007148:	4692      	mov	sl, r2
 800714a:	469b      	mov	fp, r3
 800714c:	4643      	mov	r3, r8
 800714e:	eb1a 0303 	adds.w	r3, sl, r3
 8007152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007156:	464b      	mov	r3, r9
 8007158:	eb4b 0303 	adc.w	r3, fp, r3
 800715c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007174:	460b      	mov	r3, r1
 8007176:	18db      	adds	r3, r3, r3
 8007178:	643b      	str	r3, [r7, #64]	; 0x40
 800717a:	4613      	mov	r3, r2
 800717c:	eb42 0303 	adc.w	r3, r2, r3
 8007180:	647b      	str	r3, [r7, #68]	; 0x44
 8007182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800718a:	f7f9 f889 	bl	80002a0 <__aeabi_uldivmod>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4611      	mov	r1, r2
 8007194:	4b3b      	ldr	r3, [pc, #236]	; (8007284 <UART_SetConfig+0x2d4>)
 8007196:	fba3 2301 	umull	r2, r3, r3, r1
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2264      	movs	r2, #100	; 0x64
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	1acb      	subs	r3, r1, r3
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071aa:	4b36      	ldr	r3, [pc, #216]	; (8007284 <UART_SetConfig+0x2d4>)
 80071ac:	fba3 2302 	umull	r2, r3, r3, r2
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071b8:	441c      	add	r4, r3
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80071d4:	415b      	adcs	r3, r3
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071dc:	4641      	mov	r1, r8
 80071de:	1851      	adds	r1, r2, r1
 80071e0:	6339      	str	r1, [r7, #48]	; 0x30
 80071e2:	4649      	mov	r1, r9
 80071e4:	414b      	adcs	r3, r1
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071f4:	4659      	mov	r1, fp
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4651      	mov	r1, sl
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4651      	mov	r1, sl
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4642      	mov	r2, r8
 800720a:	189b      	adds	r3, r3, r2
 800720c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007210:	464b      	mov	r3, r9
 8007212:	460a      	mov	r2, r1
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007228:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800722c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007230:	460b      	mov	r3, r1
 8007232:	18db      	adds	r3, r3, r3
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
 8007236:	4613      	mov	r3, r2
 8007238:	eb42 0303 	adc.w	r3, r2, r3
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007246:	f7f9 f82b 	bl	80002a0 <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <UART_SetConfig+0x2d4>)
 8007250:	fba3 1302 	umull	r1, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	2164      	movs	r1, #100	; 0x64
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	3332      	adds	r3, #50	; 0x32
 8007262:	4a08      	ldr	r2, [pc, #32]	; (8007284 <UART_SetConfig+0x2d4>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 0207 	and.w	r2, r3, #7
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4422      	add	r2, r4
 8007276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007278:	e105      	b.n	8007486 <UART_SetConfig+0x4d6>
 800727a:	bf00      	nop
 800727c:	40011000 	.word	0x40011000
 8007280:	40011400 	.word	0x40011400
 8007284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728c:	2200      	movs	r2, #0
 800728e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007292:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800729a:	4642      	mov	r2, r8
 800729c:	464b      	mov	r3, r9
 800729e:	1891      	adds	r1, r2, r2
 80072a0:	6239      	str	r1, [r7, #32]
 80072a2:	415b      	adcs	r3, r3
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
 80072a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072aa:	4641      	mov	r1, r8
 80072ac:	1854      	adds	r4, r2, r1
 80072ae:	4649      	mov	r1, r9
 80072b0:	eb43 0501 	adc.w	r5, r3, r1
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	00eb      	lsls	r3, r5, #3
 80072be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072c2:	00e2      	lsls	r2, r4, #3
 80072c4:	4614      	mov	r4, r2
 80072c6:	461d      	mov	r5, r3
 80072c8:	4643      	mov	r3, r8
 80072ca:	18e3      	adds	r3, r4, r3
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072d0:	464b      	mov	r3, r9
 80072d2:	eb45 0303 	adc.w	r3, r5, r3
 80072d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072f6:	4629      	mov	r1, r5
 80072f8:	008b      	lsls	r3, r1, #2
 80072fa:	4621      	mov	r1, r4
 80072fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007300:	4621      	mov	r1, r4
 8007302:	008a      	lsls	r2, r1, #2
 8007304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007308:	f7f8 ffca 	bl	80002a0 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4b60      	ldr	r3, [pc, #384]	; (8007494 <UART_SetConfig+0x4e4>)
 8007312:	fba3 2302 	umull	r2, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	011c      	lsls	r4, r3, #4
 800731a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800731e:	2200      	movs	r2, #0
 8007320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007324:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	1891      	adds	r1, r2, r2
 8007332:	61b9      	str	r1, [r7, #24]
 8007334:	415b      	adcs	r3, r3
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800733c:	4641      	mov	r1, r8
 800733e:	1851      	adds	r1, r2, r1
 8007340:	6139      	str	r1, [r7, #16]
 8007342:	4649      	mov	r1, r9
 8007344:	414b      	adcs	r3, r1
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007354:	4659      	mov	r1, fp
 8007356:	00cb      	lsls	r3, r1, #3
 8007358:	4651      	mov	r1, sl
 800735a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735e:	4651      	mov	r1, sl
 8007360:	00ca      	lsls	r2, r1, #3
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	4603      	mov	r3, r0
 8007368:	4642      	mov	r2, r8
 800736a:	189b      	adds	r3, r3, r2
 800736c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007370:	464b      	mov	r3, r9
 8007372:	460a      	mov	r2, r1
 8007374:	eb42 0303 	adc.w	r3, r2, r3
 8007378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	67bb      	str	r3, [r7, #120]	; 0x78
 8007386:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007394:	4649      	mov	r1, r9
 8007396:	008b      	lsls	r3, r1, #2
 8007398:	4641      	mov	r1, r8
 800739a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800739e:	4641      	mov	r1, r8
 80073a0:	008a      	lsls	r2, r1, #2
 80073a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073a6:	f7f8 ff7b 	bl	80002a0 <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4b39      	ldr	r3, [pc, #228]	; (8007494 <UART_SetConfig+0x4e4>)
 80073b0:	fba3 1302 	umull	r1, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2164      	movs	r1, #100	; 0x64
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a34      	ldr	r2, [pc, #208]	; (8007494 <UART_SetConfig+0x4e4>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ce:	441c      	add	r4, r3
 80073d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d4:	2200      	movs	r2, #0
 80073d6:	673b      	str	r3, [r7, #112]	; 0x70
 80073d8:	677a      	str	r2, [r7, #116]	; 0x74
 80073da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073de:	4642      	mov	r2, r8
 80073e0:	464b      	mov	r3, r9
 80073e2:	1891      	adds	r1, r2, r2
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	415b      	adcs	r3, r3
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ee:	4641      	mov	r1, r8
 80073f0:	1851      	adds	r1, r2, r1
 80073f2:	6039      	str	r1, [r7, #0]
 80073f4:	4649      	mov	r1, r9
 80073f6:	414b      	adcs	r3, r1
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007406:	4659      	mov	r1, fp
 8007408:	00cb      	lsls	r3, r1, #3
 800740a:	4651      	mov	r1, sl
 800740c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007410:	4651      	mov	r1, sl
 8007412:	00ca      	lsls	r2, r1, #3
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	4603      	mov	r3, r0
 800741a:	4642      	mov	r2, r8
 800741c:	189b      	adds	r3, r3, r2
 800741e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007420:	464b      	mov	r3, r9
 8007422:	460a      	mov	r2, r1
 8007424:	eb42 0303 	adc.w	r3, r2, r3
 8007428:	66fb      	str	r3, [r7, #108]	; 0x6c
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	663b      	str	r3, [r7, #96]	; 0x60
 8007434:	667a      	str	r2, [r7, #100]	; 0x64
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007442:	4649      	mov	r1, r9
 8007444:	008b      	lsls	r3, r1, #2
 8007446:	4641      	mov	r1, r8
 8007448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800744c:	4641      	mov	r1, r8
 800744e:	008a      	lsls	r2, r1, #2
 8007450:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007454:	f7f8 ff24 	bl	80002a0 <__aeabi_uldivmod>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <UART_SetConfig+0x4e4>)
 800745e:	fba3 1302 	umull	r1, r3, r3, r2
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	2164      	movs	r1, #100	; 0x64
 8007466:	fb01 f303 	mul.w	r3, r1, r3
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	011b      	lsls	r3, r3, #4
 800746e:	3332      	adds	r3, #50	; 0x32
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <UART_SetConfig+0x4e4>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	095b      	lsrs	r3, r3, #5
 8007478:	f003 020f 	and.w	r2, r3, #15
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4422      	add	r2, r4
 8007484:	609a      	str	r2, [r3, #8]
}
 8007486:	bf00      	nop
 8007488:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800748c:	46bd      	mov	sp, r7
 800748e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007492:	bf00      	nop
 8007494:	51eb851f 	.word	0x51eb851f

08007498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007498:	b084      	sub	sp, #16
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	f107 001c 	add.w	r0, r7, #28
 80074a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d122      	bne.n	80074f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80074c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d105      	bne.n	80074ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 faa2 	bl	8007a34 <USB_CoreReset>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e01a      	b.n	800752c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa96 	bl	8007a34 <USB_CoreReset>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800750c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
 800751e:	e005      	b.n	800752c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10b      	bne.n	800754a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f043 0206 	orr.w	r2, r3, #6
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007556:	b004      	add	sp, #16
 8007558:	4770      	bx	lr

0800755a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f023 0201 	bic.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d115      	bne.n	80075ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075aa:	2001      	movs	r0, #1
 80075ac:	f7fa fad8 	bl	8001b60 <HAL_Delay>
      ms++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa2e 	bl	8007a18 <USB_GetMode>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d01e      	beq.n	8007600 <USB_SetCurrentMode+0x84>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b31      	cmp	r3, #49	; 0x31
 80075c6:	d9f0      	bls.n	80075aa <USB_SetCurrentMode+0x2e>
 80075c8:	e01a      	b.n	8007600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d115      	bne.n	80075fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075dc:	2001      	movs	r0, #1
 80075de:	f7fa fabf 	bl	8001b60 <HAL_Delay>
      ms++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa15 	bl	8007a18 <USB_GetMode>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <USB_SetCurrentMode+0x84>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b31      	cmp	r3, #49	; 0x31
 80075f8:	d9f0      	bls.n	80075dc <USB_SetCurrentMode+0x60>
 80075fa:	e001      	b.n	8007600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e005      	b.n	800760c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b32      	cmp	r3, #50	; 0x32
 8007604:	d101      	bne.n	800760a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007614:	b084      	sub	sp, #16
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800762e:	2300      	movs	r3, #0
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	e009      	b.n	8007648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	3340      	adds	r3, #64	; 0x40
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	2200      	movs	r2, #0
 8007640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3301      	adds	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b0e      	cmp	r3, #14
 800764c:	d9f2      	bls.n	8007634 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800764e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11c      	bne.n	800768e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007662:	f043 0302 	orr.w	r3, r3, #2
 8007666:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	639a      	str	r2, [r3, #56]	; 0x38
 800768c:	e00b      	b.n	80076a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076ac:	461a      	mov	r2, r3
 80076ae:	2300      	movs	r3, #0
 80076b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b8:	4619      	mov	r1, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c0:	461a      	mov	r2, r3
 80076c2:	680b      	ldr	r3, [r1, #0]
 80076c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d10c      	bne.n	80076e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d104      	bne.n	80076dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076d2:	2100      	movs	r1, #0
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f965 	bl	80079a4 <USB_SetDevSpeed>
 80076da:	e008      	b.n	80076ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076dc:	2101      	movs	r1, #1
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f960 	bl	80079a4 <USB_SetDevSpeed>
 80076e4:	e003      	b.n	80076ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076e6:	2103      	movs	r1, #3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f95b 	bl	80079a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076ee:	2110      	movs	r1, #16
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8f3 	bl	80078dc <USB_FlushTxFifo>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f91f 	bl	8007944 <USB_FlushRxFifo>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007716:	461a      	mov	r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007722:	461a      	mov	r2, r3
 8007724:	2300      	movs	r3, #0
 8007726:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	461a      	mov	r2, r3
 8007730:	2300      	movs	r3, #0
 8007732:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	e043      	b.n	80077c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800774c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007750:	d118      	bne.n	8007784 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007764:	461a      	mov	r2, r3
 8007766:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	e013      	b.n	8007796 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777a:	461a      	mov	r2, r3
 800777c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e008      	b.n	8007796 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	461a      	mov	r2, r3
 8007792:	2300      	movs	r3, #0
 8007794:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a2:	461a      	mov	r2, r3
 80077a4:	2300      	movs	r3, #0
 80077a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	461a      	mov	r2, r3
 80077b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	3301      	adds	r3, #1
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d3b7      	bcc.n	800773a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e043      	b.n	8007858 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e6:	d118      	bne.n	800781a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	461a      	mov	r2, r3
 80077fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e013      	b.n	800782c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	461a      	mov	r2, r3
 8007812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	e008      	b.n	800782c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	461a      	mov	r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	461a      	mov	r2, r3
 800784c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	3301      	adds	r3, #1
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	429a      	cmp	r2, r3
 800785e:	d3b7      	bcc.n	80077d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800786e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007872:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007880:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	f043 0210 	orr.w	r2, r3, #16
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699a      	ldr	r2, [r3, #24]
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <USB_DevInit+0x2c4>)
 800789a:	4313      	orrs	r3, r2
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f043 0208 	orr.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d107      	bne.n	80078c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078c0:	f043 0304 	orr.w	r3, r3, #4
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078d4:	b004      	add	sp, #16
 80078d6:	4770      	bx	lr
 80078d8:	803c3800 	.word	0x803c3800

080078dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a13      	ldr	r2, [pc, #76]	; (8007940 <USB_FlushTxFifo+0x64>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e01b      	b.n	8007934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	daf2      	bge.n	80078ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	019b      	lsls	r3, r3, #6
 800790c:	f043 0220 	orr.w	r2, r3, #32
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3301      	adds	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4a08      	ldr	r2, [pc, #32]	; (8007940 <USB_FlushTxFifo+0x64>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d901      	bls.n	8007926 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e006      	b.n	8007934 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b20      	cmp	r3, #32
 8007930:	d0f0      	beq.n	8007914 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	00030d40 	.word	0x00030d40

08007944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a11      	ldr	r2, [pc, #68]	; (80079a0 <USB_FlushRxFifo+0x5c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d901      	bls.n	8007962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e018      	b.n	8007994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	daf2      	bge.n	8007950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2210      	movs	r2, #16
 8007972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <USB_FlushRxFifo+0x5c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d901      	bls.n	8007986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e006      	b.n	8007994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	2b10      	cmp	r3, #16
 8007990:	d0f0      	beq.n	8007974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	00030d40 	.word	0x00030d40

080079a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079c4:	4313      	orrs	r3, r2
 80079c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079f0:	f023 0303 	bic.w	r3, r3, #3
 80079f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a04:	f043 0302 	orr.w	r3, r3, #2
 8007a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	f003 0301 	and.w	r3, r3, #1
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <USB_CoreReset+0x64>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d901      	bls.n	8007a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e01b      	b.n	8007a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	daf2      	bge.n	8007a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f043 0201 	orr.w	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4a09      	ldr	r2, [pc, #36]	; (8007a98 <USB_CoreReset+0x64>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d901      	bls.n	8007a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e006      	b.n	8007a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d0f0      	beq.n	8007a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	00030d40 	.word	0x00030d40

08007a9c <__NVIC_SetPriority>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	db0a      	blt.n	8007ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	490c      	ldr	r1, [pc, #48]	; (8007ae8 <__NVIC_SetPriority+0x4c>)
 8007ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aba:	0112      	lsls	r2, r2, #4
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	440b      	add	r3, r1
 8007ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ac4:	e00a      	b.n	8007adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	4908      	ldr	r1, [pc, #32]	; (8007aec <__NVIC_SetPriority+0x50>)
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	0112      	lsls	r2, r2, #4
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	440b      	add	r3, r1
 8007ada:	761a      	strb	r2, [r3, #24]
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	e000e100 	.word	0xe000e100
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007af4:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <SysTick_Handler+0x1c>)
 8007af6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007af8:	f001 fcfe 	bl	80094f8 <xTaskGetSchedulerState>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d001      	beq.n	8007b06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b02:	f002 fae9 	bl	800a0d8 <xPortSysTickHandler>
  }
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	e000e010 	.word	0xe000e010

08007b10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b14:	2100      	movs	r1, #0
 8007b16:	f06f 0004 	mvn.w	r0, #4
 8007b1a:	f7ff ffbf 	bl	8007a9c <__NVIC_SetPriority>
#endif
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b2a:	f3ef 8305 	mrs	r3, IPSR
 8007b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b36:	f06f 0305 	mvn.w	r3, #5
 8007b3a:	607b      	str	r3, [r7, #4]
 8007b3c:	e00c      	b.n	8007b58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <osKernelInitialize+0x44>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b46:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <osKernelInitialize+0x44>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	607b      	str	r3, [r7, #4]
 8007b50:	e002      	b.n	8007b58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b58:	687b      	ldr	r3, [r7, #4]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000c24 	.word	0x20000c24

08007b6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b72:	f3ef 8305 	mrs	r3, IPSR
 8007b76:	603b      	str	r3, [r7, #0]
  return(result);
 8007b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b7e:	f06f 0305 	mvn.w	r3, #5
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	e010      	b.n	8007ba8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <osKernelStart+0x48>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d109      	bne.n	8007ba2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b8e:	f7ff ffbf 	bl	8007b10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <osKernelStart+0x48>)
 8007b94:	2202      	movs	r2, #2
 8007b96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b98:	f001 f866 	bl	8008c68 <vTaskStartScheduler>
      stat = osOK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	e002      	b.n	8007ba8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ba8:	687b      	ldr	r3, [r7, #4]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000c24 	.word	0x20000c24

08007bb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08e      	sub	sp, #56	; 0x38
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc8:	f3ef 8305 	mrs	r3, IPSR
 8007bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d17e      	bne.n	8007cd2 <osThreadNew+0x11a>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d07b      	beq.n	8007cd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bda:	2380      	movs	r3, #128	; 0x80
 8007bdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007bde:	2318      	movs	r3, #24
 8007be0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d045      	beq.n	8007c7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <osThreadNew+0x48>
        name = attr->name;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <osThreadNew+0x6e>
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	2b38      	cmp	r3, #56	; 0x38
 8007c18:	d805      	bhi.n	8007c26 <osThreadNew+0x6e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <osThreadNew+0x72>
        return (NULL);
 8007c26:	2300      	movs	r3, #0
 8007c28:	e054      	b.n	8007cd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00e      	beq.n	8007c60 <osThreadNew+0xa8>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b5b      	cmp	r3, #91	; 0x5b
 8007c48:	d90a      	bls.n	8007c60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d006      	beq.n	8007c60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <osThreadNew+0xa8>
        mem = 1;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	e010      	b.n	8007c82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10c      	bne.n	8007c82 <osThreadNew+0xca>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d108      	bne.n	8007c82 <osThreadNew+0xca>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <osThreadNew+0xca>
          mem = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	e001      	b.n	8007c82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d110      	bne.n	8007caa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fe0c 	bl	80088bc <xTaskCreateStatic>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	e013      	b.n	8007cd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d110      	bne.n	8007cd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f107 0310 	add.w	r3, r7, #16
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fe57 	bl	8008976 <xTaskCreate>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d001      	beq.n	8007cd2 <osThreadNew+0x11a>
            hTask = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cd2:	693b      	ldr	r3, [r7, #16]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3728      	adds	r7, #40	; 0x28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce4:	f3ef 8305 	mrs	r3, IPSR
 8007ce8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <osDelay+0x1c>
    stat = osErrorISR;
 8007cf0:	f06f 0305 	mvn.w	r3, #5
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e007      	b.n	8007d08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 ff7c 	bl	8008c00 <vTaskDelay>
    }
  }

  return (stat);
 8007d08:	68fb      	ldr	r3, [r7, #12]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a07      	ldr	r2, [pc, #28]	; (8007d40 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4a06      	ldr	r2, [pc, #24]	; (8007d44 <vApplicationGetIdleTaskMemory+0x30>)
 8007d2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2280      	movs	r2, #128	; 0x80
 8007d30:	601a      	str	r2, [r3, #0]
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000c28 	.word	0x20000c28
 8007d44:	20000c84 	.word	0x20000c84

08007d48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4a07      	ldr	r2, [pc, #28]	; (8007d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4a06      	ldr	r2, [pc, #24]	; (8007d78 <vApplicationGetTimerTaskMemory+0x30>)
 8007d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d66:	601a      	str	r2, [r3, #0]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	20000e84 	.word	0x20000e84
 8007d78:	20000ee0 	.word	0x20000ee0

08007d7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f103 0208 	add.w	r2, r3, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f04f 32ff 	mov.w	r2, #4294967295
 8007d94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f103 0208 	add.w	r2, r3, #8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f103 0208 	add.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e34:	d103      	bne.n	8007e3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e00c      	b.n	8007e58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3308      	adds	r3, #8
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e002      	b.n	8007e4c <vListInsert+0x2e>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d2f6      	bcs.n	8007e46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	6892      	ldr	r2, [r2, #8]
 8007ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6852      	ldr	r2, [r2, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d103      	bne.n	8007ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	1e5a      	subs	r2, r3, #1
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f0a:	bf00      	nop
 8007f0c:	e7fe      	b.n	8007f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f0e:	f002 f851 	bl	8009fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f1e:	fb01 f303 	mul.w	r3, r1, r3
 8007f22:	441a      	add	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	441a      	add	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	22ff      	movs	r2, #255	; 0xff
 8007f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	22ff      	movs	r2, #255	; 0xff
 8007f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d114      	bne.n	8007f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01a      	beq.n	8007fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3310      	adds	r3, #16
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 f903 	bl	800917c <xTaskRemoveFromEventList>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <xQueueGenericReset+0xcc>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	e009      	b.n	8007fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3310      	adds	r3, #16
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fef2 	bl	8007d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3324      	adds	r3, #36	; 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff feed 	bl	8007d7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fa2:	f002 f837 	bl	800a014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fa6:	2301      	movs	r3, #1
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08e      	sub	sp, #56	; 0x38
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <xQueueGenericCreateStatic+0x52>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <xQueueGenericCreateStatic+0x56>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <xQueueGenericCreateStatic+0x58>
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	623b      	str	r3, [r7, #32]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <xQueueGenericCreateStatic+0x7e>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <xQueueGenericCreateStatic+0x82>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <xQueueGenericCreateStatic+0x84>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	61fb      	str	r3, [r7, #28]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008052:	2350      	movs	r3, #80	; 0x50
 8008054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b50      	cmp	r3, #80	; 0x50
 800805a:	d00a      	beq.n	8008072 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	61bb      	str	r3, [r7, #24]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008072:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00d      	beq.n	800809a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008086:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	4613      	mov	r3, r2
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 f805 	bl	80080a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800809c:	4618      	mov	r0, r3
 800809e:	3730      	adds	r7, #48	; 0x30
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e002      	b.n	80080c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080d2:	2101      	movs	r1, #1
 80080d4:	69b8      	ldr	r0, [r7, #24]
 80080d6:	f7ff ff05 	bl	8007ee4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080fa:	2300      	movs	r3, #0
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xQueueGenericSend+0x32>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d103      	bne.n	800812c <xQueueGenericSend+0x40>
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <xQueueGenericSend+0x44>
 800812c:	2301      	movs	r3, #1
 800812e:	e000      	b.n	8008132 <xQueueGenericSend+0x46>
 8008130:	2300      	movs	r3, #0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <xQueueGenericSend+0x60>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d103      	bne.n	800815a <xQueueGenericSend+0x6e>
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <xQueueGenericSend+0x72>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueGenericSend+0x74>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xQueueGenericSend+0x8e>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	623b      	str	r3, [r7, #32]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800817a:	f001 f9bd 	bl	80094f8 <xTaskGetSchedulerState>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <xQueueGenericSend+0x9e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <xQueueGenericSend+0xa2>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <xQueueGenericSend+0xa4>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xQueueGenericSend+0xbe>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	61fb      	str	r3, [r7, #28]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081aa:	f001 ff03 	bl	8009fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d302      	bcc.n	80081c0 <xQueueGenericSend+0xd4>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d129      	bne.n	8008214 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c6:	f000 fa0b 	bl	80085e0 <prvCopyDataToQueue>
 80081ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	3324      	adds	r3, #36	; 0x24
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 ffcf 	bl	800917c <xTaskRemoveFromEventList>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d013      	beq.n	800820c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081e4:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <xQueueGenericSend+0x1f8>)
 80081e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ea:	601a      	str	r2, [r3, #0]
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	e00a      	b.n	800820c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081fc:	4b39      	ldr	r3, [pc, #228]	; (80082e4 <xQueueGenericSend+0x1f8>)
 80081fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800820c:	f001 ff02 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 8008210:	2301      	movs	r3, #1
 8008212:	e063      	b.n	80082dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800821a:	f001 fefb 	bl	800a014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800821e:	2300      	movs	r3, #0
 8008220:	e05c      	b.n	80082dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	4618      	mov	r0, r3
 800822e:	f001 f809 	bl	8009244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008232:	2301      	movs	r3, #1
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008236:	f001 feed 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800823a:	f000 fd7b 	bl	8008d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800823e:	f001 feb9 	bl	8009fb4 <vPortEnterCritical>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008248:	b25b      	sxtb	r3, r3
 800824a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824e:	d103      	bne.n	8008258 <xQueueGenericSend+0x16c>
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800825e:	b25b      	sxtb	r3, r3
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d103      	bne.n	800826e <xQueueGenericSend+0x182>
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800826e:	f001 fed1 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008272:	1d3a      	adds	r2, r7, #4
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	4611      	mov	r1, r2
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fff8 	bl	8009270 <xTaskCheckForTimeOut>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d124      	bne.n	80082d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008288:	f000 faa2 	bl	80087d0 <prvIsQueueFull>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d018      	beq.n	80082c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	3310      	adds	r3, #16
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f000 ff1e 	bl	80090dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a2:	f000 fa2d 	bl	8008700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082a6:	f000 fd53 	bl	8008d50 <xTaskResumeAll>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f47f af7c 	bne.w	80081aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <xQueueGenericSend+0x1f8>)
 80082b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	e772      	b.n	80081aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c6:	f000 fa1b 	bl	8008700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ca:	f000 fd41 	bl	8008d50 <xTaskResumeAll>
 80082ce:	e76c      	b.n	80081aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082d2:	f000 fa15 	bl	8008700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d6:	f000 fd3b 	bl	8008d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3738      	adds	r7, #56	; 0x38
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b090      	sub	sp, #64	; 0x40
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <xQueueGenericSendFromISR+0x3c>
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <xQueueGenericSendFromISR+0x40>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <xQueueGenericSendFromISR+0x42>
 8008328:	2300      	movs	r3, #0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d103      	bne.n	8008352 <xQueueGenericSendFromISR+0x6a>
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <xQueueGenericSendFromISR+0x6e>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <xQueueGenericSendFromISR+0x70>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	623b      	str	r3, [r7, #32]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008372:	f001 ff01 	bl	800a178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008376:	f3ef 8211 	mrs	r2, BASEPRI
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61fa      	str	r2, [r7, #28]
 800838c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800838e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <xQueueGenericSendFromISR+0xbc>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d12f      	bne.n	8008404 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083ba:	f000 f911 	bl	80085e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d112      	bne.n	80083ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d016      	beq.n	80083fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	3324      	adds	r3, #36	; 0x24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fed1 	bl	800917c <xTaskRemoveFromEventList>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e007      	b.n	80083fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083f2:	3301      	adds	r3, #1
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	b25a      	sxtb	r2, r3
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083fe:	2301      	movs	r3, #1
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008402:	e001      	b.n	8008408 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008412:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008416:	4618      	mov	r0, r3
 8008418:	3740      	adds	r7, #64	; 0x40
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08c      	sub	sp, #48	; 0x30
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800842c:	2300      	movs	r3, #0
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <xQueueReceive+0x30>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	623b      	str	r3, [r7, #32]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <xQueueReceive+0x3e>
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <xQueueReceive+0x42>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <xQueueReceive+0x44>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueReceive+0x5e>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	61fb      	str	r3, [r7, #28]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800847e:	f001 f83b 	bl	80094f8 <xTaskGetSchedulerState>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <xQueueReceive+0x6e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <xQueueReceive+0x72>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <xQueueReceive+0x74>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueReceive+0x8e>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61bb      	str	r3, [r7, #24]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ae:	f001 fd81 	bl	8009fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01f      	beq.n	80084fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c2:	f000 f8f7 	bl	80086b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	1e5a      	subs	r2, r3, #1
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00f      	beq.n	80084f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	3310      	adds	r3, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fe4e 	bl	800917c <xTaskRemoveFromEventList>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084e6:	4b3d      	ldr	r3, [pc, #244]	; (80085dc <xQueueReceive+0x1bc>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084f6:	f001 fd8d 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e069      	b.n	80085d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008504:	f001 fd86 	bl	800a014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008508:	2300      	movs	r3, #0
 800850a:	e062      	b.n	80085d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fe94 	bl	8009244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008520:	f001 fd78 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008524:	f000 fc06 	bl	8008d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008528:	f001 fd44 	bl	8009fb4 <vPortEnterCritical>
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008532:	b25b      	sxtb	r3, r3
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <xQueueReceive+0x122>
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008548:	b25b      	sxtb	r3, r3
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d103      	bne.n	8008558 <xQueueReceive+0x138>
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008558:	f001 fd5c 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855c:	1d3a      	adds	r2, r7, #4
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fe83 	bl	8009270 <xTaskCheckForTimeOut>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d123      	bne.n	80085b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008572:	f000 f917 	bl	80087a4 <prvIsQueueEmpty>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d017      	beq.n	80085ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fda9 	bl	80090dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800858a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858c:	f000 f8b8 	bl	8008700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008590:	f000 fbde 	bl	8008d50 <xTaskResumeAll>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d189      	bne.n	80084ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <xQueueReceive+0x1bc>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	e780      	b.n	80084ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ae:	f000 f8a7 	bl	8008700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b2:	f000 fbcd 	bl	8008d50 <xTaskResumeAll>
 80085b6:	e77a      	b.n	80084ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f000 f8a1 	bl	8008700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085be:	f000 fbc7 	bl	8008d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c4:	f000 f8ee 	bl	80087a4 <prvIsQueueEmpty>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f43f af6f 	beq.w	80084ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3730      	adds	r7, #48	; 0x30
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10d      	bne.n	800861a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d14d      	bne.n	80086a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 ff92 	bl	8009534 <xTaskPriorityDisinherit>
 8008610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	e043      	b.n	80086a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d119      	bne.n	8008654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6858      	ldr	r0, [r3, #4]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	461a      	mov	r2, r3
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	f001 fff8 	bl	800a620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008638:	441a      	add	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	d32b      	bcc.n	80086a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]
 8008652:	e026      	b.n	80086a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68d8      	ldr	r0, [r3, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	461a      	mov	r2, r3
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	f001 ffde 	bl	800a620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	425b      	negs	r3, r3
 800866e:	441a      	add	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d207      	bcs.n	8008690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	425b      	negs	r3, r3
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d105      	bne.n	80086a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	3b01      	subs	r3, #1
 80086a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086aa:	697b      	ldr	r3, [r7, #20]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d018      	beq.n	80086f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	441a      	add	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d303      	bcc.n	80086e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68d9      	ldr	r1, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	461a      	mov	r2, r3
 80086f2:	6838      	ldr	r0, [r7, #0]
 80086f4:	f001 ff94 	bl	800a620 <memcpy>
	}
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008708:	f001 fc54 	bl	8009fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008714:	e011      	b.n	800873a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	2b00      	cmp	r3, #0
 800871c:	d012      	beq.n	8008744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3324      	adds	r3, #36	; 0x24
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fd2a 	bl	800917c <xTaskRemoveFromEventList>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800872e:	f000 fe01 	bl	8009334 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	3b01      	subs	r3, #1
 8008736:	b2db      	uxtb	r3, r3
 8008738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800873a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800873e:	2b00      	cmp	r3, #0
 8008740:	dce9      	bgt.n	8008716 <prvUnlockQueue+0x16>
 8008742:	e000      	b.n	8008746 <prvUnlockQueue+0x46>
					break;
 8008744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	22ff      	movs	r2, #255	; 0xff
 800874a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800874e:	f001 fc61 	bl	800a014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008752:	f001 fc2f 	bl	8009fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800875e:	e011      	b.n	8008784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d012      	beq.n	800878e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3310      	adds	r3, #16
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fd05 	bl	800917c <xTaskRemoveFromEventList>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008778:	f000 fddc 	bl	8009334 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	3b01      	subs	r3, #1
 8008780:	b2db      	uxtb	r3, r3
 8008782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dce9      	bgt.n	8008760 <prvUnlockQueue+0x60>
 800878c:	e000      	b.n	8008790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800878e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	22ff      	movs	r2, #255	; 0xff
 8008794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008798:	f001 fc3c 	bl	800a014 <vPortExitCritical>
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087ac:	f001 fc02 	bl	8009fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e001      	b.n	80087c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087c2:	f001 fc27 	bl	800a014 <vPortExitCritical>

	return xReturn;
 80087c6:	68fb      	ldr	r3, [r7, #12]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087d8:	f001 fbec 	bl	8009fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d102      	bne.n	80087ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087e8:	2301      	movs	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e001      	b.n	80087f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087f2:	f001 fc0f 	bl	800a014 <vPortExitCritical>

	return xReturn;
 80087f6:	68fb      	ldr	r3, [r7, #12]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	e014      	b.n	800883a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008810:	4a0f      	ldr	r2, [pc, #60]	; (8008850 <vQueueAddToRegistry+0x50>)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10b      	bne.n	8008834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800881c:	490c      	ldr	r1, [pc, #48]	; (8008850 <vQueueAddToRegistry+0x50>)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008826:	4a0a      	ldr	r2, [pc, #40]	; (8008850 <vQueueAddToRegistry+0x50>)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	4413      	add	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008832:	e006      	b.n	8008842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b07      	cmp	r3, #7
 800883e:	d9e7      	bls.n	8008810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	200012e0 	.word	0x200012e0

08008854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008864:	f001 fba6 	bl	8009fb4 <vPortEnterCritical>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d103      	bne.n	800887e <vQueueWaitForMessageRestricted+0x2a>
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008884:	b25b      	sxtb	r3, r3
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d103      	bne.n	8008894 <vQueueWaitForMessageRestricted+0x40>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008894:	f001 fbbe 	bl	800a014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	2b00      	cmp	r3, #0
 800889e:	d106      	bne.n	80088ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3324      	adds	r3, #36	; 0x24
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fc3b 	bl	8009124 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088ae:	6978      	ldr	r0, [r7, #20]
 80088b0:	f7ff ff26 	bl	8008700 <prvUnlockQueue>
	}
 80088b4:	bf00      	nop
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08e      	sub	sp, #56	; 0x38
 80088c0:	af04      	add	r7, sp, #16
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
 80088c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	623b      	str	r3, [r7, #32]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <xTaskCreateStatic+0x46>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	61fb      	str	r3, [r7, #28]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008902:	235c      	movs	r3, #92	; 0x5c
 8008904:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b5c      	cmp	r3, #92	; 0x5c
 800890a:	d00a      	beq.n	8008922 <xTaskCreateStatic+0x66>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	61bb      	str	r3, [r7, #24]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008922:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01e      	beq.n	8008968 <xTaskCreateStatic+0xac>
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01b      	beq.n	8008968 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008938:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	2202      	movs	r2, #2
 800893e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008942:	2300      	movs	r3, #0
 8008944:	9303      	str	r3, [sp, #12]
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	f107 0314 	add.w	r3, r7, #20
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f850 	bl	8008a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008962:	f000 f8dd 	bl	8008b20 <prvAddNewTaskToReadyList>
 8008966:	e001      	b.n	800896c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800896c:	697b      	ldr	r3, [r7, #20]
	}
 800896e:	4618      	mov	r0, r3
 8008970:	3728      	adds	r7, #40	; 0x28
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008976:	b580      	push	{r7, lr}
 8008978:	b08c      	sub	sp, #48	; 0x30
 800897a:	af04      	add	r7, sp, #16
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fc34 	bl	800a1f8 <pvPortMalloc>
 8008990:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00e      	beq.n	80089b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008998:	205c      	movs	r0, #92	; 0x5c
 800899a:	f001 fc2d 	bl	800a1f8 <pvPortMalloc>
 800899e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
 80089ac:	e005      	b.n	80089ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089ae:	6978      	ldr	r0, [r7, #20]
 80089b0:	f001 fcee 	bl	800a390 <vPortFree>
 80089b4:	e001      	b.n	80089ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9303      	str	r3, [sp, #12]
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 f80e 	bl	8008a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089e4:	69f8      	ldr	r0, [r7, #28]
 80089e6:	f000 f89b 	bl	8008b20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089ea:	2301      	movs	r3, #1
 80089ec:	61bb      	str	r3, [r7, #24]
 80089ee:	e002      	b.n	80089f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295
 80089f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089f6:	69bb      	ldr	r3, [r7, #24]
	}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	461a      	mov	r2, r3
 8008a18:	21a5      	movs	r1, #165	; 0xa5
 8008a1a:	f001 fe0f 	bl	800a63c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f023 0307 	bic.w	r3, r3, #7
 8008a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	617b      	str	r3, [r7, #20]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01f      	beq.n	8008a9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
 8008a62:	e012      	b.n	8008a8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	7819      	ldrb	r1, [r3, #0]
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	4413      	add	r3, r2
 8008a72:	3334      	adds	r3, #52	; 0x34
 8008a74:	460a      	mov	r2, r1
 8008a76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	3301      	adds	r3, #1
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b0f      	cmp	r3, #15
 8008a8e:	d9e9      	bls.n	8008a64 <prvInitialiseNewTask+0x64>
 8008a90:	e000      	b.n	8008a94 <prvInitialiseNewTask+0x94>
			{
				break;
 8008a92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a9c:	e003      	b.n	8008aa6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	2b37      	cmp	r3, #55	; 0x37
 8008aaa:	d901      	bls.n	8008ab0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008aac:	2337      	movs	r3, #55	; 0x37
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	2200      	movs	r2, #0
 8008ac0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff f978 	bl	8007dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	3318      	adds	r3, #24
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff f973 	bl	8007dbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2200      	movs	r2, #0
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	68f9      	ldr	r1, [r7, #12]
 8008afe:	69b8      	ldr	r0, [r7, #24]
 8008b00:	f001 f928 	bl	8009d54 <pxPortInitialiseStack>
 8008b04:	4602      	mov	r2, r0
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b16:	bf00      	nop
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b28:	f001 fa44 	bl	8009fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b2c:	4b2d      	ldr	r3, [pc, #180]	; (8008be4 <prvAddNewTaskToReadyList+0xc4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a2c      	ldr	r2, [pc, #176]	; (8008be4 <prvAddNewTaskToReadyList+0xc4>)
 8008b34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b36:	4b2c      	ldr	r3, [pc, #176]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b3e:	4a2a      	ldr	r2, [pc, #168]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b44:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <prvAddNewTaskToReadyList+0xc4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d110      	bne.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b4c:	f000 fc16 	bl	800937c <prvInitialiseTaskLists>
 8008b50:	e00d      	b.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b52:	4b26      	ldr	r3, [pc, #152]	; (8008bec <prvAddNewTaskToReadyList+0xcc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b5a:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d802      	bhi.n	8008b6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b68:	4a1f      	ldr	r2, [pc, #124]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b6e:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <prvAddNewTaskToReadyList+0xd0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3301      	adds	r3, #1
 8008b74:	4a1e      	ldr	r2, [pc, #120]	; (8008bf0 <prvAddNewTaskToReadyList+0xd0>)
 8008b76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b78:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <prvAddNewTaskToReadyList+0xd0>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <prvAddNewTaskToReadyList+0xd4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d903      	bls.n	8008b94 <prvAddNewTaskToReadyList+0x74>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	4a18      	ldr	r2, [pc, #96]	; (8008bf4 <prvAddNewTaskToReadyList+0xd4>)
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4a15      	ldr	r2, [pc, #84]	; (8008bf8 <prvAddNewTaskToReadyList+0xd8>)
 8008ba2:	441a      	add	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7ff f913 	bl	8007dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bb0:	f001 fa30 	bl	800a014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bb4:	4b0d      	ldr	r3, [pc, #52]	; (8008bec <prvAddNewTaskToReadyList+0xcc>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00e      	beq.n	8008bda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <prvAddNewTaskToReadyList+0xc8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d207      	bcs.n	8008bda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <prvAddNewTaskToReadyList+0xdc>)
 8008bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200017f4 	.word	0x200017f4
 8008be8:	20001320 	.word	0x20001320
 8008bec:	20001800 	.word	0x20001800
 8008bf0:	20001810 	.word	0x20001810
 8008bf4:	200017fc 	.word	0x200017fc
 8008bf8:	20001324 	.word	0x20001324
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d017      	beq.n	8008c42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c12:	4b13      	ldr	r3, [pc, #76]	; (8008c60 <vTaskDelay+0x60>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <vTaskDelay+0x30>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	60bb      	str	r3, [r7, #8]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c30:	f000 f880 	bl	8008d34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c34:	2100      	movs	r1, #0
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fcea 	bl	8009610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c3c:	f000 f888 	bl	8008d50 <xTaskResumeAll>
 8008c40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c48:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <vTaskDelay+0x64>)
 8008c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	2000181c 	.word	0x2000181c
 8008c64:	e000ed04 	.word	0xe000ed04

08008c68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c76:	463a      	mov	r2, r7
 8008c78:	1d39      	adds	r1, r7, #4
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff f848 	bl	8007d14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	9202      	str	r2, [sp, #8]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	460a      	mov	r2, r1
 8008c96:	4921      	ldr	r1, [pc, #132]	; (8008d1c <vTaskStartScheduler+0xb4>)
 8008c98:	4821      	ldr	r0, [pc, #132]	; (8008d20 <vTaskStartScheduler+0xb8>)
 8008c9a:	f7ff fe0f 	bl	80088bc <xTaskCreateStatic>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	4a20      	ldr	r2, [pc, #128]	; (8008d24 <vTaskStartScheduler+0xbc>)
 8008ca2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ca4:	4b1f      	ldr	r3, [pc, #124]	; (8008d24 <vTaskStartScheduler+0xbc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	e001      	b.n	8008cb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d102      	bne.n	8008cc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cbc:	f000 fcfc 	bl	80096b8 <xTimerCreateTimerTask>
 8008cc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d116      	bne.n	8008cf6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	613b      	str	r3, [r7, #16]
}
 8008cda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cdc:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <vTaskStartScheduler+0xc0>)
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ce4:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <vTaskStartScheduler+0xc4>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <vTaskStartScheduler+0xc8>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cf0:	f001 f8be 	bl	8009e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cf4:	e00e      	b.n	8008d14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfc:	d10a      	bne.n	8008d14 <vTaskStartScheduler+0xac>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	60fb      	str	r3, [r7, #12]
}
 8008d10:	bf00      	nop
 8008d12:	e7fe      	b.n	8008d12 <vTaskStartScheduler+0xaa>
}
 8008d14:	bf00      	nop
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	0800af68 	.word	0x0800af68
 8008d20:	0800934d 	.word	0x0800934d
 8008d24:	20001818 	.word	0x20001818
 8008d28:	20001814 	.word	0x20001814
 8008d2c:	20001800 	.word	0x20001800
 8008d30:	200017f8 	.word	0x200017f8

08008d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <vTaskSuspendAll+0x18>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	4a03      	ldr	r2, [pc, #12]	; (8008d4c <vTaskSuspendAll+0x18>)
 8008d40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d42:	bf00      	nop
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	2000181c 	.word	0x2000181c

08008d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d5e:	4b42      	ldr	r3, [pc, #264]	; (8008e68 <xTaskResumeAll+0x118>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10a      	bne.n	8008d7c <xTaskResumeAll+0x2c>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	603b      	str	r3, [r7, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	e7fe      	b.n	8008d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d7c:	f001 f91a 	bl	8009fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d80:	4b39      	ldr	r3, [pc, #228]	; (8008e68 <xTaskResumeAll+0x118>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	4a38      	ldr	r2, [pc, #224]	; (8008e68 <xTaskResumeAll+0x118>)
 8008d88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d8a:	4b37      	ldr	r3, [pc, #220]	; (8008e68 <xTaskResumeAll+0x118>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d162      	bne.n	8008e58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d92:	4b36      	ldr	r3, [pc, #216]	; (8008e6c <xTaskResumeAll+0x11c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d05e      	beq.n	8008e58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d9a:	e02f      	b.n	8008dfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9c:	4b34      	ldr	r3, [pc, #208]	; (8008e70 <xTaskResumeAll+0x120>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3318      	adds	r3, #24
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff f871 	bl	8007e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff f86c 	bl	8007e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4b2d      	ldr	r3, [pc, #180]	; (8008e74 <xTaskResumeAll+0x124>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d903      	bls.n	8008dcc <xTaskResumeAll+0x7c>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	4a2a      	ldr	r2, [pc, #168]	; (8008e74 <xTaskResumeAll+0x124>)
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4a27      	ldr	r2, [pc, #156]	; (8008e78 <xTaskResumeAll+0x128>)
 8008dda:	441a      	add	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4619      	mov	r1, r3
 8008de2:	4610      	mov	r0, r2
 8008de4:	f7fe fff7 	bl	8007dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dec:	4b23      	ldr	r3, [pc, #140]	; (8008e7c <xTaskResumeAll+0x12c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d302      	bcc.n	8008dfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008df6:	4b22      	ldr	r3, [pc, #136]	; (8008e80 <xTaskResumeAll+0x130>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dfc:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <xTaskResumeAll+0x120>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1cb      	bne.n	8008d9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e0a:	f000 fb55 	bl	80094b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e0e:	4b1d      	ldr	r3, [pc, #116]	; (8008e84 <xTaskResumeAll+0x134>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d010      	beq.n	8008e3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e1a:	f000 f847 	bl	8008eac <xTaskIncrementTick>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e24:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <xTaskResumeAll+0x130>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1f1      	bne.n	8008e1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e36:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <xTaskResumeAll+0x134>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e3c:	4b10      	ldr	r3, [pc, #64]	; (8008e80 <xTaskResumeAll+0x130>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e44:	2301      	movs	r3, #1
 8008e46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <xTaskResumeAll+0x138>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e58:	f001 f8dc 	bl	800a014 <vPortExitCritical>

	return xAlreadyYielded;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	2000181c 	.word	0x2000181c
 8008e6c:	200017f4 	.word	0x200017f4
 8008e70:	200017b4 	.word	0x200017b4
 8008e74:	200017fc 	.word	0x200017fc
 8008e78:	20001324 	.word	0x20001324
 8008e7c:	20001320 	.word	0x20001320
 8008e80:	20001808 	.word	0x20001808
 8008e84:	20001804 	.word	0x20001804
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e92:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <xTaskGetTickCount+0x1c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e98:	687b      	ldr	r3, [r7, #4]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	200017f8 	.word	0x200017f8

08008eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb6:	4b4f      	ldr	r3, [pc, #316]	; (8008ff4 <xTaskIncrementTick+0x148>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 808f 	bne.w	8008fde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ec0:	4b4d      	ldr	r3, [pc, #308]	; (8008ff8 <xTaskIncrementTick+0x14c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ec8:	4a4b      	ldr	r2, [pc, #300]	; (8008ff8 <xTaskIncrementTick+0x14c>)
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d120      	bne.n	8008f16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ed4:	4b49      	ldr	r3, [pc, #292]	; (8008ffc <xTaskIncrementTick+0x150>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	603b      	str	r3, [r7, #0]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <xTaskIncrementTick+0x46>
 8008ef4:	4b41      	ldr	r3, [pc, #260]	; (8008ffc <xTaskIncrementTick+0x150>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	4b41      	ldr	r3, [pc, #260]	; (8009000 <xTaskIncrementTick+0x154>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a3f      	ldr	r2, [pc, #252]	; (8008ffc <xTaskIncrementTick+0x150>)
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	4a3f      	ldr	r2, [pc, #252]	; (8009000 <xTaskIncrementTick+0x154>)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	4b3e      	ldr	r3, [pc, #248]	; (8009004 <xTaskIncrementTick+0x158>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	4a3d      	ldr	r2, [pc, #244]	; (8009004 <xTaskIncrementTick+0x158>)
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	f000 fad1 	bl	80094b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f16:	4b3c      	ldr	r3, [pc, #240]	; (8009008 <xTaskIncrementTick+0x15c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d349      	bcc.n	8008fb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f20:	4b36      	ldr	r3, [pc, #216]	; (8008ffc <xTaskIncrementTick+0x150>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2a:	4b37      	ldr	r3, [pc, #220]	; (8009008 <xTaskIncrementTick+0x15c>)
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	601a      	str	r2, [r3, #0]
					break;
 8008f32:	e03f      	b.n	8008fb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f34:	4b31      	ldr	r3, [pc, #196]	; (8008ffc <xTaskIncrementTick+0x150>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d203      	bcs.n	8008f54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f4c:	4a2e      	ldr	r2, [pc, #184]	; (8009008 <xTaskIncrementTick+0x15c>)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f52:	e02f      	b.n	8008fb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe ff99 	bl	8007e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	3318      	adds	r3, #24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe ff90 	bl	8007e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f74:	4b25      	ldr	r3, [pc, #148]	; (800900c <xTaskIncrementTick+0x160>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d903      	bls.n	8008f84 <xTaskIncrementTick+0xd8>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	4a22      	ldr	r2, [pc, #136]	; (800900c <xTaskIncrementTick+0x160>)
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <xTaskIncrementTick+0x164>)
 8008f92:	441a      	add	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f7fe ff1b 	bl	8007dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <xTaskIncrementTick+0x168>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d3b8      	bcc.n	8008f20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb2:	e7b5      	b.n	8008f20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fb4:	4b17      	ldr	r3, [pc, #92]	; (8009014 <xTaskIncrementTick+0x168>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fba:	4915      	ldr	r1, [pc, #84]	; (8009010 <xTaskIncrementTick+0x164>)
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d901      	bls.n	8008fd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fd0:	4b11      	ldr	r3, [pc, #68]	; (8009018 <xTaskIncrementTick+0x16c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	e004      	b.n	8008fe8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008fde:	4b0f      	ldr	r3, [pc, #60]	; (800901c <xTaskIncrementTick+0x170>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	4a0d      	ldr	r2, [pc, #52]	; (800901c <xTaskIncrementTick+0x170>)
 8008fe6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fe8:	697b      	ldr	r3, [r7, #20]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	2000181c 	.word	0x2000181c
 8008ff8:	200017f8 	.word	0x200017f8
 8008ffc:	200017ac 	.word	0x200017ac
 8009000:	200017b0 	.word	0x200017b0
 8009004:	2000180c 	.word	0x2000180c
 8009008:	20001814 	.word	0x20001814
 800900c:	200017fc 	.word	0x200017fc
 8009010:	20001324 	.word	0x20001324
 8009014:	20001320 	.word	0x20001320
 8009018:	20001808 	.word	0x20001808
 800901c:	20001804 	.word	0x20001804

08009020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009026:	4b28      	ldr	r3, [pc, #160]	; (80090c8 <vTaskSwitchContext+0xa8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800902e:	4b27      	ldr	r3, [pc, #156]	; (80090cc <vTaskSwitchContext+0xac>)
 8009030:	2201      	movs	r2, #1
 8009032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009034:	e041      	b.n	80090ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009036:	4b25      	ldr	r3, [pc, #148]	; (80090cc <vTaskSwitchContext+0xac>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <vTaskSwitchContext+0xb0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	e010      	b.n	8009066 <vTaskSwitchContext+0x46>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <vTaskSwitchContext+0x40>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vTaskSwitchContext+0x3e>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3b01      	subs	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	491b      	ldr	r1, [pc, #108]	; (80090d4 <vTaskSwitchContext+0xb4>)
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0e4      	beq.n	8009044 <vTaskSwitchContext+0x24>
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4a13      	ldr	r2, [pc, #76]	; (80090d4 <vTaskSwitchContext+0xb4>)
 8009086:	4413      	add	r3, r2
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	605a      	str	r2, [r3, #4]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	3308      	adds	r3, #8
 800909c:	429a      	cmp	r2, r3
 800909e:	d104      	bne.n	80090aa <vTaskSwitchContext+0x8a>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	605a      	str	r2, [r3, #4]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	4a09      	ldr	r2, [pc, #36]	; (80090d8 <vTaskSwitchContext+0xb8>)
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	4a06      	ldr	r2, [pc, #24]	; (80090d0 <vTaskSwitchContext+0xb0>)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6013      	str	r3, [r2, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	2000181c 	.word	0x2000181c
 80090cc:	20001808 	.word	0x20001808
 80090d0:	200017fc 	.word	0x200017fc
 80090d4:	20001324 	.word	0x20001324
 80090d8:	20001320 	.word	0x20001320

080090dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <vTaskPlaceOnEventList+0x44>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3318      	adds	r3, #24
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fe fe87 	bl	8007e1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009110:	2101      	movs	r1, #1
 8009112:	6838      	ldr	r0, [r7, #0]
 8009114:	f000 fa7c 	bl	8009610 <prvAddCurrentTaskToDelayedList>
}
 8009118:	bf00      	nop
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20001320 	.word	0x20001320

08009124 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	617b      	str	r3, [r7, #20]
}
 8009148:	bf00      	nop
 800914a:	e7fe      	b.n	800914a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <vTaskPlaceOnEventListRestricted+0x54>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3318      	adds	r3, #24
 8009152:	4619      	mov	r1, r3
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7fe fe3e 	bl	8007dd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009160:	f04f 33ff 	mov.w	r3, #4294967295
 8009164:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	68b8      	ldr	r0, [r7, #8]
 800916a:	f000 fa51 	bl	8009610 <prvAddCurrentTaskToDelayedList>
	}
 800916e:	bf00      	nop
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20001320 	.word	0x20001320

0800917c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10a      	bne.n	80091a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	60fb      	str	r3, [r7, #12]
}
 80091a4:	bf00      	nop
 80091a6:	e7fe      	b.n	80091a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	3318      	adds	r3, #24
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe fe6f 	bl	8007e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b2:	4b1e      	ldr	r3, [pc, #120]	; (800922c <xTaskRemoveFromEventList+0xb0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d11d      	bne.n	80091f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe fe66 	bl	8007e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <xTaskRemoveFromEventList+0xb4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d903      	bls.n	80091d8 <xTaskRemoveFromEventList+0x5c>
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a16      	ldr	r2, [pc, #88]	; (8009230 <xTaskRemoveFromEventList+0xb4>)
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4a13      	ldr	r2, [pc, #76]	; (8009234 <xTaskRemoveFromEventList+0xb8>)
 80091e6:	441a      	add	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fe fdf1 	bl	8007dd6 <vListInsertEnd>
 80091f4:	e005      	b.n	8009202 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3318      	adds	r3, #24
 80091fa:	4619      	mov	r1, r3
 80091fc:	480e      	ldr	r0, [pc, #56]	; (8009238 <xTaskRemoveFromEventList+0xbc>)
 80091fe:	f7fe fdea 	bl	8007dd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	4b0d      	ldr	r3, [pc, #52]	; (800923c <xTaskRemoveFromEventList+0xc0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	429a      	cmp	r2, r3
 800920e:	d905      	bls.n	800921c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009214:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <xTaskRemoveFromEventList+0xc4>)
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e001      	b.n	8009220 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009220:	697b      	ldr	r3, [r7, #20]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	2000181c 	.word	0x2000181c
 8009230:	200017fc 	.word	0x200017fc
 8009234:	20001324 	.word	0x20001324
 8009238:	200017b4 	.word	0x200017b4
 800923c:	20001320 	.word	0x20001320
 8009240:	20001808 	.word	0x20001808

08009244 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <vTaskInternalSetTimeOutState+0x24>)
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <vTaskInternalSetTimeOutState+0x28>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	2000180c 	.word	0x2000180c
 800926c:	200017f8 	.word	0x200017f8

08009270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	613b      	str	r3, [r7, #16]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092b2:	f000 fe7f 	bl	8009fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092b6:	4b1d      	ldr	r3, [pc, #116]	; (800932c <xTaskCheckForTimeOut+0xbc>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d102      	bne.n	80092d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	e023      	b.n	800931e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <xTaskCheckForTimeOut+0xc0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d007      	beq.n	80092f2 <xTaskCheckForTimeOut+0x82>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d302      	bcc.n	80092f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	e015      	b.n	800931e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d20b      	bcs.n	8009314 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	1ad2      	subs	r2, r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff ff9b 	bl	8009244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	e004      	b.n	800931e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2200      	movs	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800931a:	2301      	movs	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800931e:	f000 fe79 	bl	800a014 <vPortExitCritical>

	return xReturn;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	200017f8 	.word	0x200017f8
 8009330:	2000180c 	.word	0x2000180c

08009334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009338:	4b03      	ldr	r3, [pc, #12]	; (8009348 <vTaskMissedYield+0x14>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
}
 800933e:	bf00      	nop
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	20001808 	.word	0x20001808

0800934c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009354:	f000 f852 	bl	80093fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <prvIdleTask+0x28>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d9f9      	bls.n	8009354 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009360:	4b05      	ldr	r3, [pc, #20]	; (8009378 <prvIdleTask+0x2c>)
 8009362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009370:	e7f0      	b.n	8009354 <prvIdleTask+0x8>
 8009372:	bf00      	nop
 8009374:	20001324 	.word	0x20001324
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009382:	2300      	movs	r3, #0
 8009384:	607b      	str	r3, [r7, #4]
 8009386:	e00c      	b.n	80093a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a12      	ldr	r2, [pc, #72]	; (80093dc <prvInitialiseTaskLists+0x60>)
 8009394:	4413      	add	r3, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fcf0 	bl	8007d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3301      	adds	r3, #1
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b37      	cmp	r3, #55	; 0x37
 80093a6:	d9ef      	bls.n	8009388 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093a8:	480d      	ldr	r0, [pc, #52]	; (80093e0 <prvInitialiseTaskLists+0x64>)
 80093aa:	f7fe fce7 	bl	8007d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093ae:	480d      	ldr	r0, [pc, #52]	; (80093e4 <prvInitialiseTaskLists+0x68>)
 80093b0:	f7fe fce4 	bl	8007d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093b4:	480c      	ldr	r0, [pc, #48]	; (80093e8 <prvInitialiseTaskLists+0x6c>)
 80093b6:	f7fe fce1 	bl	8007d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ba:	480c      	ldr	r0, [pc, #48]	; (80093ec <prvInitialiseTaskLists+0x70>)
 80093bc:	f7fe fcde 	bl	8007d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093c0:	480b      	ldr	r0, [pc, #44]	; (80093f0 <prvInitialiseTaskLists+0x74>)
 80093c2:	f7fe fcdb 	bl	8007d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093c6:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <prvInitialiseTaskLists+0x78>)
 80093c8:	4a05      	ldr	r2, [pc, #20]	; (80093e0 <prvInitialiseTaskLists+0x64>)
 80093ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <prvInitialiseTaskLists+0x7c>)
 80093ce:	4a05      	ldr	r2, [pc, #20]	; (80093e4 <prvInitialiseTaskLists+0x68>)
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20001324 	.word	0x20001324
 80093e0:	20001784 	.word	0x20001784
 80093e4:	20001798 	.word	0x20001798
 80093e8:	200017b4 	.word	0x200017b4
 80093ec:	200017c8 	.word	0x200017c8
 80093f0:	200017e0 	.word	0x200017e0
 80093f4:	200017ac 	.word	0x200017ac
 80093f8:	200017b0 	.word	0x200017b0

080093fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009402:	e019      	b.n	8009438 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009404:	f000 fdd6 	bl	8009fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009408:	4b10      	ldr	r3, [pc, #64]	; (800944c <prvCheckTasksWaitingTermination+0x50>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3304      	adds	r3, #4
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fd3b 	bl	8007e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <prvCheckTasksWaitingTermination+0x54>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3b01      	subs	r3, #1
 8009420:	4a0b      	ldr	r2, [pc, #44]	; (8009450 <prvCheckTasksWaitingTermination+0x54>)
 8009422:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009424:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <prvCheckTasksWaitingTermination+0x58>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3b01      	subs	r3, #1
 800942a:	4a0a      	ldr	r2, [pc, #40]	; (8009454 <prvCheckTasksWaitingTermination+0x58>)
 800942c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800942e:	f000 fdf1 	bl	800a014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f810 	bl	8009458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009438:	4b06      	ldr	r3, [pc, #24]	; (8009454 <prvCheckTasksWaitingTermination+0x58>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e1      	bne.n	8009404 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	200017c8 	.word	0x200017c8
 8009450:	200017f4 	.word	0x200017f4
 8009454:	200017dc 	.word	0x200017dc

08009458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009466:	2b00      	cmp	r3, #0
 8009468:	d108      	bne.n	800947c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946e:	4618      	mov	r0, r3
 8009470:	f000 ff8e 	bl	800a390 <vPortFree>
				vPortFree( pxTCB );
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 ff8b 	bl	800a390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800947a:	e018      	b.n	80094ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009482:	2b01      	cmp	r3, #1
 8009484:	d103      	bne.n	800948e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 ff82 	bl	800a390 <vPortFree>
	}
 800948c:	e00f      	b.n	80094ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009494:	2b02      	cmp	r3, #2
 8009496:	d00a      	beq.n	80094ae <prvDeleteTCB+0x56>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	60fb      	str	r3, [r7, #12]
}
 80094aa:	bf00      	nop
 80094ac:	e7fe      	b.n	80094ac <prvDeleteTCB+0x54>
	}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094be:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <prvResetNextTaskUnblockTime+0x38>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <prvResetNextTaskUnblockTime+0x3c>)
 80094ca:	f04f 32ff 	mov.w	r2, #4294967295
 80094ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094d0:	e008      	b.n	80094e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <prvResetNextTaskUnblockTime+0x38>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	4a04      	ldr	r2, [pc, #16]	; (80094f4 <prvResetNextTaskUnblockTime+0x3c>)
 80094e2:	6013      	str	r3, [r2, #0]
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	200017ac 	.word	0x200017ac
 80094f4:	20001814 	.word	0x20001814

080094f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <xTaskGetSchedulerState+0x34>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009506:	2301      	movs	r3, #1
 8009508:	607b      	str	r3, [r7, #4]
 800950a:	e008      	b.n	800951e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800950c:	4b08      	ldr	r3, [pc, #32]	; (8009530 <xTaskGetSchedulerState+0x38>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d102      	bne.n	800951a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009514:	2302      	movs	r3, #2
 8009516:	607b      	str	r3, [r7, #4]
 8009518:	e001      	b.n	800951e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800951a:	2300      	movs	r3, #0
 800951c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800951e:	687b      	ldr	r3, [r7, #4]
	}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	20001800 	.word	0x20001800
 8009530:	2000181c 	.word	0x2000181c

08009534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d056      	beq.n	80095f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800954a:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <xTaskPriorityDisinherit+0xd0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	429a      	cmp	r2, r3
 8009552:	d00a      	beq.n	800956a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60fb      	str	r3, [r7, #12]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60bb      	str	r3, [r7, #8]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958c:	1e5a      	subs	r2, r3, #1
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959a:	429a      	cmp	r2, r3
 800959c:	d02c      	beq.n	80095f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d128      	bne.n	80095f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fc70 	bl	8007e90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <xTaskPriorityDisinherit+0xd4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d903      	bls.n	80095d8 <xTaskPriorityDisinherit+0xa4>
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	4a0c      	ldr	r2, [pc, #48]	; (8009608 <xTaskPriorityDisinherit+0xd4>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a09      	ldr	r2, [pc, #36]	; (800960c <xTaskPriorityDisinherit+0xd8>)
 80095e6:	441a      	add	r2, r3
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fe fbf1 	bl	8007dd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095f4:	2301      	movs	r3, #1
 80095f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095f8:	697b      	ldr	r3, [r7, #20]
	}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20001320 	.word	0x20001320
 8009608:	200017fc 	.word	0x200017fc
 800960c:	20001324 	.word	0x20001324

08009610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800961a:	4b21      	ldr	r3, [pc, #132]	; (80096a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009620:	4b20      	ldr	r3, [pc, #128]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3304      	adds	r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fc32 	bl	8007e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d10a      	bne.n	800964a <prvAddCurrentTaskToDelayedList+0x3a>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800963a:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3304      	adds	r3, #4
 8009640:	4619      	mov	r1, r3
 8009642:	4819      	ldr	r0, [pc, #100]	; (80096a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009644:	f7fe fbc7 	bl	8007dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009648:	e026      	b.n	8009698 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	429a      	cmp	r2, r3
 8009660:	d209      	bcs.n	8009676 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe fbd5 	bl	8007e1e <vListInsert>
}
 8009674:	e010      	b.n	8009698 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009676:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe fbcb 	bl	8007e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	429a      	cmp	r2, r3
 8009690:	d202      	bcs.n	8009698 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009692:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6013      	str	r3, [r2, #0]
}
 8009698:	bf00      	nop
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200017f8 	.word	0x200017f8
 80096a4:	20001320 	.word	0x20001320
 80096a8:	200017e0 	.word	0x200017e0
 80096ac:	200017b0 	.word	0x200017b0
 80096b0:	200017ac 	.word	0x200017ac
 80096b4:	20001814 	.word	0x20001814

080096b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096c2:	f000 fb07 	bl	8009cd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096c6:	4b1c      	ldr	r3, [pc, #112]	; (8009738 <xTimerCreateTimerTask+0x80>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d021      	beq.n	8009712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096d6:	1d3a      	adds	r2, r7, #4
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	f107 030c 	add.w	r3, r7, #12
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe fb31 	bl	8007d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	9202      	str	r2, [sp, #8]
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	2302      	movs	r3, #2
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	2300      	movs	r3, #0
 80096f6:	460a      	mov	r2, r1
 80096f8:	4910      	ldr	r1, [pc, #64]	; (800973c <xTimerCreateTimerTask+0x84>)
 80096fa:	4811      	ldr	r0, [pc, #68]	; (8009740 <xTimerCreateTimerTask+0x88>)
 80096fc:	f7ff f8de 	bl	80088bc <xTaskCreateStatic>
 8009700:	4603      	mov	r3, r0
 8009702:	4a10      	ldr	r2, [pc, #64]	; (8009744 <xTimerCreateTimerTask+0x8c>)
 8009704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <xTimerCreateTimerTask+0x8c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800970e:	2301      	movs	r3, #1
 8009710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	613b      	str	r3, [r7, #16]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800972e:	697b      	ldr	r3, [r7, #20]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20001850 	.word	0x20001850
 800973c:	0800af70 	.word	0x0800af70
 8009740:	0800987d 	.word	0x0800987d
 8009744:	20001854 	.word	0x20001854

08009748 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009756:	2300      	movs	r3, #0
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	623b      	str	r3, [r7, #32]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009776:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <xTimerGenericCommand+0x98>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d02a      	beq.n	80097d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b05      	cmp	r3, #5
 800978e:	dc18      	bgt.n	80097c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009790:	f7ff feb2 	bl	80094f8 <xTaskGetSchedulerState>
 8009794:	4603      	mov	r3, r0
 8009796:	2b02      	cmp	r3, #2
 8009798:	d109      	bne.n	80097ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800979a:	4b11      	ldr	r3, [pc, #68]	; (80097e0 <xTimerGenericCommand+0x98>)
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f107 0110 	add.w	r1, r7, #16
 80097a2:	2300      	movs	r3, #0
 80097a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a6:	f7fe fca1 	bl	80080ec <xQueueGenericSend>
 80097aa:	6278      	str	r0, [r7, #36]	; 0x24
 80097ac:	e012      	b.n	80097d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097ae:	4b0c      	ldr	r3, [pc, #48]	; (80097e0 <xTimerGenericCommand+0x98>)
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f107 0110 	add.w	r1, r7, #16
 80097b6:	2300      	movs	r3, #0
 80097b8:	2200      	movs	r2, #0
 80097ba:	f7fe fc97 	bl	80080ec <xQueueGenericSend>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24
 80097c0:	e008      	b.n	80097d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <xTimerGenericCommand+0x98>)
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f107 0110 	add.w	r1, r7, #16
 80097ca:	2300      	movs	r3, #0
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	f7fe fd8b 	bl	80082e8 <xQueueGenericSendFromISR>
 80097d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3728      	adds	r7, #40	; 0x28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20001850 	.word	0x20001850

080097e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ee:	4b22      	ldr	r3, [pc, #136]	; (8009878 <prvProcessExpiredTimer+0x94>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fb47 	bl	8007e90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d022      	beq.n	8009856 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	18d1      	adds	r1, r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	6978      	ldr	r0, [r7, #20]
 800981e:	f000 f8d1 	bl	80099c4 <prvInsertTimerInActiveList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d01f      	beq.n	8009868 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009828:	2300      	movs	r3, #0
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	2300      	movs	r3, #0
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	2100      	movs	r1, #0
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff ff88 	bl	8009748 <xTimerGenericCommand>
 8009838:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d113      	bne.n	8009868 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	60fb      	str	r3, [r7, #12]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	6978      	ldr	r0, [r7, #20]
 800986e:	4798      	blx	r3
}
 8009870:	bf00      	nop
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20001848 	.word	0x20001848

0800987c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009884:	f107 0308 	add.w	r3, r7, #8
 8009888:	4618      	mov	r0, r3
 800988a:	f000 f857 	bl	800993c <prvGetNextExpireTime>
 800988e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4619      	mov	r1, r3
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 f803 	bl	80098a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800989a:	f000 f8d5 	bl	8009a48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800989e:	e7f1      	b.n	8009884 <prvTimerTask+0x8>

080098a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098aa:	f7ff fa43 	bl	8008d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f866 	bl	8009984 <prvSampleTimeNow>
 80098b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d130      	bne.n	8009922 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <prvProcessTimerOrBlockTask+0x3c>
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d806      	bhi.n	80098dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098ce:	f7ff fa3f 	bl	8008d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ff85 	bl	80097e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098da:	e024      	b.n	8009926 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d008      	beq.n	80098f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098e2:	4b13      	ldr	r3, [pc, #76]	; (8009930 <prvProcessTimerOrBlockTask+0x90>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <prvProcessTimerOrBlockTask+0x50>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e000      	b.n	80098f2 <prvProcessTimerOrBlockTask+0x52>
 80098f0:	2300      	movs	r3, #0
 80098f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098f4:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <prvProcessTimerOrBlockTask+0x94>)
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	f7fe ffa7 	bl	8008854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009906:	f7ff fa23 	bl	8008d50 <xTaskResumeAll>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009910:	4b09      	ldr	r3, [pc, #36]	; (8009938 <prvProcessTimerOrBlockTask+0x98>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
}
 8009920:	e001      	b.n	8009926 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009922:	f7ff fa15 	bl	8008d50 <xTaskResumeAll>
}
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	2000184c 	.word	0x2000184c
 8009934:	20001850 	.word	0x20001850
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <prvGetNextExpireTime+0x44>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <prvGetNextExpireTime+0x16>
 800994e:	2201      	movs	r2, #1
 8009950:	e000      	b.n	8009954 <prvGetNextExpireTime+0x18>
 8009952:	2200      	movs	r2, #0
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <prvGetNextExpireTime+0x44>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	e001      	b.n	8009970 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009970:	68fb      	ldr	r3, [r7, #12]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	20001848 	.word	0x20001848

08009984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800998c:	f7ff fa7e 	bl	8008e8c <xTaskGetTickCount>
 8009990:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009992:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <prvSampleTimeNow+0x3c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d205      	bcs.n	80099a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800999c:	f000 f936 	bl	8009c0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	e002      	b.n	80099ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099ae:	4a04      	ldr	r2, [pc, #16]	; (80099c0 <prvSampleTimeNow+0x3c>)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099b4:	68fb      	ldr	r3, [r7, #12]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20001858 	.word	0x20001858

080099c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d812      	bhi.n	8009a10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d302      	bcc.n	80099fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e01b      	b.n	8009a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099fe:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <prvInsertTimerInActiveList+0x7c>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4619      	mov	r1, r3
 8009a08:	4610      	mov	r0, r2
 8009a0a:	f7fe fa08 	bl	8007e1e <vListInsert>
 8009a0e:	e012      	b.n	8009a36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d206      	bcs.n	8009a26 <prvInsertTimerInActiveList+0x62>
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d302      	bcc.n	8009a26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e007      	b.n	8009a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a26:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <prvInsertTimerInActiveList+0x80>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7fe f9f4 	bl	8007e1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	2000184c 	.word	0x2000184c
 8009a44:	20001848 	.word	0x20001848

08009a48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a4e:	e0ca      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da18      	bge.n	8009a88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	3304      	adds	r3, #4
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10a      	bne.n	8009a78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	61fb      	str	r3, [r7, #28]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a7e:	6850      	ldr	r0, [r2, #4]
 8009a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a82:	6892      	ldr	r2, [r2, #8]
 8009a84:	4611      	mov	r1, r2
 8009a86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f2c0 80aa 	blt.w	8009be4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d004      	beq.n	8009aa6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe f9f5 	bl	8007e90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff ff6b 	bl	8009984 <prvSampleTimeNow>
 8009aae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b09      	cmp	r3, #9
 8009ab4:	f200 8097 	bhi.w	8009be6 <prvProcessReceivedCommands+0x19e>
 8009ab8:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <prvProcessReceivedCommands+0x78>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009ae9 	.word	0x08009ae9
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009b5d 	.word	0x08009b5d
 8009ad0:	08009b71 	.word	0x08009b71
 8009ad4:	08009bbb 	.word	0x08009bbb
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009ae9 	.word	0x08009ae9
 8009ae0:	08009b5d 	.word	0x08009b5d
 8009ae4:	08009b71 	.word	0x08009b71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aee:	f043 0301 	orr.w	r3, r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	18d1      	adds	r1, r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b08:	f7ff ff5c 	bl	80099c4 <prvInsertTimerInActiveList>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d069      	beq.n	8009be6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d05e      	beq.n	8009be6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	441a      	add	r2, r3
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	2100      	movs	r1, #0
 8009b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b3a:	f7ff fe05 	bl	8009748 <xTimerGenericCommand>
 8009b3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d14f      	bne.n	8009be6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	61bb      	str	r3, [r7, #24]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b62:	f023 0301 	bic.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b6e:	e03a      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b76:	f043 0301 	orr.w	r3, r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	617b      	str	r3, [r7, #20]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	18d1      	adds	r1, r2, r3
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb4:	f7ff ff06 	bl	80099c4 <prvInsertTimerInActiveList>
					break;
 8009bb8:	e015      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bca:	f000 fbe1 	bl	800a390 <vPortFree>
 8009bce:	e00a      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009be2:	e000      	b.n	8009be6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009be4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009be6:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <prvProcessReceivedCommands+0x1c0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	1d39      	adds	r1, r7, #4
 8009bec:	2200      	movs	r2, #0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fc16 	bl	8008420 <xQueueReceive>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f47f af2a 	bne.w	8009a50 <prvProcessReceivedCommands+0x8>
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3730      	adds	r7, #48	; 0x30
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20001850 	.word	0x20001850

08009c0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c12:	e048      	b.n	8009ca6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c14:	4b2d      	ldr	r3, [pc, #180]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1e:	4b2b      	ldr	r3, [pc, #172]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe f92f 	bl	8007e90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d02e      	beq.n	8009ca6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4413      	add	r3, r2
 8009c50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d90e      	bls.n	8009c78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c66:	4b19      	ldr	r3, [pc, #100]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4610      	mov	r0, r2
 8009c72:	f7fe f8d4 	bl	8007e1e <vListInsert>
 8009c76:	e016      	b.n	8009ca6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c78:	2300      	movs	r3, #0
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	2100      	movs	r1, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f7ff fd60 	bl	8009748 <xTimerGenericCommand>
 8009c88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10a      	bne.n	8009ca6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	603b      	str	r3, [r7, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1b1      	bne.n	8009c14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009cb0:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cb6:	4b06      	ldr	r3, [pc, #24]	; (8009cd0 <prvSwitchTimerLists+0xc4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a04      	ldr	r2, [pc, #16]	; (8009ccc <prvSwitchTimerLists+0xc0>)
 8009cbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cbe:	4a04      	ldr	r2, [pc, #16]	; (8009cd0 <prvSwitchTimerLists+0xc4>)
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	6013      	str	r3, [r2, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20001848 	.word	0x20001848
 8009cd0:	2000184c 	.word	0x2000184c

08009cd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cda:	f000 f96b 	bl	8009fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cde:	4b15      	ldr	r3, [pc, #84]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d120      	bne.n	8009d28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ce6:	4814      	ldr	r0, [pc, #80]	; (8009d38 <prvCheckForValidListAndQueue+0x64>)
 8009ce8:	f7fe f848 	bl	8007d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cec:	4813      	ldr	r0, [pc, #76]	; (8009d3c <prvCheckForValidListAndQueue+0x68>)
 8009cee:	f7fe f845 	bl	8007d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cf2:	4b13      	ldr	r3, [pc, #76]	; (8009d40 <prvCheckForValidListAndQueue+0x6c>)
 8009cf4:	4a10      	ldr	r2, [pc, #64]	; (8009d38 <prvCheckForValidListAndQueue+0x64>)
 8009cf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cf8:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <prvCheckForValidListAndQueue+0x70>)
 8009cfa:	4a10      	ldr	r2, [pc, #64]	; (8009d3c <prvCheckForValidListAndQueue+0x68>)
 8009cfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <prvCheckForValidListAndQueue+0x74>)
 8009d04:	4a11      	ldr	r2, [pc, #68]	; (8009d4c <prvCheckForValidListAndQueue+0x78>)
 8009d06:	2110      	movs	r1, #16
 8009d08:	200a      	movs	r0, #10
 8009d0a:	f7fe f953 	bl	8007fb4 <xQueueGenericCreateStatic>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009d12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d14:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d1c:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <prvCheckForValidListAndQueue+0x60>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	490b      	ldr	r1, [pc, #44]	; (8009d50 <prvCheckForValidListAndQueue+0x7c>)
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fd6c 	bl	8008800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d28:	f000 f974 	bl	800a014 <vPortExitCritical>
}
 8009d2c:	bf00      	nop
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20001850 	.word	0x20001850
 8009d38:	20001820 	.word	0x20001820
 8009d3c:	20001834 	.word	0x20001834
 8009d40:	20001848 	.word	0x20001848
 8009d44:	2000184c 	.word	0x2000184c
 8009d48:	200018fc 	.word	0x200018fc
 8009d4c:	2000185c 	.word	0x2000185c
 8009d50:	0800af78 	.word	0x0800af78

08009d54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3b04      	subs	r3, #4
 8009d64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3b04      	subs	r3, #4
 8009d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f023 0201 	bic.w	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3b04      	subs	r3, #4
 8009d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d84:	4a0c      	ldr	r2, [pc, #48]	; (8009db8 <pxPortInitialiseStack+0x64>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3b14      	subs	r3, #20
 8009d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3b04      	subs	r3, #4
 8009d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f06f 0202 	mvn.w	r2, #2
 8009da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3b20      	subs	r3, #32
 8009da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009daa:	68fb      	ldr	r3, [r7, #12]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	08009dbd 	.word	0x08009dbd

08009dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dc6:	4b12      	ldr	r3, [pc, #72]	; (8009e10 <prvTaskExitError+0x54>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	d00a      	beq.n	8009de6 <prvTaskExitError+0x2a>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	60fb      	str	r3, [r7, #12]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <prvTaskExitError+0x28>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	60bb      	str	r3, [r7, #8]
}
 8009df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dfa:	bf00      	nop
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0fc      	beq.n	8009dfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	20000020 	.word	0x20000020
	...

08009e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <pxCurrentTCBConst2>)
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	6808      	ldr	r0, [r1, #0]
 8009e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2a:	f380 8809 	msr	PSP, r0
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8811 	msr	BASEPRI, r0
 8009e3a:	4770      	bx	lr
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst2>:
 8009e40:	20001320 	.word	0x20001320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e48:	4808      	ldr	r0, [pc, #32]	; (8009e6c <prvPortStartFirstTask+0x24>)
 8009e4a:	6800      	ldr	r0, [r0, #0]
 8009e4c:	6800      	ldr	r0, [r0, #0]
 8009e4e:	f380 8808 	msr	MSP, r0
 8009e52:	f04f 0000 	mov.w	r0, #0
 8009e56:	f380 8814 	msr	CONTROL, r0
 8009e5a:	b662      	cpsie	i
 8009e5c:	b661      	cpsie	f
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	df00      	svc	0
 8009e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e6a:	bf00      	nop
 8009e6c:	e000ed08 	.word	0xe000ed08

08009e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e76:	4b46      	ldr	r3, [pc, #280]	; (8009f90 <xPortStartScheduler+0x120>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a46      	ldr	r2, [pc, #280]	; (8009f94 <xPortStartScheduler+0x124>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d10a      	bne.n	8009e96 <xPortStartScheduler+0x26>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	613b      	str	r3, [r7, #16]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e96:	4b3e      	ldr	r3, [pc, #248]	; (8009f90 <xPortStartScheduler+0x120>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a3f      	ldr	r2, [pc, #252]	; (8009f98 <xPortStartScheduler+0x128>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10a      	bne.n	8009eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eb6:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <xPortStartScheduler+0x12c>)
 8009eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b31      	ldr	r3, [pc, #196]	; (8009fa0 <xPortStartScheduler+0x130>)
 8009edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ede:	4b31      	ldr	r3, [pc, #196]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009ee0:	2207      	movs	r2, #7
 8009ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ee4:	e009      	b.n	8009efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ee6:	4b2f      	ldr	r3, [pc, #188]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4a2d      	ldr	r2, [pc, #180]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b80      	cmp	r3, #128	; 0x80
 8009f04:	d0ef      	beq.n	8009ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f06:	4b27      	ldr	r3, [pc, #156]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1c3 0307 	rsb	r3, r3, #7
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d00a      	beq.n	8009f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60bb      	str	r3, [r7, #8]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f28:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	4a1d      	ldr	r2, [pc, #116]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f32:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f3a:	4a1a      	ldr	r2, [pc, #104]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f46:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f52:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a14      	ldr	r2, [pc, #80]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f5e:	f000 f8dd 	bl	800a11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <xPortStartScheduler+0x13c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f68:	f000 f8fc 	bl	800a164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f6c:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <xPortStartScheduler+0x140>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0f      	ldr	r2, [pc, #60]	; (8009fb0 <xPortStartScheduler+0x140>)
 8009f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f78:	f7ff ff66 	bl	8009e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f7c:	f7ff f850 	bl	8009020 <vTaskSwitchContext>
	prvTaskExitError();
 8009f80:	f7ff ff1c 	bl	8009dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	e000ed00 	.word	0xe000ed00
 8009f94:	410fc271 	.word	0x410fc271
 8009f98:	410fc270 	.word	0x410fc270
 8009f9c:	e000e400 	.word	0xe000e400
 8009fa0:	2000194c 	.word	0x2000194c
 8009fa4:	20001950 	.word	0x20001950
 8009fa8:	e000ed20 	.word	0xe000ed20
 8009fac:	20000020 	.word	0x20000020
 8009fb0:	e000ef34 	.word	0xe000ef34

08009fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	607b      	str	r3, [r7, #4]
}
 8009fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <vPortEnterCritical+0x58>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	4a0d      	ldr	r2, [pc, #52]	; (800a00c <vPortEnterCritical+0x58>)
 8009fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <vPortEnterCritical+0x58>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10f      	bne.n	800a000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <vPortEnterCritical+0x5c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	603b      	str	r3, [r7, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <vPortEnterCritical+0x4a>
	}
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000020 	.word	0x20000020
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a01a:	4b12      	ldr	r3, [pc, #72]	; (800a064 <vPortExitCritical+0x50>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <vPortExitCritical+0x24>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	607b      	str	r3, [r7, #4]
}
 800a034:	bf00      	nop
 800a036:	e7fe      	b.n	800a036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <vPortExitCritical+0x50>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	4a09      	ldr	r2, [pc, #36]	; (800a064 <vPortExitCritical+0x50>)
 800a040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <vPortExitCritical+0x50>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <vPortExitCritical+0x42>
 800a04a:	2300      	movs	r3, #0
 800a04c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	f383 8811 	msr	BASEPRI, r3
}
 800a054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	20000020 	.word	0x20000020
	...

0800a070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a070:	f3ef 8009 	mrs	r0, PSP
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <pxCurrentTCBConst>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f01e 0f10 	tst.w	lr, #16
 800a080:	bf08      	it	eq
 800a082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a094:	f380 8811 	msr	BASEPRI, r0
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f7fe ffbe 	bl	8009020 <vTaskSwitchContext>
 800a0a4:	f04f 0000 	mov.w	r0, #0
 800a0a8:	f380 8811 	msr	BASEPRI, r0
 800a0ac:	bc09      	pop	{r0, r3}
 800a0ae:	6819      	ldr	r1, [r3, #0]
 800a0b0:	6808      	ldr	r0, [r1, #0]
 800a0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b6:	f01e 0f10 	tst.w	lr, #16
 800a0ba:	bf08      	it	eq
 800a0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0c0:	f380 8809 	msr	PSP, r0
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst>:
 800a0d0:	20001320 	.word	0x20001320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	607b      	str	r3, [r7, #4]
}
 800a0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0f2:	f7fe fedb 	bl	8008eac <xTaskIncrementTick>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0fc:	4b06      	ldr	r3, [pc, #24]	; (800a118 <xPortSysTickHandler+0x40>)
 800a0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f383 8811 	msr	BASEPRI, r3
}
 800a10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <vPortSetupTimerInterrupt+0x34>)
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a126:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <vPortSetupTimerInterrupt+0x38>)
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <vPortSetupTimerInterrupt+0x3c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0a      	ldr	r2, [pc, #40]	; (800a15c <vPortSetupTimerInterrupt+0x40>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	099b      	lsrs	r3, r3, #6
 800a138:	4a09      	ldr	r2, [pc, #36]	; (800a160 <vPortSetupTimerInterrupt+0x44>)
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a13e:	4b04      	ldr	r3, [pc, #16]	; (800a150 <vPortSetupTimerInterrupt+0x34>)
 800a140:	2207      	movs	r2, #7
 800a142:	601a      	str	r2, [r3, #0]
}
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	e000e010 	.word	0xe000e010
 800a154:	e000e018 	.word	0xe000e018
 800a158:	20000014 	.word	0x20000014
 800a15c:	10624dd3 	.word	0x10624dd3
 800a160:	e000e014 	.word	0xe000e014

0800a164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a174 <vPortEnableVFP+0x10>
 800a168:	6801      	ldr	r1, [r0, #0]
 800a16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a16e:	6001      	str	r1, [r0, #0]
 800a170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a172:	bf00      	nop
 800a174:	e000ed88 	.word	0xe000ed88

0800a178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a17e:	f3ef 8305 	mrs	r3, IPSR
 800a182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b0f      	cmp	r3, #15
 800a188:	d914      	bls.n	800a1b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <vPortValidateInterruptPriority+0x70>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a194:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <vPortValidateInterruptPriority+0x74>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	7afa      	ldrb	r2, [r7, #11]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d20a      	bcs.n	800a1b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <vPortValidateInterruptPriority+0x78>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <vPortValidateInterruptPriority+0x7c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d90a      	bls.n	800a1da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	603b      	str	r3, [r7, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <vPortValidateInterruptPriority+0x60>
	}
 800a1da:	bf00      	nop
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	e000e3f0 	.word	0xe000e3f0
 800a1ec:	2000194c 	.word	0x2000194c
 800a1f0:	e000ed0c 	.word	0xe000ed0c
 800a1f4:	20001950 	.word	0x20001950

0800a1f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08a      	sub	sp, #40	; 0x28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a204:	f7fe fd96 	bl	8008d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a208:	4b5b      	ldr	r3, [pc, #364]	; (800a378 <pvPortMalloc+0x180>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a210:	f000 f920 	bl	800a454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a214:	4b59      	ldr	r3, [pc, #356]	; (800a37c <pvPortMalloc+0x184>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f040 8093 	bne.w	800a348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01d      	beq.n	800a264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a228:	2208      	movs	r2, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d014      	beq.n	800a264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	3308      	adds	r3, #8
 800a242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <pvPortMalloc+0x6c>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	617b      	str	r3, [r7, #20]
}
 800a260:	bf00      	nop
 800a262:	e7fe      	b.n	800a262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d06e      	beq.n	800a348 <pvPortMalloc+0x150>
 800a26a:	4b45      	ldr	r3, [pc, #276]	; (800a380 <pvPortMalloc+0x188>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d869      	bhi.n	800a348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a274:	4b43      	ldr	r3, [pc, #268]	; (800a384 <pvPortMalloc+0x18c>)
 800a276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a278:	4b42      	ldr	r3, [pc, #264]	; (800a384 <pvPortMalloc+0x18c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a27e:	e004      	b.n	800a28a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	d903      	bls.n	800a29c <pvPortMalloc+0xa4>
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f1      	bne.n	800a280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a29c:	4b36      	ldr	r3, [pc, #216]	; (800a378 <pvPortMalloc+0x180>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d050      	beq.n	800a348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2208      	movs	r2, #8
 800a2ac:	4413      	add	r3, r2
 800a2ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d91f      	bls.n	800a308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	613b      	str	r3, [r7, #16]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a302:	69b8      	ldr	r0, [r7, #24]
 800a304:	f000 f908 	bl	800a518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a308:	4b1d      	ldr	r3, [pc, #116]	; (800a380 <pvPortMalloc+0x188>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <pvPortMalloc+0x188>)
 800a314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a316:	4b1a      	ldr	r3, [pc, #104]	; (800a380 <pvPortMalloc+0x188>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <pvPortMalloc+0x190>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d203      	bcs.n	800a32a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a322:	4b17      	ldr	r3, [pc, #92]	; (800a380 <pvPortMalloc+0x188>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <pvPortMalloc+0x190>)
 800a328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <pvPortMalloc+0x184>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	431a      	orrs	r2, r3
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <pvPortMalloc+0x194>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	4a11      	ldr	r2, [pc, #68]	; (800a38c <pvPortMalloc+0x194>)
 800a346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a348:	f7fe fd02 	bl	8008d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <pvPortMalloc+0x174>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60fb      	str	r3, [r7, #12]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <pvPortMalloc+0x172>
	return pvReturn;
 800a36c:	69fb      	ldr	r3, [r7, #28]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3728      	adds	r7, #40	; 0x28
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	2000555c 	.word	0x2000555c
 800a37c:	20005570 	.word	0x20005570
 800a380:	20005560 	.word	0x20005560
 800a384:	20005554 	.word	0x20005554
 800a388:	20005564 	.word	0x20005564
 800a38c:	20005568 	.word	0x20005568

0800a390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d04d      	beq.n	800a43e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	425b      	negs	r3, r3
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	4b24      	ldr	r3, [pc, #144]	; (800a448 <vPortFree+0xb8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <vPortFree+0x44>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <vPortFree+0x62>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	60bb      	str	r3, [r7, #8]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <vPortFree+0xb8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01e      	beq.n	800a43e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11a      	bne.n	800a43e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <vPortFree+0xb8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	43db      	mvns	r3, r3
 800a412:	401a      	ands	r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a418:	f7fe fc8c 	bl	8008d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <vPortFree+0xbc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4413      	add	r3, r2
 800a426:	4a09      	ldr	r2, [pc, #36]	; (800a44c <vPortFree+0xbc>)
 800a428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f000 f874 	bl	800a518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <vPortFree+0xc0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3301      	adds	r3, #1
 800a436:	4a06      	ldr	r2, [pc, #24]	; (800a450 <vPortFree+0xc0>)
 800a438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a43a:	f7fe fc89 	bl	8008d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a43e:	bf00      	nop
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20005570 	.word	0x20005570
 800a44c:	20005560 	.word	0x20005560
 800a450:	2000556c 	.word	0x2000556c

0800a454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a45a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a460:	4b27      	ldr	r3, [pc, #156]	; (800a500 <prvHeapInit+0xac>)
 800a462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f003 0307 	and.w	r3, r3, #7
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3307      	adds	r3, #7
 800a472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0307 	bic.w	r3, r3, #7
 800a47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	4a1f      	ldr	r2, [pc, #124]	; (800a500 <prvHeapInit+0xac>)
 800a484:	4413      	add	r3, r2
 800a486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a48c:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <prvHeapInit+0xb0>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a492:	4b1c      	ldr	r3, [pc, #112]	; (800a504 <prvHeapInit+0xb0>)
 800a494:	2200      	movs	r2, #0
 800a496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4413      	add	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1a9b      	subs	r3, r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a15      	ldr	r2, [pc, #84]	; (800a508 <prvHeapInit+0xb4>)
 800a4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <prvHeapInit+0xb4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <prvHeapInit+0xb4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <prvHeapInit+0xb4>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <prvHeapInit+0xb8>)
 800a4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	4a09      	ldr	r2, [pc, #36]	; (800a510 <prvHeapInit+0xbc>)
 800a4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4ec:	4b09      	ldr	r3, [pc, #36]	; (800a514 <prvHeapInit+0xc0>)
 800a4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20001954 	.word	0x20001954
 800a504:	20005554 	.word	0x20005554
 800a508:	2000555c 	.word	0x2000555c
 800a50c:	20005564 	.word	0x20005564
 800a510:	20005560 	.word	0x20005560
 800a514:	20005570 	.word	0x20005570

0800a518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a520:	4b28      	ldr	r3, [pc, #160]	; (800a5c4 <prvInsertBlockIntoFreeList+0xac>)
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	e002      	b.n	800a52c <prvInsertBlockIntoFreeList+0x14>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d8f7      	bhi.n	800a526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	429a      	cmp	r2, r3
 800a546:	d108      	bne.n	800a55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	441a      	add	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d118      	bne.n	800a5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d00d      	beq.n	800a596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	441a      	add	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	e008      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e003      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d002      	beq.n	800a5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20005554 	.word	0x20005554
 800a5c8:	2000555c 	.word	0x2000555c

0800a5cc <__errno>:
 800a5cc:	4b01      	ldr	r3, [pc, #4]	; (800a5d4 <__errno+0x8>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000024 	.word	0x20000024

0800a5d8 <__libc_init_array>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	4d0d      	ldr	r5, [pc, #52]	; (800a610 <__libc_init_array+0x38>)
 800a5dc:	4c0d      	ldr	r4, [pc, #52]	; (800a614 <__libc_init_array+0x3c>)
 800a5de:	1b64      	subs	r4, r4, r5
 800a5e0:	10a4      	asrs	r4, r4, #2
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	42a6      	cmp	r6, r4
 800a5e6:	d109      	bne.n	800a5fc <__libc_init_array+0x24>
 800a5e8:	4d0b      	ldr	r5, [pc, #44]	; (800a618 <__libc_init_array+0x40>)
 800a5ea:	4c0c      	ldr	r4, [pc, #48]	; (800a61c <__libc_init_array+0x44>)
 800a5ec:	f000 fc8e 	bl	800af0c <_init>
 800a5f0:	1b64      	subs	r4, r4, r5
 800a5f2:	10a4      	asrs	r4, r4, #2
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	42a6      	cmp	r6, r4
 800a5f8:	d105      	bne.n	800a606 <__libc_init_array+0x2e>
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a600:	4798      	blx	r3
 800a602:	3601      	adds	r6, #1
 800a604:	e7ee      	b.n	800a5e4 <__libc_init_array+0xc>
 800a606:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60a:	4798      	blx	r3
 800a60c:	3601      	adds	r6, #1
 800a60e:	e7f2      	b.n	800a5f6 <__libc_init_array+0x1e>
 800a610:	0800b06c 	.word	0x0800b06c
 800a614:	0800b06c 	.word	0x0800b06c
 800a618:	0800b06c 	.word	0x0800b06c
 800a61c:	0800b070 	.word	0x0800b070

0800a620 <memcpy>:
 800a620:	440a      	add	r2, r1
 800a622:	4291      	cmp	r1, r2
 800a624:	f100 33ff 	add.w	r3, r0, #4294967295
 800a628:	d100      	bne.n	800a62c <memcpy+0xc>
 800a62a:	4770      	bx	lr
 800a62c:	b510      	push	{r4, lr}
 800a62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a636:	4291      	cmp	r1, r2
 800a638:	d1f9      	bne.n	800a62e <memcpy+0xe>
 800a63a:	bd10      	pop	{r4, pc}

0800a63c <memset>:
 800a63c:	4402      	add	r2, r0
 800a63e:	4603      	mov	r3, r0
 800a640:	4293      	cmp	r3, r2
 800a642:	d100      	bne.n	800a646 <memset+0xa>
 800a644:	4770      	bx	lr
 800a646:	f803 1b01 	strb.w	r1, [r3], #1
 800a64a:	e7f9      	b.n	800a640 <memset+0x4>

0800a64c <siprintf>:
 800a64c:	b40e      	push	{r1, r2, r3}
 800a64e:	b500      	push	{lr}
 800a650:	b09c      	sub	sp, #112	; 0x70
 800a652:	ab1d      	add	r3, sp, #116	; 0x74
 800a654:	9002      	str	r0, [sp, #8]
 800a656:	9006      	str	r0, [sp, #24]
 800a658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a65c:	4809      	ldr	r0, [pc, #36]	; (800a684 <siprintf+0x38>)
 800a65e:	9107      	str	r1, [sp, #28]
 800a660:	9104      	str	r1, [sp, #16]
 800a662:	4909      	ldr	r1, [pc, #36]	; (800a688 <siprintf+0x3c>)
 800a664:	f853 2b04 	ldr.w	r2, [r3], #4
 800a668:	9105      	str	r1, [sp, #20]
 800a66a:	6800      	ldr	r0, [r0, #0]
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	a902      	add	r1, sp, #8
 800a670:	f000 f868 	bl	800a744 <_svfiprintf_r>
 800a674:	9b02      	ldr	r3, [sp, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	b01c      	add	sp, #112	; 0x70
 800a67c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a680:	b003      	add	sp, #12
 800a682:	4770      	bx	lr
 800a684:	20000024 	.word	0x20000024
 800a688:	ffff0208 	.word	0xffff0208

0800a68c <__ssputs_r>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	688e      	ldr	r6, [r1, #8]
 800a692:	429e      	cmp	r6, r3
 800a694:	4682      	mov	sl, r0
 800a696:	460c      	mov	r4, r1
 800a698:	4690      	mov	r8, r2
 800a69a:	461f      	mov	r7, r3
 800a69c:	d838      	bhi.n	800a710 <__ssputs_r+0x84>
 800a69e:	898a      	ldrh	r2, [r1, #12]
 800a6a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6a4:	d032      	beq.n	800a70c <__ssputs_r+0x80>
 800a6a6:	6825      	ldr	r5, [r4, #0]
 800a6a8:	6909      	ldr	r1, [r1, #16]
 800a6aa:	eba5 0901 	sub.w	r9, r5, r1
 800a6ae:	6965      	ldr	r5, [r4, #20]
 800a6b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	444b      	add	r3, r9
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	429d      	cmp	r5, r3
 800a6c0:	bf38      	it	cc
 800a6c2:	461d      	movcc	r5, r3
 800a6c4:	0553      	lsls	r3, r2, #21
 800a6c6:	d531      	bpl.n	800a72c <__ssputs_r+0xa0>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f000 fb55 	bl	800ad78 <_malloc_r>
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	b950      	cbnz	r0, 800a6e8 <__ssputs_r+0x5c>
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	f8ca 3000 	str.w	r3, [sl]
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e8:	6921      	ldr	r1, [r4, #16]
 800a6ea:	464a      	mov	r2, r9
 800a6ec:	f7ff ff98 	bl	800a620 <memcpy>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	6126      	str	r6, [r4, #16]
 800a6fe:	6165      	str	r5, [r4, #20]
 800a700:	444e      	add	r6, r9
 800a702:	eba5 0509 	sub.w	r5, r5, r9
 800a706:	6026      	str	r6, [r4, #0]
 800a708:	60a5      	str	r5, [r4, #8]
 800a70a:	463e      	mov	r6, r7
 800a70c:	42be      	cmp	r6, r7
 800a70e:	d900      	bls.n	800a712 <__ssputs_r+0x86>
 800a710:	463e      	mov	r6, r7
 800a712:	6820      	ldr	r0, [r4, #0]
 800a714:	4632      	mov	r2, r6
 800a716:	4641      	mov	r1, r8
 800a718:	f000 faa8 	bl	800ac6c <memmove>
 800a71c:	68a3      	ldr	r3, [r4, #8]
 800a71e:	1b9b      	subs	r3, r3, r6
 800a720:	60a3      	str	r3, [r4, #8]
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	4433      	add	r3, r6
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	2000      	movs	r0, #0
 800a72a:	e7db      	b.n	800a6e4 <__ssputs_r+0x58>
 800a72c:	462a      	mov	r2, r5
 800a72e:	f000 fb97 	bl	800ae60 <_realloc_r>
 800a732:	4606      	mov	r6, r0
 800a734:	2800      	cmp	r0, #0
 800a736:	d1e1      	bne.n	800a6fc <__ssputs_r+0x70>
 800a738:	6921      	ldr	r1, [r4, #16]
 800a73a:	4650      	mov	r0, sl
 800a73c:	f000 fab0 	bl	800aca0 <_free_r>
 800a740:	e7c7      	b.n	800a6d2 <__ssputs_r+0x46>
	...

0800a744 <_svfiprintf_r>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	4698      	mov	r8, r3
 800a74a:	898b      	ldrh	r3, [r1, #12]
 800a74c:	061b      	lsls	r3, r3, #24
 800a74e:	b09d      	sub	sp, #116	; 0x74
 800a750:	4607      	mov	r7, r0
 800a752:	460d      	mov	r5, r1
 800a754:	4614      	mov	r4, r2
 800a756:	d50e      	bpl.n	800a776 <_svfiprintf_r+0x32>
 800a758:	690b      	ldr	r3, [r1, #16]
 800a75a:	b963      	cbnz	r3, 800a776 <_svfiprintf_r+0x32>
 800a75c:	2140      	movs	r1, #64	; 0x40
 800a75e:	f000 fb0b 	bl	800ad78 <_malloc_r>
 800a762:	6028      	str	r0, [r5, #0]
 800a764:	6128      	str	r0, [r5, #16]
 800a766:	b920      	cbnz	r0, 800a772 <_svfiprintf_r+0x2e>
 800a768:	230c      	movs	r3, #12
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	e0d1      	b.n	800a916 <_svfiprintf_r+0x1d2>
 800a772:	2340      	movs	r3, #64	; 0x40
 800a774:	616b      	str	r3, [r5, #20]
 800a776:	2300      	movs	r3, #0
 800a778:	9309      	str	r3, [sp, #36]	; 0x24
 800a77a:	2320      	movs	r3, #32
 800a77c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a780:	f8cd 800c 	str.w	r8, [sp, #12]
 800a784:	2330      	movs	r3, #48	; 0x30
 800a786:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a930 <_svfiprintf_r+0x1ec>
 800a78a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a78e:	f04f 0901 	mov.w	r9, #1
 800a792:	4623      	mov	r3, r4
 800a794:	469a      	mov	sl, r3
 800a796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a79a:	b10a      	cbz	r2, 800a7a0 <_svfiprintf_r+0x5c>
 800a79c:	2a25      	cmp	r2, #37	; 0x25
 800a79e:	d1f9      	bne.n	800a794 <_svfiprintf_r+0x50>
 800a7a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a7a4:	d00b      	beq.n	800a7be <_svfiprintf_r+0x7a>
 800a7a6:	465b      	mov	r3, fp
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f7ff ff6d 	bl	800a68c <__ssputs_r>
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f000 80aa 	beq.w	800a90c <_svfiprintf_r+0x1c8>
 800a7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ba:	445a      	add	r2, fp
 800a7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7be:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 80a2 	beq.w	800a90c <_svfiprintf_r+0x1c8>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7d2:	f10a 0a01 	add.w	sl, sl, #1
 800a7d6:	9304      	str	r3, [sp, #16]
 800a7d8:	9307      	str	r3, [sp, #28]
 800a7da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7de:	931a      	str	r3, [sp, #104]	; 0x68
 800a7e0:	4654      	mov	r4, sl
 800a7e2:	2205      	movs	r2, #5
 800a7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e8:	4851      	ldr	r0, [pc, #324]	; (800a930 <_svfiprintf_r+0x1ec>)
 800a7ea:	f7f5 fd09 	bl	8000200 <memchr>
 800a7ee:	9a04      	ldr	r2, [sp, #16]
 800a7f0:	b9d8      	cbnz	r0, 800a82a <_svfiprintf_r+0xe6>
 800a7f2:	06d0      	lsls	r0, r2, #27
 800a7f4:	bf44      	itt	mi
 800a7f6:	2320      	movmi	r3, #32
 800a7f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7fc:	0711      	lsls	r1, r2, #28
 800a7fe:	bf44      	itt	mi
 800a800:	232b      	movmi	r3, #43	; 0x2b
 800a802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a806:	f89a 3000 	ldrb.w	r3, [sl]
 800a80a:	2b2a      	cmp	r3, #42	; 0x2a
 800a80c:	d015      	beq.n	800a83a <_svfiprintf_r+0xf6>
 800a80e:	9a07      	ldr	r2, [sp, #28]
 800a810:	4654      	mov	r4, sl
 800a812:	2000      	movs	r0, #0
 800a814:	f04f 0c0a 	mov.w	ip, #10
 800a818:	4621      	mov	r1, r4
 800a81a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a81e:	3b30      	subs	r3, #48	; 0x30
 800a820:	2b09      	cmp	r3, #9
 800a822:	d94e      	bls.n	800a8c2 <_svfiprintf_r+0x17e>
 800a824:	b1b0      	cbz	r0, 800a854 <_svfiprintf_r+0x110>
 800a826:	9207      	str	r2, [sp, #28]
 800a828:	e014      	b.n	800a854 <_svfiprintf_r+0x110>
 800a82a:	eba0 0308 	sub.w	r3, r0, r8
 800a82e:	fa09 f303 	lsl.w	r3, r9, r3
 800a832:	4313      	orrs	r3, r2
 800a834:	9304      	str	r3, [sp, #16]
 800a836:	46a2      	mov	sl, r4
 800a838:	e7d2      	b.n	800a7e0 <_svfiprintf_r+0x9c>
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	1d19      	adds	r1, r3, #4
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	9103      	str	r1, [sp, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	bfbb      	ittet	lt
 800a846:	425b      	neglt	r3, r3
 800a848:	f042 0202 	orrlt.w	r2, r2, #2
 800a84c:	9307      	strge	r3, [sp, #28]
 800a84e:	9307      	strlt	r3, [sp, #28]
 800a850:	bfb8      	it	lt
 800a852:	9204      	strlt	r2, [sp, #16]
 800a854:	7823      	ldrb	r3, [r4, #0]
 800a856:	2b2e      	cmp	r3, #46	; 0x2e
 800a858:	d10c      	bne.n	800a874 <_svfiprintf_r+0x130>
 800a85a:	7863      	ldrb	r3, [r4, #1]
 800a85c:	2b2a      	cmp	r3, #42	; 0x2a
 800a85e:	d135      	bne.n	800a8cc <_svfiprintf_r+0x188>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	1d1a      	adds	r2, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9203      	str	r2, [sp, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfb8      	it	lt
 800a86c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a870:	3402      	adds	r4, #2
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a940 <_svfiprintf_r+0x1fc>
 800a878:	7821      	ldrb	r1, [r4, #0]
 800a87a:	2203      	movs	r2, #3
 800a87c:	4650      	mov	r0, sl
 800a87e:	f7f5 fcbf 	bl	8000200 <memchr>
 800a882:	b140      	cbz	r0, 800a896 <_svfiprintf_r+0x152>
 800a884:	2340      	movs	r3, #64	; 0x40
 800a886:	eba0 000a 	sub.w	r0, r0, sl
 800a88a:	fa03 f000 	lsl.w	r0, r3, r0
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	4303      	orrs	r3, r0
 800a892:	3401      	adds	r4, #1
 800a894:	9304      	str	r3, [sp, #16]
 800a896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89a:	4826      	ldr	r0, [pc, #152]	; (800a934 <_svfiprintf_r+0x1f0>)
 800a89c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8a0:	2206      	movs	r2, #6
 800a8a2:	f7f5 fcad 	bl	8000200 <memchr>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d038      	beq.n	800a91c <_svfiprintf_r+0x1d8>
 800a8aa:	4b23      	ldr	r3, [pc, #140]	; (800a938 <_svfiprintf_r+0x1f4>)
 800a8ac:	bb1b      	cbnz	r3, 800a8f6 <_svfiprintf_r+0x1b2>
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	3307      	adds	r3, #7
 800a8b2:	f023 0307 	bic.w	r3, r3, #7
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	9303      	str	r3, [sp, #12]
 800a8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8bc:	4433      	add	r3, r6
 800a8be:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c0:	e767      	b.n	800a792 <_svfiprintf_r+0x4e>
 800a8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	2001      	movs	r0, #1
 800a8ca:	e7a5      	b.n	800a818 <_svfiprintf_r+0xd4>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	3401      	adds	r4, #1
 800a8d0:	9305      	str	r3, [sp, #20]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	f04f 0c0a 	mov.w	ip, #10
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8de:	3a30      	subs	r2, #48	; 0x30
 800a8e0:	2a09      	cmp	r2, #9
 800a8e2:	d903      	bls.n	800a8ec <_svfiprintf_r+0x1a8>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d0c5      	beq.n	800a874 <_svfiprintf_r+0x130>
 800a8e8:	9105      	str	r1, [sp, #20]
 800a8ea:	e7c3      	b.n	800a874 <_svfiprintf_r+0x130>
 800a8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e7f0      	b.n	800a8d8 <_svfiprintf_r+0x194>
 800a8f6:	ab03      	add	r3, sp, #12
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	462a      	mov	r2, r5
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <_svfiprintf_r+0x1f8>)
 800a8fe:	a904      	add	r1, sp, #16
 800a900:	4638      	mov	r0, r7
 800a902:	f3af 8000 	nop.w
 800a906:	1c42      	adds	r2, r0, #1
 800a908:	4606      	mov	r6, r0
 800a90a:	d1d6      	bne.n	800a8ba <_svfiprintf_r+0x176>
 800a90c:	89ab      	ldrh	r3, [r5, #12]
 800a90e:	065b      	lsls	r3, r3, #25
 800a910:	f53f af2c 	bmi.w	800a76c <_svfiprintf_r+0x28>
 800a914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a916:	b01d      	add	sp, #116	; 0x74
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b06      	ldr	r3, [pc, #24]	; (800a93c <_svfiprintf_r+0x1f8>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4638      	mov	r0, r7
 800a928:	f000 f87a 	bl	800aa20 <_printf_i>
 800a92c:	e7eb      	b.n	800a906 <_svfiprintf_r+0x1c2>
 800a92e:	bf00      	nop
 800a930:	0800b030 	.word	0x0800b030
 800a934:	0800b03a 	.word	0x0800b03a
 800a938:	00000000 	.word	0x00000000
 800a93c:	0800a68d 	.word	0x0800a68d
 800a940:	0800b036 	.word	0x0800b036

0800a944 <_printf_common>:
 800a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	4616      	mov	r6, r2
 800a94a:	4699      	mov	r9, r3
 800a94c:	688a      	ldr	r2, [r1, #8]
 800a94e:	690b      	ldr	r3, [r1, #16]
 800a950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a954:	4293      	cmp	r3, r2
 800a956:	bfb8      	it	lt
 800a958:	4613      	movlt	r3, r2
 800a95a:	6033      	str	r3, [r6, #0]
 800a95c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a960:	4607      	mov	r7, r0
 800a962:	460c      	mov	r4, r1
 800a964:	b10a      	cbz	r2, 800a96a <_printf_common+0x26>
 800a966:	3301      	adds	r3, #1
 800a968:	6033      	str	r3, [r6, #0]
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	0699      	lsls	r1, r3, #26
 800a96e:	bf42      	ittt	mi
 800a970:	6833      	ldrmi	r3, [r6, #0]
 800a972:	3302      	addmi	r3, #2
 800a974:	6033      	strmi	r3, [r6, #0]
 800a976:	6825      	ldr	r5, [r4, #0]
 800a978:	f015 0506 	ands.w	r5, r5, #6
 800a97c:	d106      	bne.n	800a98c <_printf_common+0x48>
 800a97e:	f104 0a19 	add.w	sl, r4, #25
 800a982:	68e3      	ldr	r3, [r4, #12]
 800a984:	6832      	ldr	r2, [r6, #0]
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	42ab      	cmp	r3, r5
 800a98a:	dc26      	bgt.n	800a9da <_printf_common+0x96>
 800a98c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a990:	1e13      	subs	r3, r2, #0
 800a992:	6822      	ldr	r2, [r4, #0]
 800a994:	bf18      	it	ne
 800a996:	2301      	movne	r3, #1
 800a998:	0692      	lsls	r2, r2, #26
 800a99a:	d42b      	bmi.n	800a9f4 <_printf_common+0xb0>
 800a99c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	47c0      	blx	r8
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d01e      	beq.n	800a9e8 <_printf_common+0xa4>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	68e5      	ldr	r5, [r4, #12]
 800a9ae:	6832      	ldr	r2, [r6, #0]
 800a9b0:	f003 0306 	and.w	r3, r3, #6
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	bf08      	it	eq
 800a9b8:	1aad      	subeq	r5, r5, r2
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	6922      	ldr	r2, [r4, #16]
 800a9be:	bf0c      	ite	eq
 800a9c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9c4:	2500      	movne	r5, #0
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	bfc4      	itt	gt
 800a9ca:	1a9b      	subgt	r3, r3, r2
 800a9cc:	18ed      	addgt	r5, r5, r3
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	341a      	adds	r4, #26
 800a9d2:	42b5      	cmp	r5, r6
 800a9d4:	d11a      	bne.n	800aa0c <_printf_common+0xc8>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	e008      	b.n	800a9ec <_printf_common+0xa8>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4652      	mov	r2, sl
 800a9de:	4649      	mov	r1, r9
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	47c0      	blx	r8
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d103      	bne.n	800a9f0 <_printf_common+0xac>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	e7c6      	b.n	800a982 <_printf_common+0x3e>
 800a9f4:	18e1      	adds	r1, r4, r3
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	2030      	movs	r0, #48	; 0x30
 800a9fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9fe:	4422      	add	r2, r4
 800aa00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa08:	3302      	adds	r3, #2
 800aa0a:	e7c7      	b.n	800a99c <_printf_common+0x58>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	4622      	mov	r2, r4
 800aa10:	4649      	mov	r1, r9
 800aa12:	4638      	mov	r0, r7
 800aa14:	47c0      	blx	r8
 800aa16:	3001      	adds	r0, #1
 800aa18:	d0e6      	beq.n	800a9e8 <_printf_common+0xa4>
 800aa1a:	3601      	adds	r6, #1
 800aa1c:	e7d9      	b.n	800a9d2 <_printf_common+0x8e>
	...

0800aa20 <_printf_i>:
 800aa20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	7e0f      	ldrb	r7, [r1, #24]
 800aa26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa28:	2f78      	cmp	r7, #120	; 0x78
 800aa2a:	4691      	mov	r9, r2
 800aa2c:	4680      	mov	r8, r0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	469a      	mov	sl, r3
 800aa32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa36:	d807      	bhi.n	800aa48 <_printf_i+0x28>
 800aa38:	2f62      	cmp	r7, #98	; 0x62
 800aa3a:	d80a      	bhi.n	800aa52 <_printf_i+0x32>
 800aa3c:	2f00      	cmp	r7, #0
 800aa3e:	f000 80d8 	beq.w	800abf2 <_printf_i+0x1d2>
 800aa42:	2f58      	cmp	r7, #88	; 0x58
 800aa44:	f000 80a3 	beq.w	800ab8e <_printf_i+0x16e>
 800aa48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa50:	e03a      	b.n	800aac8 <_printf_i+0xa8>
 800aa52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa56:	2b15      	cmp	r3, #21
 800aa58:	d8f6      	bhi.n	800aa48 <_printf_i+0x28>
 800aa5a:	a101      	add	r1, pc, #4	; (adr r1, 800aa60 <_printf_i+0x40>)
 800aa5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa60:	0800aab9 	.word	0x0800aab9
 800aa64:	0800aacd 	.word	0x0800aacd
 800aa68:	0800aa49 	.word	0x0800aa49
 800aa6c:	0800aa49 	.word	0x0800aa49
 800aa70:	0800aa49 	.word	0x0800aa49
 800aa74:	0800aa49 	.word	0x0800aa49
 800aa78:	0800aacd 	.word	0x0800aacd
 800aa7c:	0800aa49 	.word	0x0800aa49
 800aa80:	0800aa49 	.word	0x0800aa49
 800aa84:	0800aa49 	.word	0x0800aa49
 800aa88:	0800aa49 	.word	0x0800aa49
 800aa8c:	0800abd9 	.word	0x0800abd9
 800aa90:	0800aafd 	.word	0x0800aafd
 800aa94:	0800abbb 	.word	0x0800abbb
 800aa98:	0800aa49 	.word	0x0800aa49
 800aa9c:	0800aa49 	.word	0x0800aa49
 800aaa0:	0800abfb 	.word	0x0800abfb
 800aaa4:	0800aa49 	.word	0x0800aa49
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aa49 	.word	0x0800aa49
 800aab0:	0800aa49 	.word	0x0800aa49
 800aab4:	0800abc3 	.word	0x0800abc3
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	1d1a      	adds	r2, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	602a      	str	r2, [r5, #0]
 800aac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aac8:	2301      	movs	r3, #1
 800aaca:	e0a3      	b.n	800ac14 <_printf_i+0x1f4>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	6829      	ldr	r1, [r5, #0]
 800aad0:	0606      	lsls	r6, r0, #24
 800aad2:	f101 0304 	add.w	r3, r1, #4
 800aad6:	d50a      	bpl.n	800aaee <_printf_i+0xce>
 800aad8:	680e      	ldr	r6, [r1, #0]
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	2e00      	cmp	r6, #0
 800aade:	da03      	bge.n	800aae8 <_printf_i+0xc8>
 800aae0:	232d      	movs	r3, #45	; 0x2d
 800aae2:	4276      	negs	r6, r6
 800aae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae8:	485e      	ldr	r0, [pc, #376]	; (800ac64 <_printf_i+0x244>)
 800aaea:	230a      	movs	r3, #10
 800aaec:	e019      	b.n	800ab22 <_printf_i+0x102>
 800aaee:	680e      	ldr	r6, [r1, #0]
 800aaf0:	602b      	str	r3, [r5, #0]
 800aaf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaf6:	bf18      	it	ne
 800aaf8:	b236      	sxthne	r6, r6
 800aafa:	e7ef      	b.n	800aadc <_printf_i+0xbc>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	6820      	ldr	r0, [r4, #0]
 800ab00:	1d19      	adds	r1, r3, #4
 800ab02:	6029      	str	r1, [r5, #0]
 800ab04:	0601      	lsls	r1, r0, #24
 800ab06:	d501      	bpl.n	800ab0c <_printf_i+0xec>
 800ab08:	681e      	ldr	r6, [r3, #0]
 800ab0a:	e002      	b.n	800ab12 <_printf_i+0xf2>
 800ab0c:	0646      	lsls	r6, r0, #25
 800ab0e:	d5fb      	bpl.n	800ab08 <_printf_i+0xe8>
 800ab10:	881e      	ldrh	r6, [r3, #0]
 800ab12:	4854      	ldr	r0, [pc, #336]	; (800ac64 <_printf_i+0x244>)
 800ab14:	2f6f      	cmp	r7, #111	; 0x6f
 800ab16:	bf0c      	ite	eq
 800ab18:	2308      	moveq	r3, #8
 800ab1a:	230a      	movne	r3, #10
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab22:	6865      	ldr	r5, [r4, #4]
 800ab24:	60a5      	str	r5, [r4, #8]
 800ab26:	2d00      	cmp	r5, #0
 800ab28:	bfa2      	ittt	ge
 800ab2a:	6821      	ldrge	r1, [r4, #0]
 800ab2c:	f021 0104 	bicge.w	r1, r1, #4
 800ab30:	6021      	strge	r1, [r4, #0]
 800ab32:	b90e      	cbnz	r6, 800ab38 <_printf_i+0x118>
 800ab34:	2d00      	cmp	r5, #0
 800ab36:	d04d      	beq.n	800abd4 <_printf_i+0x1b4>
 800ab38:	4615      	mov	r5, r2
 800ab3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab3e:	fb03 6711 	mls	r7, r3, r1, r6
 800ab42:	5dc7      	ldrb	r7, [r0, r7]
 800ab44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab48:	4637      	mov	r7, r6
 800ab4a:	42bb      	cmp	r3, r7
 800ab4c:	460e      	mov	r6, r1
 800ab4e:	d9f4      	bls.n	800ab3a <_printf_i+0x11a>
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d10b      	bne.n	800ab6c <_printf_i+0x14c>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	07de      	lsls	r6, r3, #31
 800ab58:	d508      	bpl.n	800ab6c <_printf_i+0x14c>
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	6861      	ldr	r1, [r4, #4]
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	bfde      	ittt	le
 800ab62:	2330      	movle	r3, #48	; 0x30
 800ab64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab6c:	1b52      	subs	r2, r2, r5
 800ab6e:	6122      	str	r2, [r4, #16]
 800ab70:	f8cd a000 	str.w	sl, [sp]
 800ab74:	464b      	mov	r3, r9
 800ab76:	aa03      	add	r2, sp, #12
 800ab78:	4621      	mov	r1, r4
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	f7ff fee2 	bl	800a944 <_printf_common>
 800ab80:	3001      	adds	r0, #1
 800ab82:	d14c      	bne.n	800ac1e <_printf_i+0x1fe>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	b004      	add	sp, #16
 800ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8e:	4835      	ldr	r0, [pc, #212]	; (800ac64 <_printf_i+0x244>)
 800ab90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab94:	6829      	ldr	r1, [r5, #0]
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab9c:	6029      	str	r1, [r5, #0]
 800ab9e:	061d      	lsls	r5, r3, #24
 800aba0:	d514      	bpl.n	800abcc <_printf_i+0x1ac>
 800aba2:	07df      	lsls	r7, r3, #31
 800aba4:	bf44      	itt	mi
 800aba6:	f043 0320 	orrmi.w	r3, r3, #32
 800abaa:	6023      	strmi	r3, [r4, #0]
 800abac:	b91e      	cbnz	r6, 800abb6 <_printf_i+0x196>
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	f023 0320 	bic.w	r3, r3, #32
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	2310      	movs	r3, #16
 800abb8:	e7b0      	b.n	800ab1c <_printf_i+0xfc>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	f043 0320 	orr.w	r3, r3, #32
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	2378      	movs	r3, #120	; 0x78
 800abc4:	4828      	ldr	r0, [pc, #160]	; (800ac68 <_printf_i+0x248>)
 800abc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abca:	e7e3      	b.n	800ab94 <_printf_i+0x174>
 800abcc:	0659      	lsls	r1, r3, #25
 800abce:	bf48      	it	mi
 800abd0:	b2b6      	uxthmi	r6, r6
 800abd2:	e7e6      	b.n	800aba2 <_printf_i+0x182>
 800abd4:	4615      	mov	r5, r2
 800abd6:	e7bb      	b.n	800ab50 <_printf_i+0x130>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	6826      	ldr	r6, [r4, #0]
 800abdc:	6961      	ldr	r1, [r4, #20]
 800abde:	1d18      	adds	r0, r3, #4
 800abe0:	6028      	str	r0, [r5, #0]
 800abe2:	0635      	lsls	r5, r6, #24
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	d501      	bpl.n	800abec <_printf_i+0x1cc>
 800abe8:	6019      	str	r1, [r3, #0]
 800abea:	e002      	b.n	800abf2 <_printf_i+0x1d2>
 800abec:	0670      	lsls	r0, r6, #25
 800abee:	d5fb      	bpl.n	800abe8 <_printf_i+0x1c8>
 800abf0:	8019      	strh	r1, [r3, #0]
 800abf2:	2300      	movs	r3, #0
 800abf4:	6123      	str	r3, [r4, #16]
 800abf6:	4615      	mov	r5, r2
 800abf8:	e7ba      	b.n	800ab70 <_printf_i+0x150>
 800abfa:	682b      	ldr	r3, [r5, #0]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	602a      	str	r2, [r5, #0]
 800ac00:	681d      	ldr	r5, [r3, #0]
 800ac02:	6862      	ldr	r2, [r4, #4]
 800ac04:	2100      	movs	r1, #0
 800ac06:	4628      	mov	r0, r5
 800ac08:	f7f5 fafa 	bl	8000200 <memchr>
 800ac0c:	b108      	cbz	r0, 800ac12 <_printf_i+0x1f2>
 800ac0e:	1b40      	subs	r0, r0, r5
 800ac10:	6060      	str	r0, [r4, #4]
 800ac12:	6863      	ldr	r3, [r4, #4]
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	2300      	movs	r3, #0
 800ac18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac1c:	e7a8      	b.n	800ab70 <_printf_i+0x150>
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	462a      	mov	r2, r5
 800ac22:	4649      	mov	r1, r9
 800ac24:	4640      	mov	r0, r8
 800ac26:	47d0      	blx	sl
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d0ab      	beq.n	800ab84 <_printf_i+0x164>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	079b      	lsls	r3, r3, #30
 800ac30:	d413      	bmi.n	800ac5a <_printf_i+0x23a>
 800ac32:	68e0      	ldr	r0, [r4, #12]
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	4298      	cmp	r0, r3
 800ac38:	bfb8      	it	lt
 800ac3a:	4618      	movlt	r0, r3
 800ac3c:	e7a4      	b.n	800ab88 <_printf_i+0x168>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4632      	mov	r2, r6
 800ac42:	4649      	mov	r1, r9
 800ac44:	4640      	mov	r0, r8
 800ac46:	47d0      	blx	sl
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d09b      	beq.n	800ab84 <_printf_i+0x164>
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	9903      	ldr	r1, [sp, #12]
 800ac52:	1a5b      	subs	r3, r3, r1
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	dcf2      	bgt.n	800ac3e <_printf_i+0x21e>
 800ac58:	e7eb      	b.n	800ac32 <_printf_i+0x212>
 800ac5a:	2500      	movs	r5, #0
 800ac5c:	f104 0619 	add.w	r6, r4, #25
 800ac60:	e7f5      	b.n	800ac4e <_printf_i+0x22e>
 800ac62:	bf00      	nop
 800ac64:	0800b041 	.word	0x0800b041
 800ac68:	0800b052 	.word	0x0800b052

0800ac6c <memmove>:
 800ac6c:	4288      	cmp	r0, r1
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	eb01 0402 	add.w	r4, r1, r2
 800ac74:	d902      	bls.n	800ac7c <memmove+0x10>
 800ac76:	4284      	cmp	r4, r0
 800ac78:	4623      	mov	r3, r4
 800ac7a:	d807      	bhi.n	800ac8c <memmove+0x20>
 800ac7c:	1e43      	subs	r3, r0, #1
 800ac7e:	42a1      	cmp	r1, r4
 800ac80:	d008      	beq.n	800ac94 <memmove+0x28>
 800ac82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac8a:	e7f8      	b.n	800ac7e <memmove+0x12>
 800ac8c:	4402      	add	r2, r0
 800ac8e:	4601      	mov	r1, r0
 800ac90:	428a      	cmp	r2, r1
 800ac92:	d100      	bne.n	800ac96 <memmove+0x2a>
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac9e:	e7f7      	b.n	800ac90 <memmove+0x24>

0800aca0 <_free_r>:
 800aca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aca2:	2900      	cmp	r1, #0
 800aca4:	d044      	beq.n	800ad30 <_free_r+0x90>
 800aca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acaa:	9001      	str	r0, [sp, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f1a1 0404 	sub.w	r4, r1, #4
 800acb2:	bfb8      	it	lt
 800acb4:	18e4      	addlt	r4, r4, r3
 800acb6:	f000 f913 	bl	800aee0 <__malloc_lock>
 800acba:	4a1e      	ldr	r2, [pc, #120]	; (800ad34 <_free_r+0x94>)
 800acbc:	9801      	ldr	r0, [sp, #4]
 800acbe:	6813      	ldr	r3, [r2, #0]
 800acc0:	b933      	cbnz	r3, 800acd0 <_free_r+0x30>
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	6014      	str	r4, [r2, #0]
 800acc6:	b003      	add	sp, #12
 800acc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800accc:	f000 b90e 	b.w	800aeec <__malloc_unlock>
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	d908      	bls.n	800ace6 <_free_r+0x46>
 800acd4:	6825      	ldr	r5, [r4, #0]
 800acd6:	1961      	adds	r1, r4, r5
 800acd8:	428b      	cmp	r3, r1
 800acda:	bf01      	itttt	eq
 800acdc:	6819      	ldreq	r1, [r3, #0]
 800acde:	685b      	ldreq	r3, [r3, #4]
 800ace0:	1949      	addeq	r1, r1, r5
 800ace2:	6021      	streq	r1, [r4, #0]
 800ace4:	e7ed      	b.n	800acc2 <_free_r+0x22>
 800ace6:	461a      	mov	r2, r3
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	b10b      	cbz	r3, 800acf0 <_free_r+0x50>
 800acec:	42a3      	cmp	r3, r4
 800acee:	d9fa      	bls.n	800ace6 <_free_r+0x46>
 800acf0:	6811      	ldr	r1, [r2, #0]
 800acf2:	1855      	adds	r5, r2, r1
 800acf4:	42a5      	cmp	r5, r4
 800acf6:	d10b      	bne.n	800ad10 <_free_r+0x70>
 800acf8:	6824      	ldr	r4, [r4, #0]
 800acfa:	4421      	add	r1, r4
 800acfc:	1854      	adds	r4, r2, r1
 800acfe:	42a3      	cmp	r3, r4
 800ad00:	6011      	str	r1, [r2, #0]
 800ad02:	d1e0      	bne.n	800acc6 <_free_r+0x26>
 800ad04:	681c      	ldr	r4, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	6053      	str	r3, [r2, #4]
 800ad0a:	4421      	add	r1, r4
 800ad0c:	6011      	str	r1, [r2, #0]
 800ad0e:	e7da      	b.n	800acc6 <_free_r+0x26>
 800ad10:	d902      	bls.n	800ad18 <_free_r+0x78>
 800ad12:	230c      	movs	r3, #12
 800ad14:	6003      	str	r3, [r0, #0]
 800ad16:	e7d6      	b.n	800acc6 <_free_r+0x26>
 800ad18:	6825      	ldr	r5, [r4, #0]
 800ad1a:	1961      	adds	r1, r4, r5
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	bf04      	itt	eq
 800ad20:	6819      	ldreq	r1, [r3, #0]
 800ad22:	685b      	ldreq	r3, [r3, #4]
 800ad24:	6063      	str	r3, [r4, #4]
 800ad26:	bf04      	itt	eq
 800ad28:	1949      	addeq	r1, r1, r5
 800ad2a:	6021      	streq	r1, [r4, #0]
 800ad2c:	6054      	str	r4, [r2, #4]
 800ad2e:	e7ca      	b.n	800acc6 <_free_r+0x26>
 800ad30:	b003      	add	sp, #12
 800ad32:	bd30      	pop	{r4, r5, pc}
 800ad34:	20005574 	.word	0x20005574

0800ad38 <sbrk_aligned>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	4e0e      	ldr	r6, [pc, #56]	; (800ad74 <sbrk_aligned+0x3c>)
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	6831      	ldr	r1, [r6, #0]
 800ad40:	4605      	mov	r5, r0
 800ad42:	b911      	cbnz	r1, 800ad4a <sbrk_aligned+0x12>
 800ad44:	f000 f8bc 	bl	800aec0 <_sbrk_r>
 800ad48:	6030      	str	r0, [r6, #0]
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f000 f8b7 	bl	800aec0 <_sbrk_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d00a      	beq.n	800ad6c <sbrk_aligned+0x34>
 800ad56:	1cc4      	adds	r4, r0, #3
 800ad58:	f024 0403 	bic.w	r4, r4, #3
 800ad5c:	42a0      	cmp	r0, r4
 800ad5e:	d007      	beq.n	800ad70 <sbrk_aligned+0x38>
 800ad60:	1a21      	subs	r1, r4, r0
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 f8ac 	bl	800aec0 <_sbrk_r>
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d101      	bne.n	800ad70 <sbrk_aligned+0x38>
 800ad6c:	f04f 34ff 	mov.w	r4, #4294967295
 800ad70:	4620      	mov	r0, r4
 800ad72:	bd70      	pop	{r4, r5, r6, pc}
 800ad74:	20005578 	.word	0x20005578

0800ad78 <_malloc_r>:
 800ad78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7c:	1ccd      	adds	r5, r1, #3
 800ad7e:	f025 0503 	bic.w	r5, r5, #3
 800ad82:	3508      	adds	r5, #8
 800ad84:	2d0c      	cmp	r5, #12
 800ad86:	bf38      	it	cc
 800ad88:	250c      	movcc	r5, #12
 800ad8a:	2d00      	cmp	r5, #0
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	db01      	blt.n	800ad94 <_malloc_r+0x1c>
 800ad90:	42a9      	cmp	r1, r5
 800ad92:	d905      	bls.n	800ada0 <_malloc_r+0x28>
 800ad94:	230c      	movs	r3, #12
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	2600      	movs	r6, #0
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	4e2e      	ldr	r6, [pc, #184]	; (800ae5c <_malloc_r+0xe4>)
 800ada2:	f000 f89d 	bl	800aee0 <__malloc_lock>
 800ada6:	6833      	ldr	r3, [r6, #0]
 800ada8:	461c      	mov	r4, r3
 800adaa:	bb34      	cbnz	r4, 800adfa <_malloc_r+0x82>
 800adac:	4629      	mov	r1, r5
 800adae:	4638      	mov	r0, r7
 800adb0:	f7ff ffc2 	bl	800ad38 <sbrk_aligned>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	4604      	mov	r4, r0
 800adb8:	d14d      	bne.n	800ae56 <_malloc_r+0xde>
 800adba:	6834      	ldr	r4, [r6, #0]
 800adbc:	4626      	mov	r6, r4
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	d140      	bne.n	800ae44 <_malloc_r+0xcc>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	4631      	mov	r1, r6
 800adc6:	4638      	mov	r0, r7
 800adc8:	eb04 0803 	add.w	r8, r4, r3
 800adcc:	f000 f878 	bl	800aec0 <_sbrk_r>
 800add0:	4580      	cmp	r8, r0
 800add2:	d13a      	bne.n	800ae4a <_malloc_r+0xd2>
 800add4:	6821      	ldr	r1, [r4, #0]
 800add6:	3503      	adds	r5, #3
 800add8:	1a6d      	subs	r5, r5, r1
 800adda:	f025 0503 	bic.w	r5, r5, #3
 800adde:	3508      	adds	r5, #8
 800ade0:	2d0c      	cmp	r5, #12
 800ade2:	bf38      	it	cc
 800ade4:	250c      	movcc	r5, #12
 800ade6:	4629      	mov	r1, r5
 800ade8:	4638      	mov	r0, r7
 800adea:	f7ff ffa5 	bl	800ad38 <sbrk_aligned>
 800adee:	3001      	adds	r0, #1
 800adf0:	d02b      	beq.n	800ae4a <_malloc_r+0xd2>
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	442b      	add	r3, r5
 800adf6:	6023      	str	r3, [r4, #0]
 800adf8:	e00e      	b.n	800ae18 <_malloc_r+0xa0>
 800adfa:	6822      	ldr	r2, [r4, #0]
 800adfc:	1b52      	subs	r2, r2, r5
 800adfe:	d41e      	bmi.n	800ae3e <_malloc_r+0xc6>
 800ae00:	2a0b      	cmp	r2, #11
 800ae02:	d916      	bls.n	800ae32 <_malloc_r+0xba>
 800ae04:	1961      	adds	r1, r4, r5
 800ae06:	42a3      	cmp	r3, r4
 800ae08:	6025      	str	r5, [r4, #0]
 800ae0a:	bf18      	it	ne
 800ae0c:	6059      	strne	r1, [r3, #4]
 800ae0e:	6863      	ldr	r3, [r4, #4]
 800ae10:	bf08      	it	eq
 800ae12:	6031      	streq	r1, [r6, #0]
 800ae14:	5162      	str	r2, [r4, r5]
 800ae16:	604b      	str	r3, [r1, #4]
 800ae18:	4638      	mov	r0, r7
 800ae1a:	f104 060b 	add.w	r6, r4, #11
 800ae1e:	f000 f865 	bl	800aeec <__malloc_unlock>
 800ae22:	f026 0607 	bic.w	r6, r6, #7
 800ae26:	1d23      	adds	r3, r4, #4
 800ae28:	1af2      	subs	r2, r6, r3
 800ae2a:	d0b6      	beq.n	800ad9a <_malloc_r+0x22>
 800ae2c:	1b9b      	subs	r3, r3, r6
 800ae2e:	50a3      	str	r3, [r4, r2]
 800ae30:	e7b3      	b.n	800ad9a <_malloc_r+0x22>
 800ae32:	6862      	ldr	r2, [r4, #4]
 800ae34:	42a3      	cmp	r3, r4
 800ae36:	bf0c      	ite	eq
 800ae38:	6032      	streq	r2, [r6, #0]
 800ae3a:	605a      	strne	r2, [r3, #4]
 800ae3c:	e7ec      	b.n	800ae18 <_malloc_r+0xa0>
 800ae3e:	4623      	mov	r3, r4
 800ae40:	6864      	ldr	r4, [r4, #4]
 800ae42:	e7b2      	b.n	800adaa <_malloc_r+0x32>
 800ae44:	4634      	mov	r4, r6
 800ae46:	6876      	ldr	r6, [r6, #4]
 800ae48:	e7b9      	b.n	800adbe <_malloc_r+0x46>
 800ae4a:	230c      	movs	r3, #12
 800ae4c:	603b      	str	r3, [r7, #0]
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f000 f84c 	bl	800aeec <__malloc_unlock>
 800ae54:	e7a1      	b.n	800ad9a <_malloc_r+0x22>
 800ae56:	6025      	str	r5, [r4, #0]
 800ae58:	e7de      	b.n	800ae18 <_malloc_r+0xa0>
 800ae5a:	bf00      	nop
 800ae5c:	20005574 	.word	0x20005574

0800ae60 <_realloc_r>:
 800ae60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	4680      	mov	r8, r0
 800ae66:	4614      	mov	r4, r2
 800ae68:	460e      	mov	r6, r1
 800ae6a:	b921      	cbnz	r1, 800ae76 <_realloc_r+0x16>
 800ae6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	4611      	mov	r1, r2
 800ae72:	f7ff bf81 	b.w	800ad78 <_malloc_r>
 800ae76:	b92a      	cbnz	r2, 800ae84 <_realloc_r+0x24>
 800ae78:	f7ff ff12 	bl	800aca0 <_free_r>
 800ae7c:	4625      	mov	r5, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae84:	f000 f838 	bl	800aef8 <_malloc_usable_size_r>
 800ae88:	4284      	cmp	r4, r0
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	d802      	bhi.n	800ae94 <_realloc_r+0x34>
 800ae8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae92:	d812      	bhi.n	800aeba <_realloc_r+0x5a>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4640      	mov	r0, r8
 800ae98:	f7ff ff6e 	bl	800ad78 <_malloc_r>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0ed      	beq.n	800ae7e <_realloc_r+0x1e>
 800aea2:	42bc      	cmp	r4, r7
 800aea4:	4622      	mov	r2, r4
 800aea6:	4631      	mov	r1, r6
 800aea8:	bf28      	it	cs
 800aeaa:	463a      	movcs	r2, r7
 800aeac:	f7ff fbb8 	bl	800a620 <memcpy>
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	f7ff fef4 	bl	800aca0 <_free_r>
 800aeb8:	e7e1      	b.n	800ae7e <_realloc_r+0x1e>
 800aeba:	4635      	mov	r5, r6
 800aebc:	e7df      	b.n	800ae7e <_realloc_r+0x1e>
	...

0800aec0 <_sbrk_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d06      	ldr	r5, [pc, #24]	; (800aedc <_sbrk_r+0x1c>)
 800aec4:	2300      	movs	r3, #0
 800aec6:	4604      	mov	r4, r0
 800aec8:	4608      	mov	r0, r1
 800aeca:	602b      	str	r3, [r5, #0]
 800aecc:	f7f6 fd94 	bl	80019f8 <_sbrk>
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	d102      	bne.n	800aeda <_sbrk_r+0x1a>
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	b103      	cbz	r3, 800aeda <_sbrk_r+0x1a>
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	bd38      	pop	{r3, r4, r5, pc}
 800aedc:	2000557c 	.word	0x2000557c

0800aee0 <__malloc_lock>:
 800aee0:	4801      	ldr	r0, [pc, #4]	; (800aee8 <__malloc_lock+0x8>)
 800aee2:	f000 b811 	b.w	800af08 <__retarget_lock_acquire_recursive>
 800aee6:	bf00      	nop
 800aee8:	20005580 	.word	0x20005580

0800aeec <__malloc_unlock>:
 800aeec:	4801      	ldr	r0, [pc, #4]	; (800aef4 <__malloc_unlock+0x8>)
 800aeee:	f000 b80c 	b.w	800af0a <__retarget_lock_release_recursive>
 800aef2:	bf00      	nop
 800aef4:	20005580 	.word	0x20005580

0800aef8 <_malloc_usable_size_r>:
 800aef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aefc:	1f18      	subs	r0, r3, #4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfbc      	itt	lt
 800af02:	580b      	ldrlt	r3, [r1, r0]
 800af04:	18c0      	addlt	r0, r0, r3
 800af06:	4770      	bx	lr

0800af08 <__retarget_lock_acquire_recursive>:
 800af08:	4770      	bx	lr

0800af0a <__retarget_lock_release_recursive>:
 800af0a:	4770      	bx	lr

0800af0c <_init>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr

0800af18 <_fini>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	bf00      	nop
 800af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1e:	bc08      	pop	{r3}
 800af20:	469e      	mov	lr, r3
 800af22:	4770      	bx	lr
