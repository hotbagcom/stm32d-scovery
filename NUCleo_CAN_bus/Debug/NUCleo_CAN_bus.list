
NUCleo_CAN_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008028  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a0  080082a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080082a0  080082a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082a8  080082a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080082b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000053d4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200053e4  200053e4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020c54  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7a  00000000  00000000  00040c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00044a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001918  00000000  00000000  00046480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004572  00000000  00000000  00047d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d826  00000000  00000000  0004c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8ec5  00000000  00000000  00069b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001629f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071e4  00000000  00000000  00162a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080081c0 	.word	0x080081c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080081c0 	.word	0x080081c0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MAve_Filter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t updating_index = 0;
uint32_t MAve_Filter(uint32_t * buffer, int length ,uint32_t new_value){
 80004f4:	b480      	push	{r7}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	int sum= 0;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
	if(updating_index >= length)//if reached size
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MAve_Filter+0x74>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	4293      	cmp	r3, r2
 800050e:	dc02      	bgt.n	8000516 <MAve_Filter+0x22>
		updating_index =0;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MAve_Filter+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
	buffer[updating_index]=new_value; // update with new value
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MAve_Filter+0x74>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	4413      	add	r3, r2
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	601a      	str	r2, [r3, #0]
	for(int i=0; i <length ; i++)// oving average
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	e00a      	b.n	8000540 <MAve_Filter+0x4c>
		sum = sum + buffer[i];
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	4413      	add	r3, r2
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	4413      	add	r3, r2
 8000538:	617b      	str	r3, [r7, #20]
	for(int i=0; i <length ; i++)// oving average
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	3301      	adds	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693a      	ldr	r2, [r7, #16]
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf0      	blt.n	800052a <MAve_Filter+0x36>
	updating_index++;//move to next index point
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <MAve_Filter+0x74>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MAve_Filter+0x74>)
 8000552:	701a      	strb	r2, [r3, #0]
	return sum/length; //take averagevalue
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	fb92 f3f3 	sdiv	r3, r2, r3

}
 800055c:	4618      	mov	r0, r3
 800055e:	371c      	adds	r7, #28
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	20000a3c 	.word	0x20000a3c

0800056c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	  adc_input = MAve_Filter(m_ave_buff,sizeof(m_ave_buff)/sizeof(m_ave_buff[0]),adcdma[0]);
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_ADC_ConvCpltCallback+0x24>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	2164      	movs	r1, #100	; 0x64
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <HAL_ADC_ConvCpltCallback+0x28>)
 800057e:	f7ff ffb9 	bl	80004f4 <MAve_Filter>
 8000582:	4603      	mov	r3, r0
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000586:	6013      	str	r3, [r2, #0]

}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000002c 	.word	0x2000002c
 8000594:	20000034 	.word	0x20000034
 8000598:	200001c4 	.word	0x200001c4

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fe7a 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f858 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fa1e 	bl	80009e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f9fc 	bl	80009a8 <MX_DMA_Init>
  MX_ETH_Init();
 80005b0:	f000 f90e 	bl	80007d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f9a0 	bl	80008f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f9c8 	bl	800094c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005bc:	f000 f8b6 	bl	800072c <MX_ADC1_Init>
  MX_TIM12_Init();
 80005c0:	f000 f954 	bl	800086c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)  adcdma , hadc1.Init.NbrOfConversion );
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x88>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4917      	ldr	r1, [pc, #92]	; (8000628 <main+0x8c>)
 80005cc:	4815      	ldr	r0, [pc, #84]	; (8000624 <main+0x88>)
 80005ce:	f000 ff0d 	bl	80013ec <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim12, TIM_CHANNEL_1, (uint32_t *)(adc_input*15),1);
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0x90>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4613      	mov	r3, r2
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	461a      	mov	r2, r3
 80005de:	2301      	movs	r3, #1
 80005e0:	2100      	movs	r1, #0
 80005e2:	4813      	ldr	r0, [pc, #76]	; (8000630 <main+0x94>)
 80005e4:	f003 fb2e 	bl	8003c44 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f005 f85c 	bl	80056a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <main+0x98>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0x9c>)
 80005f2:	f005 f8a1 	bl	8005738 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <main+0xa0>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <main+0xa4>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <main+0xa8>)
 8000602:	f005 f899 	bl	8005738 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <main+0xac>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0xb0>)
 800060e:	2100      	movs	r1, #0
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0xb4>)
 8000612:	f005 f891 	bl	8005738 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0xb8>)
 800061a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061c:	f005 f866 	bl	80056ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x84>
 8000622:	bf00      	nop
 8000624:	20000340 	.word	0x20000340
 8000628:	2000002c 	.word	0x2000002c
 800062c:	200001c4 	.word	0x200001c4
 8000630:	20000498 	.word	0x20000498
 8000634:	08008214 	.word	0x08008214
 8000638:	08000b41 	.word	0x08000b41
 800063c:	20000a30 	.word	0x20000a30
 8000640:	08008238 	.word	0x08008238
 8000644:	08000b71 	.word	0x08000b71
 8000648:	20000a34 	.word	0x20000a34
 800064c:	0800825c 	.word	0x0800825c
 8000650:	08000bc5 	.word	0x08000bc5
 8000654:	20000a38 	.word	0x20000a38

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fda2 	bl	80081b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006cc:	23a8      	movs	r3, #168	; 0xa8
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fccd 	bl	800307c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fa86 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f002 ff2e 	bl	800356c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 fa6f 	bl	8000bf8 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000746:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ADC1_Init+0x98>)
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_ADC1_Init+0xa0>)
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_ADC1_Init+0x98>)
 800077a:	2201      	movs	r2, #1
 800077c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000788:	2201      	movs	r2, #1
 800078a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_ADC1_Init+0x98>)
 800078e:	f000 fde9 	bl	8001364 <HAL_ADC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 fa2e 	bl	8000bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800079c:	2305      	movs	r3, #5
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80007a4:	2304      	movs	r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_ADC1_Init+0x98>)
 80007ae:	f000 ff41 	bl	8001634 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 fa1e 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000340 	.word	0x20000340
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ETH_Init+0x84>)
 80007d6:	4a20      	ldr	r2, [pc, #128]	; (8000858 <MX_ETH_Init+0x88>)
 80007d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <MX_ETH_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_ETH_Init+0x8c>)
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_ETH_Init+0x8c>)
 80007e8:	22e1      	movs	r2, #225	; 0xe1
 80007ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_ETH_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_ETH_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_ETH_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ETH_Init+0x84>)
 8000800:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_ETH_Init+0x8c>)
 8000802:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_ETH_Init+0x84>)
 8000806:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800080a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_ETH_Init+0x84>)
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <MX_ETH_Init+0x90>)
 8000810:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_ETH_Init+0x84>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_ETH_Init+0x94>)
 8000816:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_ETH_Init+0x84>)
 800081a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800081e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_ETH_Init+0x84>)
 8000822:	f001 fe09 	bl	8002438 <HAL_ETH_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 f9e4 	bl	8000bf8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000830:	2238      	movs	r2, #56	; 0x38
 8000832:	2100      	movs	r1, #0
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_ETH_Init+0x98>)
 8000836:	f007 fcbb 	bl	80081b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_ETH_Init+0x98>)
 800083c:	2221      	movs	r2, #33	; 0x21
 800083e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_ETH_Init+0x98>)
 8000842:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000846:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_ETH_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200003e8 	.word	0x200003e8
 8000858:	40028000 	.word	0x40028000
 800085c:	20000a40 	.word	0x20000a40
 8000860:	200002a0 	.word	0x200002a0
 8000864:	20000200 	.word	0x20000200
 8000868:	200001c8 	.word	0x200001c8

0800086c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM12_Init+0x84>)
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_TIM12_Init+0x88>)
 8000888:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 19;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM12_Init+0x84>)
 800088c:	2213      	movs	r2, #19
 800088e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_TIM12_Init+0x84>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 63999;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM12_Init+0x84>)
 8000898:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800089c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_TIM12_Init+0x84>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_TIM12_Init+0x84>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_TIM12_Init+0x84>)
 80008ac:	f003 f97a 	bl	8003ba4 <HAL_TIM_PWM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 f99f 	bl	8000bf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ba:	2360      	movs	r3, #96	; 0x60
 80008bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM12_Init+0x84>)
 80008d2:	f003 fc87 	bl	80041e4 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80008dc:	f000 f98c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM12_Init+0x84>)
 80008e2:	f000 fb1b 	bl	8000f1c <HAL_TIM_MspPostInit>

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000498 	.word	0x20000498
 80008f4:	40001800 	.word	0x40001800

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART3_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000930:	f004 f8b1 	bl	8004a96 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f95d 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200004e0 	.word	0x200004e0
 8000948:	40004800 	.word	0x40004800

0800094c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2204      	movs	r2, #4
 800095c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2202      	movs	r2, #2
 8000962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2202      	movs	r2, #2
 800096e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2201      	movs	r2, #1
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	f002 fa57 	bl	8002e42 <HAL_PCD_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f92d 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000524 	.word	0x20000524

080009a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_DMA_Init+0x3c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <MX_DMA_Init+0x3c>)
 80009b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_DMA_Init+0x3c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2105      	movs	r1, #5
 80009ce:	2038      	movs	r0, #56	; 0x38
 80009d0:	f001 f998 	bl	8001d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d4:	2038      	movs	r0, #56	; 0x38
 80009d6:	f001 f9b1 	bl	8001d3c <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a43      	ldr	r2, [pc, #268]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a3c      	ldr	r2, [pc, #240]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2181      	movs	r1, #129	; 0x81
 8000aaa:	4822      	ldr	r0, [pc, #136]	; (8000b34 <MX_GPIO_Init+0x14c>)
 8000aac:	f002 f9b0 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	4820      	ldr	r0, [pc, #128]	; (8000b38 <MX_GPIO_Init+0x150>)
 8000ab6:	f002 f9ab 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481a      	ldr	r0, [pc, #104]	; (8000b3c <MX_GPIO_Init+0x154>)
 8000ad2:	f001 ffd9 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000ad6:	2381      	movs	r3, #129	; 0x81
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_GPIO_Init+0x14c>)
 8000aee:	f001 ffcb 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <MX_GPIO_Init+0x150>)
 8000b0a:	f001 ffbd 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_GPIO_Init+0x150>)
 8000b22:	f001 ffb1 	bl	8002a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	3730      	adds	r7, #48	; 0x30
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40021800 	.word	0x40021800
 8000b3c:	40020800 	.word	0x40020800

08000b40 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <StartTask01+0x28>)
 8000b4e:	f002 f947 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	2101      	movs	r1, #1
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <StartTask01+0x2c>)
 8000b5a:	f002 f959 	bl	8002e10 <HAL_GPIO_WritePin>
    osDelay(180);
 8000b5e:	20b4      	movs	r0, #180	; 0xb4
 8000b60:	f004 fe7c 	bl	800585c <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000b64:	e7f0      	b.n	8000b48 <StartTask01+0x8>
 8000b66:	bf00      	nop
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint16_t ShmTrig_value = 2048;
 8000b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b7c:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)== GPIO_PIN_SET)
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <StartTask02+0x4c>)
 8000b82:	f002 f92d 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d103      	bne.n	8000b94 <StartTask02+0x24>
	  	  ShmTrig_value=1023;
 8000b8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000b90:	81fb      	strh	r3, [r7, #14]
 8000b92:	e002      	b.n	8000b9a <StartTask02+0x2a>
	  else
		  ShmTrig_value=3071;
 8000b94:	f640 33ff 	movw	r3, #3071	; 0xbff
 8000b98:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,adc_input >ShmTrig_value);
 8000b9a:	89fa      	ldrh	r2, [r7, #14]
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <StartTask02+0x50>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	bf34      	ite	cc
 8000ba4:	2301      	movcc	r3, #1
 8000ba6:	2300      	movcs	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <StartTask02+0x4c>)
 8000bb0:	f002 f92e 	bl	8002e10 <HAL_GPIO_WritePin>
    osDelay(100);
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f004 fe51 	bl	800585c <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)== GPIO_PIN_SET)
 8000bba:	e7e0      	b.n	8000b7e <StartTask02+0xe>
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	200001c4 	.word	0x200001c4

08000bc4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(150);
 8000bcc:	2096      	movs	r0, #150	; 0x96
 8000bce:	f004 fe45 	bl	800585c <osDelay>
 8000bd2:	e7fb      	b.n	8000bcc <StartTask03+0x8>

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 fb79 	bl	80012dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40001400 	.word	0x40001400

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_MspInit+0x54>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_MspInit+0x54>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x54>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_MspInit+0x54>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_MspInit+0x54>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_MspInit+0x54>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f001 f85b 	bl	8001d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a2f      	ldr	r2, [pc, #188]	; (8000d38 <HAL_ADC_MspInit+0xdc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d158      	bne.n	8000d30 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_ADC_MspInit+0xe0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481d      	ldr	r0, [pc, #116]	; (8000d40 <HAL_ADC_MspInit+0xe4>)
 8000cca:	f001 fedd 	bl	8002a88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <HAL_ADC_MspInit+0xec>)
 8000cd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000d08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d0c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000d16:	f001 f81f 	bl	8001d58 <HAL_DMA_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000d20:	f7ff ff6a 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000d28:	639a      	str	r2, [r3, #56]	; 0x38
 8000d2a:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_ADC_MspInit+0xe8>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40012000 	.word	0x40012000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	20000388 	.word	0x20000388
 8000d48:	40026410 	.word	0x40026410

08000d4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a55      	ldr	r2, [pc, #340]	; (8000ec0 <HAL_ETH_MspInit+0x174>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f040 80a4 	bne.w	8000eb8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000d96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000db2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a3d      	ldr	r2, [pc, #244]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a36      	ldr	r2, [pc, #216]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_ETH_MspInit+0x178>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e34:	2332      	movs	r3, #50	; 0x32
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e44:	230b      	movs	r3, #11
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <HAL_ETH_MspInit+0x17c>)
 8000e50:	f001 fe1a 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e54:	2386      	movs	r3, #134	; 0x86
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e64:	230b      	movs	r3, #11
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4817      	ldr	r0, [pc, #92]	; (8000ecc <HAL_ETH_MspInit+0x180>)
 8000e70:	f001 fe0a 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e86:	230b      	movs	r3, #11
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <HAL_ETH_MspInit+0x184>)
 8000e92:	f001 fdf9 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea8:	230b      	movs	r3, #11
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000eb4:	f001 fde8 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40028000 	.word	0x40028000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40021800 	.word	0x40021800

08000ed8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10d      	bne.n	8000f06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_TIM_PWM_MspInit+0x40>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <HAL_TIM_PWM_MspInit+0x40>)
 8000ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_TIM_PWM_MspInit+0x40>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40001800 	.word	0x40001800
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_TIM_MspPostInit+0x68>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11e      	bne.n	8000f7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_TIM_MspPostInit+0x70>)
 8000f78:	f001 fd86 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40001800 	.word	0x40001800
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12c      	bne.n	800100c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_UART_MspInit+0x8c>)
 8001008:	f001 fd3e 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40004800 	.word	0x40004800
 8001018:	40023800 	.word	0x40023800
 800101c:	40020c00 	.word	0x40020c00

08001020 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001040:	d13f      	bne.n	80010c2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_PCD_MspInit+0xac>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_PCD_MspInit+0xac>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_PCD_MspInit+0xac>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800105e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001070:	230a      	movs	r3, #10
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <HAL_PCD_MspInit+0xb0>)
 800107c:	f001 fd04 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <HAL_PCD_MspInit+0xb0>)
 8001096:	f001 fcf7 	bl	8002a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_PCD_MspInit+0xac>)
 800109c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_PCD_MspInit+0xac>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	6353      	str	r3, [r2, #52]	; 0x34
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_PCD_MspInit+0xac>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_PCD_MspInit+0xac>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_PCD_MspInit+0xac>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <HAL_InitTick+0xe4>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_InitTick+0xe4>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_InitTick+0xe4>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001100:	f107 0210 	add.w	r2, r7, #16
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fc4e 	bl	80039ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800111a:	f002 fc1f 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 800111e:	6378      	str	r0, [r7, #52]	; 0x34
 8001120:	e004      	b.n	800112c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001122:	f002 fc1b 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8001126:	4603      	mov	r3, r0
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	4a23      	ldr	r2, [pc, #140]	; (80011bc <HAL_InitTick+0xe8>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0c9b      	lsrs	r3, r3, #18
 8001136:	3b01      	subs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_InitTick+0xec>)
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_InitTick+0xf0>)
 800113e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_InitTick+0xec>)
 8001142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_InitTick+0xec>)
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_InitTick+0xec>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_InitTick+0xec>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_InitTick+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001160:	4817      	ldr	r0, [pc, #92]	; (80011c0 <HAL_InitTick+0xec>)
 8001162:	f002 fc55 	bl	8003a10 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800116c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001170:	2b00      	cmp	r3, #0
 8001172:	d11b      	bne.n	80011ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <HAL_InitTick+0xec>)
 8001176:	f002 fca5 	bl	8003ac4 <HAL_TIM_Base_Start_IT>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001180:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001184:	2b00      	cmp	r3, #0
 8001186:	d111      	bne.n	80011ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001188:	2037      	movs	r0, #55	; 0x37
 800118a:	f000 fdd7 	bl	8001d3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d808      	bhi.n	80011a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	2037      	movs	r0, #55	; 0x37
 800119a:	f000 fdb3 	bl	8001d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_InitTick+0xf4>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e002      	b.n	80011ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3738      	adds	r7, #56	; 0x38
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	20000a48 	.word	0x20000a48
 80011c4:	40001400 	.word	0x40001400
 80011c8:	20000004 	.word	0x20000004

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM7_IRQHandler+0x10>)
 80011fe:	f002 fee9 	bl	8003fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000a48 	.word	0x20000a48

0800120c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA2_Stream0_IRQHandler+0x10>)
 8001212:	f000 fea7 	bl	8001f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000388 	.word	0x20000388

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f006 ff6b 	bl	800814c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff f991 	bl	800059c <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800127c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001288:	080082b0 	.word	0x080082b0
  ldr r2, =_sbss
 800128c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001290:	200053e4 	.word	0x200053e4

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 fd14 	bl	8001cee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f7ff ff04 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fc9a 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000a90 	.word	0x20000a90

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000a90 	.word	0x20000a90

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffde 	bl	8001304 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008

08001364 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e033      	b.n	80013e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fc6a 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013aa:	f023 0302 	bic.w	r3, r3, #2
 80013ae:	f043 0202 	orr.w	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fa6e 	bl	8001898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
 80013d2:	e001      	b.n	80013d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADC_Start_DMA+0x1e>
 8001406:	2302      	movs	r3, #2
 8001408:	e0e9      	b.n	80015de <HAL_ADC_Start_DMA+0x1f2>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	d018      	beq.n	8001452 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001430:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <HAL_ADC_Start_DMA+0x1fc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6d      	ldr	r2, [pc, #436]	; (80015ec <HAL_ADC_Start_DMA+0x200>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9a      	lsrs	r2, r3, #18
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001444:	e002      	b.n	800144c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	3b01      	subs	r3, #1
 800144a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001460:	d107      	bne.n	8001472 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001470:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	f040 80a1 	bne.w	80015c4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c0:	d106      	bne.n	80014d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f023 0206 	bic.w	r2, r3, #6
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
 80014ce:	e002      	b.n	80014d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <HAL_ADC_Start_DMA+0x204>)
 80014e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	4a43      	ldr	r2, [pc, #268]	; (80015f4 <HAL_ADC_Start_DMA+0x208>)
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	4a42      	ldr	r2, [pc, #264]	; (80015f8 <HAL_ADC_Start_DMA+0x20c>)
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	4a41      	ldr	r2, [pc, #260]	; (80015fc <HAL_ADC_Start_DMA+0x210>)
 80014f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001502:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001512:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	334c      	adds	r3, #76	; 0x4c
 800152e:	4619      	mov	r1, r3
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f000 fcbe 	bl	8001eb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2b00      	cmp	r3, #0
 8001542:	d12a      	bne.n	800159a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <HAL_ADC_Start_DMA+0x214>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d015      	beq.n	800157a <HAL_ADC_Start_DMA+0x18e>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <HAL_ADC_Start_DMA+0x218>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d105      	bne.n	8001564 <HAL_ADC_Start_DMA+0x178>
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_ADC_Start_DMA+0x204>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00a      	beq.n	800157a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_ADC_Start_DMA+0x21c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d136      	bne.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_ADC_Start_DMA+0x204>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d130      	bne.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d129      	bne.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	e020      	b.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_ADC_Start_DMA+0x214>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d11b      	bne.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d114      	bne.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	e00b      	b.n	80015dc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f043 0210 	orr.w	r2, r3, #16
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	40012300 	.word	0x40012300
 80015f4:	08001a91 	.word	0x08001a91
 80015f8:	08001b4b 	.word	0x08001b4b
 80015fc:	08001b67 	.word	0x08001b67
 8001600:	40012000 	.word	0x40012000
 8001604:	40012100 	.word	0x40012100
 8001608:	40012200 	.word	0x40012200

0800160c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1c>
 800164c:	2302      	movs	r3, #2
 800164e:	e113      	b.n	8001878 <HAL_ADC_ConfigChannel+0x244>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d925      	bls.n	80016ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68d9      	ldr	r1, [r3, #12]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	3b1e      	subs	r3, #30
 8001676:	2207      	movs	r2, #7
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43da      	mvns	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68d9      	ldr	r1, [r3, #12]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	4603      	mov	r3, r0
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4403      	add	r3, r0
 800169e:	3b1e      	subs	r3, #30
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	e022      	b.n	80016f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	2207      	movs	r2, #7
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6919      	ldr	r1, [r3, #16]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4403      	add	r3, r0
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d824      	bhi.n	8001744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b05      	subs	r3, #5
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
 8001742:	e04c      	b.n	80017de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b23      	subs	r3, #35	; 0x23
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b23      	subs	r3, #35	; 0x23
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
 8001794:	e023      	b.n	80017de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b41      	subs	r3, #65	; 0x41
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	; 0x41
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_ADC_ConfigChannel+0x250>)
 80017e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a28      	ldr	r2, [pc, #160]	; (8001888 <HAL_ADC_ConfigChannel+0x254>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10f      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1d8>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	d10b      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_ADC_ConfigChannel+0x254>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d12b      	bne.n	800186e <HAL_ADC_ConfigChannel+0x23a>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	; (800188c <HAL_ADC_ConfigChannel+0x258>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d003      	beq.n	8001828 <HAL_ADC_ConfigChannel+0x1f4>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b11      	cmp	r3, #17
 8001826:	d122      	bne.n	800186e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_ADC_ConfigChannel+0x258>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d111      	bne.n	800186e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_ADC_ConfigChannel+0x25c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_ADC_ConfigChannel+0x260>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	0c9a      	lsrs	r2, r3, #18
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001860:	e002      	b.n	8001868 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3b01      	subs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40012300 	.word	0x40012300
 8001888:	40012000 	.word	0x40012000
 800188c:	10000012 	.word	0x10000012
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83

08001898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a0:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <ADC_Init+0x1f0>)
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	021a      	lsls	r2, r3, #8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6899      	ldr	r1, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <ADC_Init+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e00f      	b.n	8001996 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0202 	bic.w	r2, r2, #2
 80019a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6899      	ldr	r1, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7e1b      	ldrb	r3, [r3, #24]
 80019b0:	005a      	lsls	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	035a      	lsls	r2, r3, #13
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	e007      	b.n	8001a0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	051a      	lsls	r2, r3, #20
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4e:	025a      	lsls	r2, r3, #9
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6899      	ldr	r1, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	029a      	lsls	r2, r3, #10
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40012300 	.word	0x40012300
 8001a8c:	0f000001 	.word	0x0f000001

08001a90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d13c      	bne.n	8001b24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d12b      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d127      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d119      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0220 	bic.w	r2, r2, #32
 8001af6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7fe fd25 	bl	800056c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b22:	e00e      	b.n	8001b42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fd75 	bl	8001620 <HAL_ADC_ErrorCallback>
}
 8001b36:	e004      	b.n	8001b42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	4798      	blx	r3
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fd57 	bl	800160c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f043 0204 	orr.w	r2, r3, #4
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff fd4a 	bl	8001620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff4c 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d16:	f7ff ff61 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	6978      	ldr	r0, [r7, #20]
 8001d22:	f7ff ffb1 	bl	8001c88 <NVIC_EncodePriority>
 8001d26:	4602      	mov	r2, r0
 8001d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff80 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff54 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff face 	bl	8001304 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e099      	b.n	8001ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	e00f      	b.n	8001db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d96:	f7ff fab5 	bl	8001304 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d908      	bls.n	8001db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e078      	b.n	8001ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e8      	bne.n	8001d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_DMA_Init+0x158>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d107      	bne.n	8001e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f023 0307 	bic.w	r3, r3, #7
 8001e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d117      	bne.n	8001e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fa6f 	bl	8002340 <DMA_CheckFifoParam>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e76:	2301      	movs	r3, #1
 8001e78:	e016      	b.n	8001ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fa26 	bl	80022d4 <DMA_CalcBaseAndBitshift>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	223f      	movs	r2, #63	; 0x3f
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	f010803f 	.word	0xf010803f

08001eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_Start_IT+0x26>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e040      	b.n	8001f5c <HAL_DMA_Start_IT+0xa8>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d12f      	bne.n	8001f4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f9b8 	bl	8002278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	223f      	movs	r2, #63	; 0x3f
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0216 	orr.w	r2, r2, #22
 8001f22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e005      	b.n	8001f5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
 8001f58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f70:	4b8e      	ldr	r3, [pc, #568]	; (80021ac <HAL_DMA_IRQHandler+0x248>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a8e      	ldr	r2, [pc, #568]	; (80021b0 <HAL_DMA_IRQHandler+0x24c>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2208      	movs	r2, #8
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0204 	bic.w	r2, r2, #4
 8001fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d012      	beq.n	8002006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2204      	movs	r2, #4
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00b      	beq.n	800203c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2204      	movs	r2, #4
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2210      	movs	r2, #16
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d043      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03c      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2210      	movs	r2, #16
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d018      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d024      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
 8002092:	e01f      	b.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	e016      	b.n	80020d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0208 	bic.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2220      	movs	r2, #32
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 808f 	beq.w	8002204 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8087 	beq.w	8002204 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2220      	movs	r2, #32
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b05      	cmp	r3, #5
 800210c:	d136      	bne.n	800217c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0216 	bic.w	r2, r2, #22
 800211c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800212c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_DMA_IRQHandler+0x1da>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	223f      	movs	r2, #63	; 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d07e      	beq.n	8002270 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
        }
        return;
 800217a:	e079      	b.n	8002270 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01d      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	2b00      	cmp	r3, #0
 800219e:	d031      	beq.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e02c      	b.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000
 80021b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d023      	beq.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e01e      	b.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10f      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0210 	bic.w	r2, r2, #16
 80021e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	2b00      	cmp	r3, #0
 800220a:	d032      	beq.n	8002272 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d022      	beq.n	800225e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d307      	bcc.n	800224c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f2      	bne.n	8002230 <HAL_DMA_IRQHandler+0x2cc>
 800224a:	e000      	b.n	800224e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800224c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
 800226e:	e000      	b.n	8002272 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002270:	bf00      	nop
    }
  }
}
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d108      	bne.n	80022b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022b6:	e007      	b.n	80022c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3b10      	subs	r3, #16
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <DMA_CalcBaseAndBitshift+0x64>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <DMA_CalcBaseAndBitshift+0x68>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d909      	bls.n	8002316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	1d1a      	adds	r2, r3, #4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
 8002314:	e007      	b.n	8002326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	aaaaaaab 	.word	0xaaaaaaab
 800233c:	08008298 	.word	0x08008298

08002340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11f      	bne.n	800239a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d856      	bhi.n	800240e <DMA_CheckFifoParam+0xce>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <DMA_CheckFifoParam+0x28>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	0800238b 	.word	0x0800238b
 8002370:	08002379 	.word	0x08002379
 8002374:	0800240f 	.word	0x0800240f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d046      	beq.n	8002412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e043      	b.n	8002412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002392:	d140      	bne.n	8002416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e03d      	b.n	8002416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a2:	d121      	bne.n	80023e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d837      	bhi.n	800241a <DMA_CheckFifoParam+0xda>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x70>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023c7 	.word	0x080023c7
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	080023d9 	.word	0x080023d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e030      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d025      	beq.n	800241e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d6:	e022      	b.n	800241e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e0:	d11f      	bne.n	8002422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023e6:	e01c      	b.n	8002422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d903      	bls.n	80023f6 <DMA_CheckFifoParam+0xb6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d003      	beq.n	80023fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f4:	e018      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      break;
 80023fa:	e015      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00e      	beq.n	8002426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e00b      	b.n	8002426 <DMA_CheckFifoParam+0xe6>
      break;
 800240e:	bf00      	nop
 8002410:	e00a      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e008      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e006      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e004      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;   
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
    }
  } 
  
  return status; 
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop

08002438 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06c      	b.n	8002524 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2223      	movs	r2, #35	; 0x23
 8002458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe fc75 	bl	8000d4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_ETH_Init+0xf4>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_ETH_Init+0xf4>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_ETH_Init+0xf4>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_ETH_Init+0xf8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <HAL_ETH_Init+0xf8>)
 8002484:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002488:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <HAL_ETH_Init+0xf8>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4927      	ldr	r1, [pc, #156]	; (8002530 <HAL_ETH_Init+0xf8>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_ETH_Init+0xf8>)
 800249a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b4:	f7fe ff26 	bl	8001304 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024ba:	e011      	b.n	80024e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024bc:	f7fe ff22 	bl	8001304 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024ca:	d909      	bls.n	80024e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	22e0      	movs	r2, #224	; 0xe0
 80024d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e021      	b.n	8002524 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e4      	bne.n	80024bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f958 	bl	80027a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f9ff 	bl	80028fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa55 	bl	80029ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	2100      	movs	r1, #0
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9bd 	bl	800288c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2210      	movs	r2, #16
 800251e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800

08002534 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4b51      	ldr	r3, [pc, #324]	; (8002690 <ETH_SetMACConfig+0x15c>)
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	7c1b      	ldrb	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <ETH_SetMACConfig+0x28>
 8002556:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800255a:	e000      	b.n	800255e <ETH_SetMACConfig+0x2a>
 800255c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	7c5b      	ldrb	r3, [r3, #17]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <ETH_SetMACConfig+0x38>
 8002566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800256a:	e000      	b.n	800256e <ETH_SetMACConfig+0x3a>
 800256c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800256e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7fdb      	ldrb	r3, [r3, #31]
 800257a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800257c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002582:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	7f92      	ldrb	r2, [r2, #30]
 8002588:	2a00      	cmp	r2, #0
 800258a:	d102      	bne.n	8002592 <ETH_SetMACConfig+0x5e>
 800258c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002590:	e000      	b.n	8002594 <ETH_SetMACConfig+0x60>
 8002592:	2200      	movs	r2, #0
                        macconf->Speed |
 8002594:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7f1b      	ldrb	r3, [r3, #28]
 800259a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800259c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	791b      	ldrb	r3, [r3, #4]
 80025a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d102      	bne.n	80025bc <ETH_SetMACConfig+0x88>
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	e000      	b.n	80025be <ETH_SetMACConfig+0x8a>
 80025bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	7bdb      	ldrb	r3, [r3, #15]
 80025c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025d6:	4313      	orrs	r3, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe fe94 	bl	800131c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	f64f 7341 	movw	r3, #65345	; 0xff41
 800260a:	4013      	ands	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800261a:	2a00      	cmp	r2, #0
 800261c:	d101      	bne.n	8002622 <ETH_SetMACConfig+0xee>
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	e000      	b.n	8002624 <ETH_SetMACConfig+0xf0>
 8002622:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002624:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800262a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002632:	2a01      	cmp	r2, #1
 8002634:	d101      	bne.n	800263a <ETH_SetMACConfig+0x106>
 8002636:	2208      	movs	r2, #8
 8002638:	e000      	b.n	800263c <ETH_SetMACConfig+0x108>
 800263a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800263c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002644:	2a01      	cmp	r2, #1
 8002646:	d101      	bne.n	800264c <ETH_SetMACConfig+0x118>
 8002648:	2204      	movs	r2, #4
 800264a:	e000      	b.n	800264e <ETH_SetMACConfig+0x11a>
 800264c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800264e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002656:	2a01      	cmp	r2, #1
 8002658:	d101      	bne.n	800265e <ETH_SetMACConfig+0x12a>
 800265a:	2202      	movs	r2, #2
 800265c:	e000      	b.n	8002660 <ETH_SetMACConfig+0x12c>
 800265e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002660:	4313      	orrs	r3, r2
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002678:	2001      	movs	r0, #1
 800267a:	f7fe fe4f 	bl	800131c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	ff20810f 	.word	0xff20810f

08002694 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <ETH_SetDMAConfig+0x110>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	7b1b      	ldrb	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <ETH_SetDMAConfig+0x2c>
 80026ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026be:	e000      	b.n	80026c2 <ETH_SetDMAConfig+0x2e>
 80026c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	7b5b      	ldrb	r3, [r3, #13]
 80026c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	7f52      	ldrb	r2, [r2, #29]
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	d102      	bne.n	80026d8 <ETH_SetDMAConfig+0x44>
 80026d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026d6:	e000      	b.n	80026da <ETH_SetDMAConfig+0x46>
 80026d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	7b9b      	ldrb	r3, [r3, #14]
 80026e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	7f1b      	ldrb	r3, [r3, #28]
 80026ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7f9b      	ldrb	r3, [r3, #30]
 80026f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002706:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002708:	4313      	orrs	r3, r2
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800272a:	2001      	movs	r0, #1
 800272c:	f7fe fdf6 	bl	800131c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	791b      	ldrb	r3, [r3, #4]
 8002742:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002748:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800274e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002754:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800275c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800275e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002766:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800276c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800277a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002788:	2001      	movs	r0, #1
 800278a:	f7fe fdc7 	bl	800131c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f8de3f23 	.word	0xf8de3f23

080027a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0a6      	sub	sp, #152	; 0x98
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027bc:	2300      	movs	r3, #0
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027e4:	2300      	movs	r3, #0
 80027e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800280a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002814:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800281c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fe86 	bl	8002534 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002836:	2301      	movs	r3, #1
 8002838:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800285c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800285e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002862:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002868:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	4619      	mov	r1, r3
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ff08 	bl	8002694 <ETH_SetDMAConfig>
}
 8002884:	bf00      	nop
 8002886:	3798      	adds	r7, #152	; 0x98
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3305      	adds	r3, #5
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	3204      	adds	r2, #4
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <ETH_MACAddressConfig+0x68>)
 80028ae:	4413      	add	r3, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3303      	adds	r3, #3
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	061a      	lsls	r2, r3, #24
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3302      	adds	r3, #2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3301      	adds	r3, #1
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4313      	orrs	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <ETH_MACAddressConfig+0x6c>)
 80028de:	4413      	add	r3, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	6013      	str	r3, [r2, #0]
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40028040 	.word	0x40028040
 80028f8:	40028044 	.word	0x40028044

080028fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e03e      	b.n	8002988 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68d9      	ldr	r1, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	3206      	adds	r2, #6
 800293c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d80c      	bhi.n	800296c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	e004      	b.n	8002976 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d9bd      	bls.n	800290a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a0:	611a      	str	r2, [r3, #16]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e046      	b.n	8002a4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6919      	ldr	r1, [r3, #16]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	3212      	adds	r2, #18
 8002a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d80c      	bhi.n	8002a3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	e004      	b.n	8002a44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d9b5      	bls.n	80029bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7a:	60da      	str	r2, [r3, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e177      	b.n	8002d94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 8166 	bne.w	8002d8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d005      	beq.n	8002ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d130      	bne.n	8002b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d017      	beq.n	8002b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d123      	bne.n	8002bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80c0 	beq.w	8002d8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b66      	ldr	r3, [pc, #408]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a65      	ldr	r2, [pc, #404]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_GPIO_Init+0x324>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a61      	ldr	r2, [pc, #388]	; (8002db0 <HAL_GPIO_Init+0x328>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <HAL_GPIO_Init+0x32c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d037      	beq.n	8002cc6 <HAL_GPIO_Init+0x23e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a57      	ldr	r2, [pc, #348]	; (8002db8 <HAL_GPIO_Init+0x330>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d031      	beq.n	8002cc2 <HAL_GPIO_Init+0x23a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a56      	ldr	r2, [pc, #344]	; (8002dbc <HAL_GPIO_Init+0x334>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02b      	beq.n	8002cbe <HAL_GPIO_Init+0x236>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a55      	ldr	r2, [pc, #340]	; (8002dc0 <HAL_GPIO_Init+0x338>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x232>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a54      	ldr	r2, [pc, #336]	; (8002dc4 <HAL_GPIO_Init+0x33c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x22e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a53      	ldr	r2, [pc, #332]	; (8002dc8 <HAL_GPIO_Init+0x340>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x22a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_GPIO_Init+0x344>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x226>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a51      	ldr	r2, [pc, #324]	; (8002dd0 <HAL_GPIO_Init+0x348>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x222>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a50      	ldr	r2, [pc, #320]	; (8002dd4 <HAL_GPIO_Init+0x34c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x21e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4f      	ldr	r2, [pc, #316]	; (8002dd8 <HAL_GPIO_Init+0x350>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x21a>
 8002c9e:	2309      	movs	r3, #9
 8002ca0:	e012      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002ca2:	230a      	movs	r3, #10
 8002ca4:	e010      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	e00e      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e00c      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cae:	2306      	movs	r3, #6
 8002cb0:	e00a      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x240>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f002 0203 	and.w	r2, r2, #3
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd8:	4935      	ldr	r1, [pc, #212]	; (8002db0 <HAL_GPIO_Init+0x328>)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0a:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <HAL_GPIO_Init+0x354>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	f67f ae84 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40013800 	.word	0x40013800
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	40020c00 	.word	0x40020c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40021400 	.word	0x40021400
 8002dcc:	40021800 	.word	0x40021800
 8002dd0:	40021c00 	.word	0x40021c00
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40022400 	.word	0x40022400
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e44:	b08f      	sub	sp, #60	; 0x3c
 8002e46:	af0a      	add	r7, sp, #40	; 0x28
 8002e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e10f      	b.n	8003074 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe f8d6 	bl	8001020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2203      	movs	r2, #3
 8002e78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 f921 	bl	80050da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	687e      	ldr	r6, [r7, #4]
 8002ea0:	466d      	mov	r5, sp
 8002ea2:	f106 0410 	add.w	r4, r6, #16
 8002ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb6:	1d33      	adds	r3, r6, #4
 8002eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f002 f8ac 	bl	8005018 <USB_CoreInit>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0d0      	b.n	8003074 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 f90f 	bl	80050fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e04a      	b.n	8002f7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	333d      	adds	r3, #61	; 0x3d
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	333c      	adds	r3, #60	; 0x3c
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	b298      	uxth	r0, r3
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3344      	adds	r3, #68	; 0x44
 8002f20:	4602      	mov	r2, r0
 8002f22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3340      	adds	r3, #64	; 0x40
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3348      	adds	r3, #72	; 0x48
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	334c      	adds	r3, #76	; 0x4c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3354      	adds	r3, #84	; 0x54
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	3301      	adds	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3af      	bcc.n	8002ee4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e044      	b.n	8003014 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3301      	adds	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d3b5      	bcc.n	8002f8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	687e      	ldr	r6, [r7, #4]
 8003026:	466d      	mov	r5, sp
 8003028:	f106 0410 	add.w	r4, r6, #16
 800302c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003038:	e885 0003 	stmia.w	r5, {r0, r1}
 800303c:	1d33      	adds	r3, r6, #4
 800303e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f002 f8a7 	bl	8005194 <USB_DevInit>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e00d      	b.n	8003074 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fa72 	bl	8005556 <USB_DevDisconnect>

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800307c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e267      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d075      	beq.n	8003186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d00c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b85      	ldr	r3, [pc, #532]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d112      	bne.n	80030d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b82      	ldr	r3, [pc, #520]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030be:	d10b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05b      	beq.n	8003184 <HAL_RCC_OscConfig+0x108>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d157      	bne.n	8003184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e242      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d106      	bne.n	80030f0 <HAL_RCC_OscConfig+0x74>
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a75      	ldr	r2, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0xb0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x98>
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6f      	ldr	r2, [pc, #444]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6c      	ldr	r2, [pc, #432]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0xb0>
 8003114:	4b69      	ldr	r3, [pc, #420]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a68      	ldr	r2, [pc, #416]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a65      	ldr	r2, [pc, #404]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe f8e6 	bl	8001304 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe f8e2 	bl	8001304 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e207      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b5b      	ldr	r3, [pc, #364]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0xc0>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe f8d2 	bl	8001304 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe f8ce 	bl	8001304 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1f3      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0xe8>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d063      	beq.n	800325a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003192:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d11c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x152>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e1c7      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4937      	ldr	r1, [pc, #220]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	e03a      	b.n	800325a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCC_OscConfig+0x244>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe f887 	bl	8001304 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031fa:	f7fe f883 	bl	8001304 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1a8      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4925      	ldr	r1, [pc, #148]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x244>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe f866 	bl	8001304 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323c:	f7fe f862 	bl	8001304 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e187      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d036      	beq.n	80032d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_RCC_OscConfig+0x248>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fe f846 	bl	8001304 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327c:	f7fe f842 	bl	8001304 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e167      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_OscConfig+0x240>)
 8003290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x200>
 800329a:	e01b      	b.n	80032d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_OscConfig+0x248>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe f82f 	bl	8001304 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	e00e      	b.n	80032c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fe f82b 	bl	8001304 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d907      	bls.n	80032c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e150      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	42470000 	.word	0x42470000
 80032c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ea      	bne.n	80032aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8097 	beq.w	8003410 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e6:	4b81      	ldr	r3, [pc, #516]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b7d      	ldr	r3, [pc, #500]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b7a      	ldr	r3, [pc, #488]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b77      	ldr	r3, [pc, #476]	; (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331e:	4b74      	ldr	r3, [pc, #464]	; (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a73      	ldr	r2, [pc, #460]	; (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fd ffeb 	bl	8001304 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7fd ffe7 	bl	8001304 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e10c      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x474>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x2ea>
 8003358:	4b64      	ldr	r3, [pc, #400]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a63      	ldr	r2, [pc, #396]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	e01c      	b.n	80033a0 <HAL_RCC_OscConfig+0x324>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b05      	cmp	r3, #5
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x30c>
 800336e:	4b5f      	ldr	r3, [pc, #380]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a5e      	ldr	r2, [pc, #376]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003374:	f043 0304 	orr.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	4b5c      	ldr	r3, [pc, #368]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a5b      	ldr	r2, [pc, #364]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0x324>
 8003388:	4b58      	ldr	r3, [pc, #352]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a57      	ldr	r2, [pc, #348]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	4b55      	ldr	r3, [pc, #340]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a54      	ldr	r2, [pc, #336]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0304 	bic.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fd ffac 	bl	8001304 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fd ffa8 	bl	8001304 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0cb      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	4b49      	ldr	r3, [pc, #292]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0ee      	beq.n	80033b0 <HAL_RCC_OscConfig+0x334>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d4:	f7fd ff96 	bl	8001304 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fd ff92 	bl	8001304 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0b5      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ee      	bne.n	80033dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003404:	4b39      	ldr	r3, [pc, #228]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	4a38      	ldr	r2, [pc, #224]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a1 	beq.w	800355c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	d05c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d141      	bne.n	80034b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_RCC_OscConfig+0x478>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd ff66 	bl	8001304 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd ff62 	bl	8001304 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e087      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	3b01      	subs	r3, #1
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	491b      	ldr	r1, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x478>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd ff3b 	bl	8001304 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003492:	f7fd ff37 	bl	8001304 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e05c      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x416>
 80034b0:	e054      	b.n	800355c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_RCC_OscConfig+0x478>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fd ff24 	bl	8001304 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fd ff20 	bl	8001304 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e045      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_OscConfig+0x470>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x444>
 80034de:	e03d      	b.n	800355c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e038      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000
 80034f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x4ec>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d028      	beq.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d121      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d11a      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800352e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0cc      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b68      	ldr	r3, [pc, #416]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d90c      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b65      	ldr	r3, [pc, #404]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b8      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c0:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	494d      	ldr	r1, [pc, #308]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d044      	beq.n	800368c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d119      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07f      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d003      	beq.n	800362a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	2b03      	cmp	r3, #3
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06f      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363a:	4b3b      	ldr	r3, [pc, #236]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e067      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4934      	ldr	r1, [pc, #208]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365c:	f7fd fe52 	bl	8001304 <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fd fe4e 	bl	8001304 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e04f      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368c:	4b25      	ldr	r3, [pc, #148]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d20c      	bcs.n	80036b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e032      	b.n	800371a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4916      	ldr	r1, [pc, #88]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	490e      	ldr	r1, [pc, #56]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036f2:	f000 f821 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	490a      	ldr	r1, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	5ccb      	ldrb	r3, [r1, r3]
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fcde 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023c00 	.word	0x40023c00
 8003728:	40023800 	.word	0x40023800
 800372c:	08008280 	.word	0x08008280
 8003730:	20000000 	.word	0x20000000
 8003734:	20000004 	.word	0x20000004

08003738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	b094      	sub	sp, #80	; 0x50
 800373e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	647b      	str	r3, [r7, #68]	; 0x44
 8003744:	2300      	movs	r3, #0
 8003746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003748:	2300      	movs	r3, #0
 800374a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d00d      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x40>
 800375c:	2b08      	cmp	r3, #8
 800375e:	f200 80e1 	bhi.w	8003924 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x34>
 8003766:	2b04      	cmp	r3, #4
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0x3a>
 800376a:	e0db      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_GetSysClockFreq+0x204>)
 800376e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003770:	e0db      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003772:	4b73      	ldr	r3, [pc, #460]	; (8003940 <HAL_RCC_GetSysClockFreq+0x208>)
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003776:	e0d8      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003778:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003780:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003782:	4b6d      	ldr	r3, [pc, #436]	; (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d063      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	2200      	movs	r2, #0
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
 8003798:	63fa      	str	r2, [r7, #60]	; 0x3c
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
 80037a2:	2300      	movs	r3, #0
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
 80037a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037aa:	4622      	mov	r2, r4
 80037ac:	462b      	mov	r3, r5
 80037ae:	f04f 0000 	mov.w	r0, #0
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	0159      	lsls	r1, r3, #5
 80037b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037bc:	0150      	lsls	r0, r2, #5
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4621      	mov	r1, r4
 80037c4:	1a51      	subs	r1, r2, r1
 80037c6:	6139      	str	r1, [r7, #16]
 80037c8:	4629      	mov	r1, r5
 80037ca:	eb63 0301 	sbc.w	r3, r3, r1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037dc:	4659      	mov	r1, fp
 80037de:	018b      	lsls	r3, r1, #6
 80037e0:	4651      	mov	r1, sl
 80037e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e6:	4651      	mov	r1, sl
 80037e8:	018a      	lsls	r2, r1, #6
 80037ea:	4651      	mov	r1, sl
 80037ec:	ebb2 0801 	subs.w	r8, r2, r1
 80037f0:	4659      	mov	r1, fp
 80037f2:	eb63 0901 	sbc.w	r9, r3, r1
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380a:	4690      	mov	r8, r2
 800380c:	4699      	mov	r9, r3
 800380e:	4623      	mov	r3, r4
 8003810:	eb18 0303 	adds.w	r3, r8, r3
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	462b      	mov	r3, r5
 8003818:	eb49 0303 	adc.w	r3, r9, r3
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800382a:	4629      	mov	r1, r5
 800382c:	024b      	lsls	r3, r1, #9
 800382e:	4621      	mov	r1, r4
 8003830:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003834:	4621      	mov	r1, r4
 8003836:	024a      	lsls	r2, r1, #9
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
 8003842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003848:	f7fc fcd2 	bl	80001f0 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	e058      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b38      	ldr	r3, [pc, #224]	; (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	2200      	movs	r2, #0
 800385e:	4618      	mov	r0, r3
 8003860:	4611      	mov	r1, r2
 8003862:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	2300      	movs	r3, #0
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	0159      	lsls	r1, r3, #5
 800387e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003882:	0150      	lsls	r0, r2, #5
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4641      	mov	r1, r8
 800388a:	ebb2 0a01 	subs.w	sl, r2, r1
 800388e:	4649      	mov	r1, r9
 8003890:	eb63 0b01 	sbc.w	fp, r3, r1
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038a8:	ebb2 040a 	subs.w	r4, r2, sl
 80038ac:	eb63 050b 	sbc.w	r5, r3, fp
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	00eb      	lsls	r3, r5, #3
 80038ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038be:	00e2      	lsls	r2, r4, #3
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	18e3      	adds	r3, r4, r3
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	464b      	mov	r3, r9
 80038cc:	eb45 0303 	adc.w	r3, r5, r3
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038de:	4629      	mov	r1, r5
 80038e0:	028b      	lsls	r3, r1, #10
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e8:	4621      	mov	r1, r4
 80038ea:	028a      	lsls	r2, r1, #10
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f2:	2200      	movs	r2, #0
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	61fa      	str	r2, [r7, #28]
 80038f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fc:	f7fc fc78 	bl	80001f0 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_GetSysClockFreq+0x200>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800391a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003922:	e002      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetSysClockFreq+0x204>)
 8003926:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800392c:	4618      	mov	r0, r3
 800392e:	3750      	adds	r7, #80	; 0x50
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	00f42400 	.word	0x00f42400
 8003940:	007a1200 	.word	0x007a1200

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a9b      	lsrs	r3, r3, #10
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	; (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	08008290 	.word	0x08008290

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003988:	f7ff ffdc 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0b5b      	lsrs	r3, r3, #13
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08008290 	.word	0x08008290

080039ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	220f      	movs	r2, #15
 80039ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_RCC_GetClockConfig+0x60>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40023c00 	.word	0x40023c00

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f839 	bl	8003aae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fd98 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d001      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04e      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <HAL_TIM_Base_Start_IT+0xc4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d022      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d01d      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <HAL_TIM_Base_Start_IT+0xc8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d111      	bne.n	8003b68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d010      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e007      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40001800 	.word	0x40001800

08003ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e041      	b.n	8003c3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f984 	bl	8000ed8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f000 fcce 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e022      	b.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d109      	bne.n	8003c8a <HAL_TIM_PWM_Start_DMA+0x46>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	bf0c      	ite	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	2300      	movne	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e015      	b.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d109      	bne.n	8003ca4 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e008      	b.n	8003cb6 <HAL_TIM_PWM_Start_DMA+0x72>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e171      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_TIM_PWM_Start_DMA+0x94>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e022      	b.n	8003d1e <HAL_TIM_PWM_Start_DMA+0xda>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d109      	bne.n	8003cf2 <HAL_TIM_PWM_Start_DMA+0xae>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	e015      	b.n	8003d1e <HAL_TIM_PWM_Start_DMA+0xda>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e008      	b.n	8003d1e <HAL_TIM_PWM_Start_DMA+0xda>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d024      	beq.n	8003d6c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start_DMA+0xee>
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e137      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	e016      	b.n	8003d70 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	e00e      	b.n	8003d70 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	e006      	b.n	8003d70 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6a:	e001      	b.n	8003d70 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e118      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	f200 80ae 	bhi.w	8003ed4 <HAL_TIM_PWM_Start_DMA+0x290>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003db5 	.word	0x08003db5
 8003d84:	08003ed5 	.word	0x08003ed5
 8003d88:	08003ed5 	.word	0x08003ed5
 8003d8c:	08003ed5 	.word	0x08003ed5
 8003d90:	08003dfd 	.word	0x08003dfd
 8003d94:	08003ed5 	.word	0x08003ed5
 8003d98:	08003ed5 	.word	0x08003ed5
 8003d9c:	08003ed5 	.word	0x08003ed5
 8003da0:	08003e45 	.word	0x08003e45
 8003da4:	08003ed5 	.word	0x08003ed5
 8003da8:	08003ed5 	.word	0x08003ed5
 8003dac:	08003ed5 	.word	0x08003ed5
 8003db0:	08003e8d 	.word	0x08003e8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <HAL_TIM_PWM_Start_DMA+0x368>)
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	4a7b      	ldr	r2, [pc, #492]	; (8003fb0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	4a7a      	ldr	r2, [pc, #488]	; (8003fb4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003dca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3334      	adds	r3, #52	; 0x34
 8003dd8:	461a      	mov	r2, r3
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	f7fe f86a 	bl	8001eb4 <HAL_DMA_Start_IT>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0db      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df8:	60da      	str	r2, [r3, #12]
      break;
 8003dfa:	e06e      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	4a6a      	ldr	r2, [pc, #424]	; (8003fac <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	4a69      	ldr	r2, [pc, #420]	; (8003fb0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	4a68      	ldr	r2, [pc, #416]	; (8003fb4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3338      	adds	r3, #56	; 0x38
 8003e20:	461a      	mov	r2, r3
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	f7fe f846 	bl	8001eb4 <HAL_DMA_Start_IT>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0b7      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e40:	60da      	str	r2, [r3, #12]
      break;
 8003e42:	e04a      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a58      	ldr	r2, [pc, #352]	; (8003fac <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a56      	ldr	r2, [pc, #344]	; (8003fb4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	333c      	adds	r3, #60	; 0x3c
 8003e68:	461a      	mov	r2, r3
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	f7fe f822 	bl	8001eb4 <HAL_DMA_Start_IT>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e093      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e88:	60da      	str	r2, [r3, #12]
      break;
 8003e8a:	e026      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4a46      	ldr	r2, [pc, #280]	; (8003fac <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a45      	ldr	r2, [pc, #276]	; (8003fb0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a44      	ldr	r2, [pc, #272]	; (8003fb4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ea2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3340      	adds	r3, #64	; 0x40
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	f7fd fffe 	bl	8001eb4 <HAL_DMA_Start_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06f      	b.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ed0:	60da      	str	r2, [r3, #12]
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d15f      	bne.n	8003fa0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fd9b 	bl	8004a24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2f      	ldr	r2, [pc, #188]	; (8003fbc <HAL_TIM_PWM_Start_DMA+0x378>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d01d      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_TIM_PWM_Start_DMA+0x378>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_TIM_PWM_Start_DMA+0x388>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_PWM_Start_DMA+0x328>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d010      	beq.n	8003fa0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	e007      	b.n	8003fa0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	08004473 	.word	0x08004473
 8003fb0:	0800451b 	.word	0x0800451b
 8003fb4:	080043e1 	.word	0x080043e1
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0202 	mvn.w	r2, #2
 8004000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9b0 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9a2 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9b3 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0204 	mvn.w	r2, #4
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f986 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f978 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f989 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b08      	cmp	r3, #8
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0208 	mvn.w	r2, #8
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f95c 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f94e 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f95f 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0210 	mvn.w	r2, #16
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2208      	movs	r2, #8
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f932 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f924 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f935 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0201 	mvn.w	r2, #1
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fd3e 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fc7f 	bl	8004a82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f904 	bl	80043b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0220 	mvn.w	r2, #32
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fc49 	bl	8004a6e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e0ae      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	f200 809f 	bhi.w	8004350 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800424d 	.word	0x0800424d
 800421c:	08004351 	.word	0x08004351
 8004220:	08004351 	.word	0x08004351
 8004224:	08004351 	.word	0x08004351
 8004228:	0800428d 	.word	0x0800428d
 800422c:	08004351 	.word	0x08004351
 8004230:	08004351 	.word	0x08004351
 8004234:	08004351 	.word	0x08004351
 8004238:	080042cf 	.word	0x080042cf
 800423c:	08004351 	.word	0x08004351
 8004240:	08004351 	.word	0x08004351
 8004244:	08004351 	.word	0x08004351
 8004248:	0800430f 	.word	0x0800430f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fa36 	bl	80046c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0204 	bic.w	r2, r2, #4
 8004276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6999      	ldr	r1, [r3, #24]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	619a      	str	r2, [r3, #24]
      break;
 800428a:	e064      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fa86 	bl	80047a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	619a      	str	r2, [r3, #24]
      break;
 80042cc:	e043      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fadb 	bl	8004890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0208 	orr.w	r2, r2, #8
 80042e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0204 	bic.w	r2, r2, #4
 80042f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69d9      	ldr	r1, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	61da      	str	r2, [r3, #28]
      break;
 800430c:	e023      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fb2f 	bl	8004978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	021a      	lsls	r2, r3, #8
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	61da      	str	r2, [r3, #28]
      break;
 800434e:	e002      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	75fb      	strb	r3, [r7, #23]
      break;
 8004354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d107      	bne.n	8004408 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004406:	e02a      	b.n	800445e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d107      	bne.n	8004422 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2202      	movs	r2, #2
 8004416:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004420:	e01d      	b.n	800445e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d107      	bne.n	800443c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2204      	movs	r2, #4
 8004430:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443a:	e010      	b.n	800445e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d107      	bne.n	8004456 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2208      	movs	r2, #8
 800444a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004454:	e003      	b.n	800445e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff ffb4 	bl	80043cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	771a      	strb	r2, [r3, #28]
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d10b      	bne.n	80044a2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d136      	bne.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	e031      	b.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d10b      	bne.n	80044c4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2202      	movs	r2, #2
 80044b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d125      	bne.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c2:	e020      	b.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d10b      	bne.n	80044e6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d114      	bne.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e4:	e00f      	b.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d10a      	bne.n	8004506 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2208      	movs	r2, #8
 80044f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d103      	bne.n	8004506 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff42 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d103      	bne.n	800453a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	771a      	strb	r2, [r3, #28]
 8004538:	e019      	b.n	800456e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d103      	bne.n	800454c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2202      	movs	r2, #2
 8004548:	771a      	strb	r2, [r3, #28]
 800454a:	e010      	b.n	800456e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d103      	bne.n	800455e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2204      	movs	r2, #4
 800455a:	771a      	strb	r2, [r3, #28]
 800455c:	e007      	b.n	800456e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d102      	bne.n	800456e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2208      	movs	r2, #8
 800456c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff ff18 	bl	80043a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	771a      	strb	r2, [r3, #28]
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a40      	ldr	r2, [pc, #256]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <TIM_Base_SetConfig+0x114>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d027      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d023      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d017      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <TIM_Base_SetConfig+0x128>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <TIM_Base_SetConfig+0x134>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <TIM_Base_SetConfig+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <TIM_Base_SetConfig+0x13c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d103      	bne.n	8004684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	615a      	str	r2, [r3, #20]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	40001800 	.word	0x40001800
 80046bc:	40001c00 	.word	0x40001c00
 80046c0:	40002000 	.word	0x40002000

080046c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 0302 	bic.w	r3, r3, #2
 800470c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a20      	ldr	r2, [pc, #128]	; (800479c <TIM_OC1_SetConfig+0xd8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d003      	beq.n	8004728 <TIM_OC1_SetConfig+0x64>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <TIM_OC1_SetConfig+0xdc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10c      	bne.n	8004742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0308 	bic.w	r3, r3, #8
 800472e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a15      	ldr	r2, [pc, #84]	; (800479c <TIM_OC1_SetConfig+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC1_SetConfig+0x8e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <TIM_OC1_SetConfig+0xdc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d111      	bne.n	8004776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400

080047a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0210 	bic.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f023 0320 	bic.w	r3, r3, #32
 80047ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a22      	ldr	r2, [pc, #136]	; (8004888 <TIM_OC2_SetConfig+0xe4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_OC2_SetConfig+0x68>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <TIM_OC2_SetConfig+0xe8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10d      	bne.n	8004828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a17      	ldr	r2, [pc, #92]	; (8004888 <TIM_OC2_SetConfig+0xe4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_OC2_SetConfig+0x94>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a16      	ldr	r2, [pc, #88]	; (800488c <TIM_OC2_SetConfig+0xe8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d113      	bne.n	8004860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40010400 	.word	0x40010400

08004890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <TIM_OC3_SetConfig+0xe0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <TIM_OC3_SetConfig+0x66>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a20      	ldr	r2, [pc, #128]	; (8004974 <TIM_OC3_SetConfig+0xe4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10d      	bne.n	8004912 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a16      	ldr	r2, [pc, #88]	; (8004970 <TIM_OC3_SetConfig+0xe0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_OC3_SetConfig+0x92>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <TIM_OC3_SetConfig+0xe4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d113      	bne.n	800494a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	621a      	str	r2, [r3, #32]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40010000 	.word	0x40010000
 8004974:	40010400 	.word	0x40010400

08004978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	031b      	lsls	r3, r3, #12
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <TIM_OC4_SetConfig+0xa4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC4_SetConfig+0x68>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <TIM_OC4_SetConfig+0xa8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d109      	bne.n	80049f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400

08004a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2201      	movs	r2, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e03f      	b.n	8004b28 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fc fa67 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2224      	movs	r2, #36	; 0x24
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f828 	bl	8004b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b0c0      	sub	sp, #256	; 0x100
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	68d9      	ldr	r1, [r3, #12]
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	ea40 0301 	orr.w	r3, r0, r1
 8004b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b88:	f021 010c 	bic.w	r1, r1, #12
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b96:	430b      	orrs	r3, r1
 8004b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	6999      	ldr	r1, [r3, #24]
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	ea40 0301 	orr.w	r3, r0, r1
 8004bb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b8f      	ldr	r3, [pc, #572]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d005      	beq.n	8004bd0 <UART_SetConfig+0xa0>
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b8d      	ldr	r3, [pc, #564]	; (8004e00 <UART_SetConfig+0x2d0>)
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d104      	bne.n	8004bda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bd0:	f7fe fed8 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8004bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bd8:	e003      	b.n	8004be2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fe febf 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004bde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bec:	f040 810c 	bne.w	8004e08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	1891      	adds	r1, r2, r2
 8004c08:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c0a:	415b      	adcs	r3, r3
 8004c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c12:	4621      	mov	r1, r4
 8004c14:	eb12 0801 	adds.w	r8, r2, r1
 8004c18:	4629      	mov	r1, r5
 8004c1a:	eb43 0901 	adc.w	r9, r3, r1
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c32:	4690      	mov	r8, r2
 8004c34:	4699      	mov	r9, r3
 8004c36:	4623      	mov	r3, r4
 8004c38:	eb18 0303 	adds.w	r3, r8, r3
 8004c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c40:	462b      	mov	r3, r5
 8004c42:	eb49 0303 	adc.w	r3, r9, r3
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c5e:	460b      	mov	r3, r1
 8004c60:	18db      	adds	r3, r3, r3
 8004c62:	653b      	str	r3, [r7, #80]	; 0x50
 8004c64:	4613      	mov	r3, r2
 8004c66:	eb42 0303 	adc.w	r3, r2, r3
 8004c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c74:	f7fb fabc 	bl	80001f0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	011c      	lsls	r4, r3, #4
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	1891      	adds	r1, r2, r2
 8004c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ca0:	415b      	adcs	r3, r3
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ca8:	4641      	mov	r1, r8
 8004caa:	eb12 0a01 	adds.w	sl, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc8:	4692      	mov	sl, r2
 8004cca:	469b      	mov	fp, r3
 8004ccc:	4643      	mov	r3, r8
 8004cce:	eb1a 0303 	adds.w	r3, sl, r3
 8004cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	18db      	adds	r3, r3, r3
 8004cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
 8004d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d0a:	f7fb fa71 	bl	80001f0 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004d16:	fba3 2301 	umull	r2, r3, r3, r1
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2264      	movs	r2, #100	; 0x64
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	1acb      	subs	r3, r1, r3
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d38:	441c      	add	r4, r3
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d54:	415b      	adcs	r3, r3
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	1851      	adds	r1, r2, r1
 8004d60:	6339      	str	r1, [r7, #48]	; 0x30
 8004d62:	4649      	mov	r1, r9
 8004d64:	414b      	adcs	r3, r1
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d74:	4659      	mov	r1, fp
 8004d76:	00cb      	lsls	r3, r1, #3
 8004d78:	4651      	mov	r1, sl
 8004d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7e:	4651      	mov	r1, sl
 8004d80:	00ca      	lsls	r2, r1, #3
 8004d82:	4610      	mov	r0, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	4642      	mov	r2, r8
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d90:	464b      	mov	r3, r9
 8004d92:	460a      	mov	r2, r1
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004da8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004db0:	460b      	mov	r3, r1
 8004db2:	18db      	adds	r3, r3, r3
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db6:	4613      	mov	r3, r2
 8004db8:	eb42 0303 	adc.w	r3, r2, r3
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dc6:	f7fb fa13 	bl	80001f0 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	; 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	3332      	adds	r3, #50	; 0x32
 8004de2:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <UART_SetConfig+0x2d4>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f003 0207 	and.w	r2, r3, #7
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4422      	add	r2, r4
 8004df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004df8:	e105      	b.n	8005006 <UART_SetConfig+0x4d6>
 8004dfa:	bf00      	nop
 8004dfc:	40011000 	.word	0x40011000
 8004e00:	40011400 	.word	0x40011400
 8004e04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	1891      	adds	r1, r2, r2
 8004e20:	6239      	str	r1, [r7, #32]
 8004e22:	415b      	adcs	r3, r3
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	1854      	adds	r4, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb43 0501 	adc.w	r5, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	00eb      	lsls	r3, r5, #3
 8004e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e42:	00e2      	lsls	r2, r4, #3
 8004e44:	4614      	mov	r4, r2
 8004e46:	461d      	mov	r5, r3
 8004e48:	4643      	mov	r3, r8
 8004e4a:	18e3      	adds	r3, r4, r3
 8004e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e50:	464b      	mov	r3, r9
 8004e52:	eb45 0303 	adc.w	r3, r5, r3
 8004e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e76:	4629      	mov	r1, r5
 8004e78:	008b      	lsls	r3, r1, #2
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e80:	4621      	mov	r1, r4
 8004e82:	008a      	lsls	r2, r1, #2
 8004e84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e88:	f7fb f9b2 	bl	80001f0 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4b60      	ldr	r3, [pc, #384]	; (8005014 <UART_SetConfig+0x4e4>)
 8004e92:	fba3 2302 	umull	r2, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	011c      	lsls	r4, r3, #4
 8004e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ea4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	1891      	adds	r1, r2, r2
 8004eb2:	61b9      	str	r1, [r7, #24]
 8004eb4:	415b      	adcs	r3, r3
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	1851      	adds	r1, r2, r1
 8004ec0:	6139      	str	r1, [r7, #16]
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	414b      	adcs	r3, r1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	00cb      	lsls	r3, r1, #3
 8004ed8:	4651      	mov	r1, sl
 8004eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ede:	4651      	mov	r1, sl
 8004ee0:	00ca      	lsls	r2, r1, #3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4642      	mov	r2, r8
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f14:	4649      	mov	r1, r9
 8004f16:	008b      	lsls	r3, r1, #2
 8004f18:	4641      	mov	r1, r8
 8004f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f1e:	4641      	mov	r1, r8
 8004f20:	008a      	lsls	r2, r1, #2
 8004f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f26:	f7fb f963 	bl	80001f0 <__aeabi_uldivmod>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4b39      	ldr	r3, [pc, #228]	; (8005014 <UART_SetConfig+0x4e4>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	; 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	3332      	adds	r3, #50	; 0x32
 8004f42:	4a34      	ldr	r2, [pc, #208]	; (8005014 <UART_SetConfig+0x4e4>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4e:	441c      	add	r4, r3
 8004f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f54:	2200      	movs	r2, #0
 8004f56:	673b      	str	r3, [r7, #112]	; 0x70
 8004f58:	677a      	str	r2, [r7, #116]	; 0x74
 8004f5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f5e:	4642      	mov	r2, r8
 8004f60:	464b      	mov	r3, r9
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	415b      	adcs	r3, r3
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6e:	4641      	mov	r1, r8
 8004f70:	1851      	adds	r1, r2, r1
 8004f72:	6039      	str	r1, [r7, #0]
 8004f74:	4649      	mov	r1, r9
 8004f76:	414b      	adcs	r3, r1
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f86:	4659      	mov	r1, fp
 8004f88:	00cb      	lsls	r3, r1, #3
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f90:	4651      	mov	r1, sl
 8004f92:	00ca      	lsls	r2, r1, #3
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	eb42 0303 	adc.w	r3, r2, r3
 8004fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	008b      	lsls	r3, r1, #2
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fcc:	4641      	mov	r1, r8
 8004fce:	008a      	lsls	r2, r1, #2
 8004fd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fd4:	f7fb f90c 	bl	80001f0 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <UART_SetConfig+0x4e4>)
 8004fde:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2164      	movs	r1, #100	; 0x64
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	4a08      	ldr	r2, [pc, #32]	; (8005014 <UART_SetConfig+0x4e4>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4422      	add	r2, r4
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	bf00      	nop
 8005008:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800500c:	46bd      	mov	sp, r7
 800500e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005012:	bf00      	nop
 8005014:	51eb851f 	.word	0x51eb851f

08005018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005018:	b084      	sub	sp, #16
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	f107 001c 	add.w	r0, r7, #28
 8005026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b01      	cmp	r3, #1
 800502e:	d122      	bne.n	8005076 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 faa2 	bl	80055b4 <USB_CoreReset>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e01a      	b.n	80050ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa96 	bl	80055b4 <USB_CoreReset>
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800508c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
 800509e:	e005      	b.n	80050ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10b      	bne.n	80050ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f043 0206 	orr.w	r2, r3, #6
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050d6:	b004      	add	sp, #16
 80050d8:	4770      	bx	lr

080050da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f023 0201 	bic.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d115      	bne.n	800514a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800512a:	2001      	movs	r0, #1
 800512c:	f7fc f8f6 	bl	800131c <HAL_Delay>
      ms++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3301      	adds	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa2e 	bl	8005598 <USB_GetMode>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d01e      	beq.n	8005180 <USB_SetCurrentMode+0x84>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b31      	cmp	r3, #49	; 0x31
 8005146:	d9f0      	bls.n	800512a <USB_SetCurrentMode+0x2e>
 8005148:	e01a      	b.n	8005180 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d115      	bne.n	800517c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800515c:	2001      	movs	r0, #1
 800515e:	f7fc f8dd 	bl	800131c <HAL_Delay>
      ms++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa15 	bl	8005598 <USB_GetMode>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <USB_SetCurrentMode+0x84>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b31      	cmp	r3, #49	; 0x31
 8005178:	d9f0      	bls.n	800515c <USB_SetCurrentMode+0x60>
 800517a:	e001      	b.n	8005180 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e005      	b.n	800518c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b32      	cmp	r3, #50	; 0x32
 8005184:	d101      	bne.n	800518a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005194:	b084      	sub	sp, #16
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	e009      	b.n	80051c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3340      	adds	r3, #64	; 0x40
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3301      	adds	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b0e      	cmp	r3, #14
 80051cc:	d9f2      	bls.n	80051b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11c      	bne.n	800520e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e2:	f043 0302 	orr.w	r3, r3, #2
 80051e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
 800520c:	e00b      	b.n	8005226 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800522c:	461a      	mov	r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005238:	4619      	mov	r1, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	461a      	mov	r2, r3
 8005242:	680b      	ldr	r3, [r1, #0]
 8005244:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10c      	bne.n	8005266 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005252:	2100      	movs	r1, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f965 	bl	8005524 <USB_SetDevSpeed>
 800525a:	e008      	b.n	800526e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800525c:	2101      	movs	r1, #1
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f960 	bl	8005524 <USB_SetDevSpeed>
 8005264:	e003      	b.n	800526e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005266:	2103      	movs	r1, #3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f95b 	bl	8005524 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800526e:	2110      	movs	r1, #16
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8f3 	bl	800545c <USB_FlushTxFifo>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f91f 	bl	80054c4 <USB_FlushRxFifo>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ae:	461a      	mov	r2, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e043      	b.n	8005342 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d0:	d118      	bne.n	8005304 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e013      	b.n	8005316 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e008      	b.n	8005316 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	461a      	mov	r2, r3
 8005324:	2300      	movs	r3, #0
 8005326:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	461a      	mov	r2, r3
 8005336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800533a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	429a      	cmp	r2, r3
 8005348:	d3b7      	bcc.n	80052ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e043      	b.n	80053d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005366:	d118      	bne.n	800539a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e013      	b.n	80053ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	461a      	mov	r2, r3
 8005392:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e008      	b.n	80053ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	461a      	mov	r2, r3
 80053ba:	2300      	movs	r3, #0
 80053bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3301      	adds	r3, #1
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d3b7      	bcc.n	8005350 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005400:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	2b00      	cmp	r3, #0
 8005406:	d105      	bne.n	8005414 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	f043 0210 	orr.w	r2, r3, #16
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <USB_DevInit+0x2c4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f043 0208 	orr.w	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005454:	b004      	add	sp, #16
 8005456:	4770      	bx	lr
 8005458:	803c3800 	.word	0x803c3800

0800545c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <USB_FlushTxFifo+0x64>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e01b      	b.n	80054b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	daf2      	bge.n	800546a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	019b      	lsls	r3, r3, #6
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <USB_FlushTxFifo+0x64>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e006      	b.n	80054b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d0f0      	beq.n	8005494 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	00030d40 	.word	0x00030d40

080054c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a11      	ldr	r2, [pc, #68]	; (8005520 <USB_FlushRxFifo+0x5c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e018      	b.n	8005514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	daf2      	bge.n	80054d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2210      	movs	r2, #16
 80054f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <USB_FlushRxFifo+0x5c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e006      	b.n	8005514 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b10      	cmp	r3, #16
 8005510:	d0f0      	beq.n	80054f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	00030d40 	.word	0x00030d40

08005524 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005570:	f023 0303 	bic.w	r3, r3, #3
 8005574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005584:	f043 0302 	orr.w	r3, r3, #2
 8005588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0301 	and.w	r3, r3, #1
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <USB_CoreReset+0x64>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e01b      	b.n	800560a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	daf2      	bge.n	80055c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <USB_CoreReset+0x64>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e006      	b.n	800560a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d0f0      	beq.n	80055ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	00030d40 	.word	0x00030d40

0800561c <__NVIC_SetPriority>:
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	6039      	str	r1, [r7, #0]
 8005626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562c:	2b00      	cmp	r3, #0
 800562e:	db0a      	blt.n	8005646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	490c      	ldr	r1, [pc, #48]	; (8005668 <__NVIC_SetPriority+0x4c>)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	440b      	add	r3, r1
 8005640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005644:	e00a      	b.n	800565c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4908      	ldr	r1, [pc, #32]	; (800566c <__NVIC_SetPriority+0x50>)
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	3b04      	subs	r3, #4
 8005654:	0112      	lsls	r2, r2, #4
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	440b      	add	r3, r1
 800565a:	761a      	strb	r2, [r3, #24]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	e000e100 	.word	0xe000e100
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <SysTick_Handler+0x1c>)
 8005676:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005678:	f001 fcfe 	bl	8007078 <xTaskGetSchedulerState>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d001      	beq.n	8005686 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005682:	f002 fae9 	bl	8007c58 <xPortSysTickHandler>
  }
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	e000e010 	.word	0xe000e010

08005690 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005694:	2100      	movs	r1, #0
 8005696:	f06f 0004 	mvn.w	r0, #4
 800569a:	f7ff ffbf 	bl	800561c <__NVIC_SetPriority>
#endif
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056aa:	f3ef 8305 	mrs	r3, IPSR
 80056ae:	603b      	str	r3, [r7, #0]
  return(result);
 80056b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056b6:	f06f 0305 	mvn.w	r3, #5
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	e00c      	b.n	80056d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <osKernelInitialize+0x44>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <osKernelInitialize+0x44>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	e002      	b.n	80056d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295
 80056d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056d8:	687b      	ldr	r3, [r7, #4]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000a94 	.word	0x20000a94

080056ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f2:	f3ef 8305 	mrs	r3, IPSR
 80056f6:	603b      	str	r3, [r7, #0]
  return(result);
 80056f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <osKernelStart+0x1a>
    stat = osErrorISR;
 80056fe:	f06f 0305 	mvn.w	r3, #5
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	e010      	b.n	8005728 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <osKernelStart+0x48>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d109      	bne.n	8005722 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800570e:	f7ff ffbf 	bl	8005690 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005712:	4b08      	ldr	r3, [pc, #32]	; (8005734 <osKernelStart+0x48>)
 8005714:	2202      	movs	r2, #2
 8005716:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005718:	f001 f866 	bl	80067e8 <vTaskStartScheduler>
      stat = osOK;
 800571c:	2300      	movs	r3, #0
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	e002      	b.n	8005728 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295
 8005726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005728:	687b      	ldr	r3, [r7, #4]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000a94 	.word	0x20000a94

08005738 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af04      	add	r7, sp, #16
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005748:	f3ef 8305 	mrs	r3, IPSR
 800574c:	617b      	str	r3, [r7, #20]
  return(result);
 800574e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005750:	2b00      	cmp	r3, #0
 8005752:	d17e      	bne.n	8005852 <osThreadNew+0x11a>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d07b      	beq.n	8005852 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800575e:	2318      	movs	r3, #24
 8005760:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d045      	beq.n	80057fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <osThreadNew+0x48>
        name = attr->name;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <osThreadNew+0x6e>
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b38      	cmp	r3, #56	; 0x38
 8005798:	d805      	bhi.n	80057a6 <osThreadNew+0x6e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <osThreadNew+0x72>
        return (NULL);
 80057a6:	2300      	movs	r3, #0
 80057a8:	e054      	b.n	8005854 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <osThreadNew+0xa8>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b5b      	cmp	r3, #91	; 0x5b
 80057c8:	d90a      	bls.n	80057e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d006      	beq.n	80057e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <osThreadNew+0xa8>
        mem = 1;
 80057da:	2301      	movs	r3, #1
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	e010      	b.n	8005802 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10c      	bne.n	8005802 <osThreadNew+0xca>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d108      	bne.n	8005802 <osThreadNew+0xca>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <osThreadNew+0xca>
          mem = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	e001      	b.n	8005802 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d110      	bne.n	800582a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005810:	9202      	str	r2, [sp, #8]
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6a3a      	ldr	r2, [r7, #32]
 800581c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fe0c 	bl	800643c <xTaskCreateStatic>
 8005824:	4603      	mov	r3, r0
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	e013      	b.n	8005852 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	b29a      	uxth	r2, r3
 8005834:	f107 0310 	add.w	r3, r7, #16
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fe57 	bl	80064f6 <xTaskCreate>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <osThreadNew+0x11a>
            hTask = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005852:	693b      	ldr	r3, [r7, #16]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005864:	f3ef 8305 	mrs	r3, IPSR
 8005868:	60bb      	str	r3, [r7, #8]
  return(result);
 800586a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <osDelay+0x1c>
    stat = osErrorISR;
 8005870:	f06f 0305 	mvn.w	r3, #5
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e007      	b.n	8005888 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 ff7c 	bl	8006780 <vTaskDelay>
    }
  }

  return (stat);
 8005888:	68fb      	ldr	r3, [r7, #12]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a07      	ldr	r2, [pc, #28]	; (80058c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80058a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4a06      	ldr	r2, [pc, #24]	; (80058c4 <vApplicationGetIdleTaskMemory+0x30>)
 80058aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	601a      	str	r2, [r3, #0]
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000a98 	.word	0x20000a98
 80058c4:	20000af4 	.word	0x20000af4

080058c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80058d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4a06      	ldr	r2, [pc, #24]	; (80058f8 <vApplicationGetTimerTaskMemory+0x30>)
 80058de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20000cf4 	.word	0x20000cf4
 80058f8:	20000d50 	.word	0x20000d50

080058fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f103 0208 	add.w	r2, r3, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f103 0208 	add.w	r2, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f103 0208 	add.w	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d103      	bne.n	80059be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e00c      	b.n	80059d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3308      	adds	r3, #8
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e002      	b.n	80059cc <vListInsert+0x2e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d2f6      	bcs.n	80059c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6892      	ldr	r2, [r2, #8]
 8005a26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6852      	ldr	r2, [r2, #4]
 8005a30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d103      	bne.n	8005a44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	1e5a      	subs	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a8e:	f002 f851 	bl	8007b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	441a      	add	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	22ff      	movs	r2, #255	; 0xff
 8005ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d114      	bne.n	8005b0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01a      	beq.n	8005b22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3310      	adds	r3, #16
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 f903 	bl	8006cfc <xTaskRemoveFromEventList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d012      	beq.n	8005b22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005afc:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <xQueueGenericReset+0xcc>)
 8005afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	e009      	b.n	8005b22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3310      	adds	r3, #16
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fef2 	bl	80058fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff feed 	bl	80058fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b22:	f002 f837 	bl	8007b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b26:	2301      	movs	r3, #1
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b5a:	bf00      	nop
 8005b5c:	e7fe      	b.n	8005b5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <xQueueGenericCreateStatic+0x52>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <xQueueGenericCreateStatic+0x56>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <xQueueGenericCreateStatic+0x58>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	623b      	str	r3, [r7, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <xQueueGenericCreateStatic+0x7e>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericCreateStatic+0x82>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericCreateStatic+0x84>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	61fb      	str	r3, [r7, #28]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bd2:	2350      	movs	r3, #80	; 0x50
 8005bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b50      	cmp	r3, #80	; 0x50
 8005bda:	d00a      	beq.n	8005bf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	61bb      	str	r3, [r7, #24]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00d      	beq.n	8005c1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f805 	bl	8005c24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3730      	adds	r7, #48	; 0x30
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e002      	b.n	8005c46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c52:	2101      	movs	r1, #1
 8005c54:	69b8      	ldr	r0, [r7, #24]
 8005c56:	f7ff ff05 	bl	8005a64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08e      	sub	sp, #56	; 0x38
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xQueueGenericSend+0x32>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d103      	bne.n	8005cac <xQueueGenericSend+0x40>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <xQueueGenericSend+0x44>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <xQueueGenericSend+0x46>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xQueueGenericSend+0x60>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d103      	bne.n	8005cda <xQueueGenericSend+0x6e>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <xQueueGenericSend+0x72>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <xQueueGenericSend+0x74>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericSend+0x8e>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	623b      	str	r3, [r7, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cfa:	f001 f9bd 	bl	8007078 <xTaskGetSchedulerState>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <xQueueGenericSend+0x9e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSend+0xa2>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSend+0xa4>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericSend+0xbe>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61fb      	str	r3, [r7, #28]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d2a:	f001 ff03 	bl	8007b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <xQueueGenericSend+0xd4>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d129      	bne.n	8005d94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d46:	f000 fa0b 	bl	8006160 <prvCopyDataToQueue>
 8005d4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d010      	beq.n	8005d76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 ffcf 	bl	8006cfc <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d013      	beq.n	8005d8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d64:	4b3f      	ldr	r3, [pc, #252]	; (8005e64 <xQueueGenericSend+0x1f8>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	e00a      	b.n	8005d8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d7c:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <xQueueGenericSend+0x1f8>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d8c:	f001 ff02 	bl	8007b94 <vPortExitCritical>
				return pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e063      	b.n	8005e5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d9a:	f001 fefb 	bl	8007b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e05c      	b.n	8005e5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 f809 	bl	8006dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005db6:	f001 feed 	bl	8007b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dba:	f000 fd7b 	bl	80068b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dbe:	f001 feb9 	bl	8007b34 <vPortEnterCritical>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d103      	bne.n	8005dd8 <xQueueGenericSend+0x16c>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dde:	b25b      	sxtb	r3, r3
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d103      	bne.n	8005dee <xQueueGenericSend+0x182>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dee:	f001 fed1 	bl	8007b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005df2:	1d3a      	adds	r2, r7, #4
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fff8 	bl	8006df0 <xTaskCheckForTimeOut>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d124      	bne.n	8005e50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e08:	f000 faa2 	bl	8006350 <prvIsQueueFull>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	3310      	adds	r3, #16
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff1e 	bl	8006c5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e22:	f000 fa2d 	bl	8006280 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e26:	f000 fd53 	bl	80068d0 <xTaskResumeAll>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f af7c 	bne.w	8005d2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <xQueueGenericSend+0x1f8>)
 8005e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	e772      	b.n	8005d2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e46:	f000 fa1b 	bl	8006280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e4a:	f000 fd41 	bl	80068d0 <xTaskResumeAll>
 8005e4e:	e76c      	b.n	8005d2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e52:	f000 fa15 	bl	8006280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e56:	f000 fd3b 	bl	80068d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3738      	adds	r7, #56	; 0x38
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b090      	sub	sp, #64	; 0x40
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <xQueueGenericSendFromISR+0x3c>
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <xQueueGenericSendFromISR+0x40>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <xQueueGenericSendFromISR+0x42>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSendFromISR+0x6a>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x6e>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericSendFromISR+0x70>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ef2:	f001 ff01 	bl	8007cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	61fa      	str	r2, [r7, #28]
 8005f0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <xQueueGenericSendFromISR+0xbc>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d12f      	bne.n	8005f84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f3a:	f000 f911 	bl	8006160 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d112      	bne.n	8005f6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d016      	beq.n	8005f7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	3324      	adds	r3, #36	; 0x24
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fed1 	bl	8006cfc <xTaskRemoveFromEventList>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	e007      	b.n	8005f7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f72:	3301      	adds	r3, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	b25a      	sxtb	r2, r3
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f82:	e001      	b.n	8005f88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3740      	adds	r7, #64	; 0x40
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xQueueReceive+0x30>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	623b      	str	r3, [r7, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <xQueueReceive+0x3e>
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <xQueueReceive+0x42>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <xQueueReceive+0x44>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xQueueReceive+0x5e>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	61fb      	str	r3, [r7, #28]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ffe:	f001 f83b 	bl	8007078 <xTaskGetSchedulerState>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <xQueueReceive+0x6e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <xQueueReceive+0x72>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <xQueueReceive+0x74>
 8006012:	2300      	movs	r3, #0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xQueueReceive+0x8e>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	61bb      	str	r3, [r7, #24]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800602e:	f001 fd81 	bl	8007b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01f      	beq.n	800607e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006042:	f000 f8f7 	bl	8006234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	3310      	adds	r3, #16
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fe4e 	bl	8006cfc <xTaskRemoveFromEventList>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006066:	4b3d      	ldr	r3, [pc, #244]	; (800615c <xQueueReceive+0x1bc>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006076:	f001 fd8d 	bl	8007b94 <vPortExitCritical>
				return pdPASS;
 800607a:	2301      	movs	r3, #1
 800607c:	e069      	b.n	8006152 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006084:	f001 fd86 	bl	8007b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006088:	2300      	movs	r3, #0
 800608a:	e062      	b.n	8006152 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006092:	f107 0310 	add.w	r3, r7, #16
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fe94 	bl	8006dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060a0:	f001 fd78 	bl	8007b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060a4:	f000 fc06 	bl	80068b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a8:	f001 fd44 	bl	8007b34 <vPortEnterCritical>
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d103      	bne.n	80060c2 <xQueueReceive+0x122>
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <xQueueReceive+0x138>
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d8:	f001 fd5c 	bl	8007b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060dc:	1d3a      	adds	r2, r7, #4
 80060de:	f107 0310 	add.w	r3, r7, #16
 80060e2:	4611      	mov	r1, r2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fe83 	bl	8006df0 <xTaskCheckForTimeOut>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d123      	bne.n	8006138 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f2:	f000 f917 	bl	8006324 <prvIsQueueEmpty>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d017      	beq.n	800612c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fda9 	bl	8006c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800610a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610c:	f000 f8b8 	bl	8006280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006110:	f000 fbde 	bl	80068d0 <xTaskResumeAll>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d189      	bne.n	800602e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <xQueueReceive+0x1bc>)
 800611c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	e780      	b.n	800602e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800612c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612e:	f000 f8a7 	bl	8006280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006132:	f000 fbcd 	bl	80068d0 <xTaskResumeAll>
 8006136:	e77a      	b.n	800602e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613a:	f000 f8a1 	bl	8006280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800613e:	f000 fbc7 	bl	80068d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006144:	f000 f8ee 	bl	8006324 <prvIsQueueEmpty>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	f43f af6f 	beq.w	800602e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006152:	4618      	mov	r0, r3
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d14d      	bne.n	8006222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 ff92 	bl	80070b4 <xTaskPriorityDisinherit>
 8006190:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	e043      	b.n	8006222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d119      	bne.n	80061d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6858      	ldr	r0, [r3, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	461a      	mov	r2, r3
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	f001 fff2 	bl	8008194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d32b      	bcc.n	8006222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	e026      	b.n	8006222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68d8      	ldr	r0, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	461a      	mov	r2, r3
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	f001 ffd8 	bl	8008194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	425b      	negs	r3, r3
 80061ee:	441a      	add	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d207      	bcs.n	8006210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	425b      	negs	r3, r3
 800620a:	441a      	add	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d105      	bne.n	8006222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	3b01      	subs	r3, #1
 8006220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800622a:	697b      	ldr	r3, [r7, #20]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	441a      	add	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	429a      	cmp	r2, r3
 800625e:	d303      	bcc.n	8006268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68d9      	ldr	r1, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	461a      	mov	r2, r3
 8006272:	6838      	ldr	r0, [r7, #0]
 8006274:	f001 ff8e 	bl	8008194 <memcpy>
	}
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006288:	f001 fc54 	bl	8007b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006294:	e011      	b.n	80062ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d012      	beq.n	80062c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3324      	adds	r3, #36	; 0x24
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fd2a 	bl	8006cfc <xTaskRemoveFromEventList>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062ae:	f000 fe01 	bl	8006eb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	dce9      	bgt.n	8006296 <prvUnlockQueue+0x16>
 80062c2:	e000      	b.n	80062c6 <prvUnlockQueue+0x46>
					break;
 80062c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	22ff      	movs	r2, #255	; 0xff
 80062ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062ce:	f001 fc61 	bl	8007b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062d2:	f001 fc2f 	bl	8007b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062de:	e011      	b.n	8006304 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d012      	beq.n	800630e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3310      	adds	r3, #16
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fd05 	bl	8006cfc <xTaskRemoveFromEventList>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062f8:	f000 fddc 	bl	8006eb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	3b01      	subs	r3, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006308:	2b00      	cmp	r3, #0
 800630a:	dce9      	bgt.n	80062e0 <prvUnlockQueue+0x60>
 800630c:	e000      	b.n	8006310 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800630e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006318:	f001 fc3c 	bl	8007b94 <vPortExitCritical>
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800632c:	f001 fc02 	bl	8007b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006338:	2301      	movs	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e001      	b.n	8006342 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006342:	f001 fc27 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 8006346:	68fb      	ldr	r3, [r7, #12]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006358:	f001 fbec 	bl	8007b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	429a      	cmp	r2, r3
 8006366:	d102      	bne.n	800636e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006368:	2301      	movs	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e001      	b.n	8006372 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006372:	f001 fc0f 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 8006376:	68fb      	ldr	r3, [r7, #12]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e014      	b.n	80063ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006390:	4a0f      	ldr	r2, [pc, #60]	; (80063d0 <vQueueAddToRegistry+0x50>)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800639c:	490c      	ldr	r1, [pc, #48]	; (80063d0 <vQueueAddToRegistry+0x50>)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <vQueueAddToRegistry+0x50>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4413      	add	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063b2:	e006      	b.n	80063c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b07      	cmp	r3, #7
 80063be:	d9e7      	bls.n	8006390 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20001150 	.word	0x20001150

080063d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063e4:	f001 fba6 	bl	8007b34 <vPortEnterCritical>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d103      	bne.n	80063fe <vQueueWaitForMessageRestricted+0x2a>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006404:	b25b      	sxtb	r3, r3
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640a:	d103      	bne.n	8006414 <vQueueWaitForMessageRestricted+0x40>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006414:	f001 fbbe 	bl	8007b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3324      	adds	r3, #36	; 0x24
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fc3b 	bl	8006ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800642e:	6978      	ldr	r0, [r7, #20]
 8006430:	f7ff ff26 	bl	8006280 <prvUnlockQueue>
	}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	; 0x38
 8006440:	af04      	add	r7, sp, #16
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	623b      	str	r3, [r7, #32]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xTaskCreateStatic+0x46>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	61fb      	str	r3, [r7, #28]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006482:	235c      	movs	r3, #92	; 0x5c
 8006484:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b5c      	cmp	r3, #92	; 0x5c
 800648a:	d00a      	beq.n	80064a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	61bb      	str	r3, [r7, #24]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01e      	beq.n	80064e8 <xTaskCreateStatic+0xac>
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01b      	beq.n	80064e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	2202      	movs	r2, #2
 80064be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064c2:	2300      	movs	r3, #0
 80064c4:	9303      	str	r3, [sp, #12]
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	9302      	str	r3, [sp, #8]
 80064ca:	f107 0314 	add.w	r3, r7, #20
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f850 	bl	8006580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064e2:	f000 f8dd 	bl	80066a0 <prvAddNewTaskToReadyList>
 80064e6:	e001      	b.n	80064ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064ec:	697b      	ldr	r3, [r7, #20]
	}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b08c      	sub	sp, #48	; 0x30
 80064fa:	af04      	add	r7, sp, #16
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fc34 	bl	8007d78 <pvPortMalloc>
 8006510:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006518:	205c      	movs	r0, #92	; 0x5c
 800651a:	f001 fc2d 	bl	8007d78 <pvPortMalloc>
 800651e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
 800652c:	e005      	b.n	800653a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f001 fcee 	bl	8007f10 <vPortFree>
 8006534:	e001      	b.n	800653a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	2300      	movs	r3, #0
 800654c:	9303      	str	r3, [sp, #12]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	9302      	str	r3, [sp, #8]
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f80e 	bl	8006580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006564:	69f8      	ldr	r0, [r7, #28]
 8006566:	f000 f89b 	bl	80066a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800656a:	2301      	movs	r3, #1
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e002      	b.n	8006576 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006570:	f04f 33ff 	mov.w	r3, #4294967295
 8006574:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006576:	69bb      	ldr	r3, [r7, #24]
	}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	461a      	mov	r2, r3
 8006598:	21a5      	movs	r1, #165	; 0xa5
 800659a:	f001 fe09 	bl	80081b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a8:	3b01      	subs	r3, #1
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f023 0307 	bic.w	r3, r3, #7
 80065b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	617b      	str	r3, [r7, #20]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01f      	beq.n	800661e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	e012      	b.n	800660a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	7819      	ldrb	r1, [r3, #0]
 80065ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	4413      	add	r3, r2
 80065f2:	3334      	adds	r3, #52	; 0x34
 80065f4:	460a      	mov	r2, r1
 80065f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	3301      	adds	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d9e9      	bls.n	80065e4 <prvInitialiseNewTask+0x64>
 8006610:	e000      	b.n	8006614 <prvInitialiseNewTask+0x94>
			{
				break;
 8006612:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800661c:	e003      	b.n	8006626 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	2b37      	cmp	r3, #55	; 0x37
 800662a:	d901      	bls.n	8006630 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800662c:	2337      	movs	r3, #55	; 0x37
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	2200      	movs	r2, #0
 8006640:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff f978 	bl	800593c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	3318      	adds	r3, #24
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f973 	bl	800593c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	2200      	movs	r2, #0
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	68f9      	ldr	r1, [r7, #12]
 800667e:	69b8      	ldr	r0, [r7, #24]
 8006680:	f001 f928 	bl	80078d4 <pxPortInitialiseStack>
 8006684:	4602      	mov	r2, r0
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006696:	bf00      	nop
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066a8:	f001 fa44 	bl	8007b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066ac:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <prvAddNewTaskToReadyList+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	4a2c      	ldr	r2, [pc, #176]	; (8006764 <prvAddNewTaskToReadyList+0xc4>)
 80066b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066b6:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <prvAddNewTaskToReadyList+0xc8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066be:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <prvAddNewTaskToReadyList+0xc8>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066c4:	4b27      	ldr	r3, [pc, #156]	; (8006764 <prvAddNewTaskToReadyList+0xc4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d110      	bne.n	80066ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066cc:	f000 fc16 	bl	8006efc <prvInitialiseTaskLists>
 80066d0:	e00d      	b.n	80066ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066d2:	4b26      	ldr	r3, [pc, #152]	; (800676c <prvAddNewTaskToReadyList+0xcc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066da:	4b23      	ldr	r3, [pc, #140]	; (8006768 <prvAddNewTaskToReadyList+0xc8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d802      	bhi.n	80066ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066e8:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <prvAddNewTaskToReadyList+0xc8>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066ee:	4b20      	ldr	r3, [pc, #128]	; (8006770 <prvAddNewTaskToReadyList+0xd0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <prvAddNewTaskToReadyList+0xd0>)
 80066f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066f8:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <prvAddNewTaskToReadyList+0xd0>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <prvAddNewTaskToReadyList+0xd4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d903      	bls.n	8006714 <prvAddNewTaskToReadyList+0x74>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	4a18      	ldr	r2, [pc, #96]	; (8006774 <prvAddNewTaskToReadyList+0xd4>)
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4a15      	ldr	r2, [pc, #84]	; (8006778 <prvAddNewTaskToReadyList+0xd8>)
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f7ff f913 	bl	8005956 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006730:	f001 fa30 	bl	8007b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <prvAddNewTaskToReadyList+0xcc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00e      	beq.n	800675a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <prvAddNewTaskToReadyList+0xc8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	429a      	cmp	r2, r3
 8006748:	d207      	bcs.n	800675a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <prvAddNewTaskToReadyList+0xdc>)
 800674c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20001664 	.word	0x20001664
 8006768:	20001190 	.word	0x20001190
 800676c:	20001670 	.word	0x20001670
 8006770:	20001680 	.word	0x20001680
 8006774:	2000166c 	.word	0x2000166c
 8006778:	20001194 	.word	0x20001194
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d017      	beq.n	80067c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <vTaskDelay+0x60>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <vTaskDelay+0x30>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60bb      	str	r3, [r7, #8]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067b0:	f000 f880 	bl	80068b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067b4:	2100      	movs	r1, #0
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fcea 	bl	8007190 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067bc:	f000 f888 	bl	80068d0 <xTaskResumeAll>
 80067c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <vTaskDelay+0x64>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	2000168c 	.word	0x2000168c
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067f6:	463a      	mov	r2, r7
 80067f8:	1d39      	adds	r1, r7, #4
 80067fa:	f107 0308 	add.w	r3, r7, #8
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff f848 	bl	8005894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	9202      	str	r2, [sp, #8]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	460a      	mov	r2, r1
 8006816:	4921      	ldr	r1, [pc, #132]	; (800689c <vTaskStartScheduler+0xb4>)
 8006818:	4821      	ldr	r0, [pc, #132]	; (80068a0 <vTaskStartScheduler+0xb8>)
 800681a:	f7ff fe0f 	bl	800643c <xTaskCreateStatic>
 800681e:	4603      	mov	r3, r0
 8006820:	4a20      	ldr	r2, [pc, #128]	; (80068a4 <vTaskStartScheduler+0xbc>)
 8006822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006824:	4b1f      	ldr	r3, [pc, #124]	; (80068a4 <vTaskStartScheduler+0xbc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e001      	b.n	8006836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800683c:	f000 fcfc 	bl	8007238 <xTimerCreateTimerTask>
 8006840:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d116      	bne.n	8006876 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	613b      	str	r3, [r7, #16]
}
 800685a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800685c:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <vTaskStartScheduler+0xc0>)
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <vTaskStartScheduler+0xc4>)
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800686a:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <vTaskStartScheduler+0xc8>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006870:	f001 f8be 	bl	80079f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006874:	e00e      	b.n	8006894 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d10a      	bne.n	8006894 <vTaskStartScheduler+0xac>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	60fb      	str	r3, [r7, #12]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <vTaskStartScheduler+0xaa>
}
 8006894:	bf00      	nop
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	080081fc 	.word	0x080081fc
 80068a0:	08006ecd 	.word	0x08006ecd
 80068a4:	20001688 	.word	0x20001688
 80068a8:	20001684 	.word	0x20001684
 80068ac:	20001670 	.word	0x20001670
 80068b0:	20001668 	.word	0x20001668

080068b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <vTaskSuspendAll+0x18>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3301      	adds	r3, #1
 80068be:	4a03      	ldr	r2, [pc, #12]	; (80068cc <vTaskSuspendAll+0x18>)
 80068c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	2000168c 	.word	0x2000168c

080068d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068de:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <xTaskResumeAll+0x118>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <xTaskResumeAll+0x2c>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	603b      	str	r3, [r7, #0]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068fc:	f001 f91a 	bl	8007b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006900:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <xTaskResumeAll+0x118>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3b01      	subs	r3, #1
 8006906:	4a38      	ldr	r2, [pc, #224]	; (80069e8 <xTaskResumeAll+0x118>)
 8006908:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800690a:	4b37      	ldr	r3, [pc, #220]	; (80069e8 <xTaskResumeAll+0x118>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d162      	bne.n	80069d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006912:	4b36      	ldr	r3, [pc, #216]	; (80069ec <xTaskResumeAll+0x11c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d05e      	beq.n	80069d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800691a:	e02f      	b.n	800697c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691c:	4b34      	ldr	r3, [pc, #208]	; (80069f0 <xTaskResumeAll+0x120>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3318      	adds	r3, #24
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff f871 	bl	8005a10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3304      	adds	r3, #4
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff f86c 	bl	8005a10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4b2d      	ldr	r3, [pc, #180]	; (80069f4 <xTaskResumeAll+0x124>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d903      	bls.n	800694c <xTaskResumeAll+0x7c>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <xTaskResumeAll+0x124>)
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <xTaskResumeAll+0x128>)
 800695a:	441a      	add	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f7fe fff7 	bl	8005956 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4b23      	ldr	r3, [pc, #140]	; (80069fc <xTaskResumeAll+0x12c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <xTaskResumeAll+0x130>)
 8006978:	2201      	movs	r2, #1
 800697a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800697c:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <xTaskResumeAll+0x120>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1cb      	bne.n	800691c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800698a:	f000 fb55 	bl	8007038 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800698e:	4b1d      	ldr	r3, [pc, #116]	; (8006a04 <xTaskResumeAll+0x134>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800699a:	f000 f847 	bl	8006a2c <xTaskIncrementTick>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069a4:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <xTaskResumeAll+0x130>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f1      	bne.n	800699a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <xTaskResumeAll+0x134>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069bc:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <xTaskResumeAll+0x130>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069c8:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <xTaskResumeAll+0x138>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069d8:	f001 f8dc 	bl	8007b94 <vPortExitCritical>

	return xAlreadyYielded;
 80069dc:	68bb      	ldr	r3, [r7, #8]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000168c 	.word	0x2000168c
 80069ec:	20001664 	.word	0x20001664
 80069f0:	20001624 	.word	0x20001624
 80069f4:	2000166c 	.word	0x2000166c
 80069f8:	20001194 	.word	0x20001194
 80069fc:	20001190 	.word	0x20001190
 8006a00:	20001678 	.word	0x20001678
 8006a04:	20001674 	.word	0x20001674
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <xTaskGetTickCount+0x1c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a18:	687b      	ldr	r3, [r7, #4]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	20001668 	.word	0x20001668

08006a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a36:	4b4f      	ldr	r3, [pc, #316]	; (8006b74 <xTaskIncrementTick+0x148>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 808f 	bne.w	8006b5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a40:	4b4d      	ldr	r3, [pc, #308]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a48:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d120      	bne.n	8006a96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a54:	4b49      	ldr	r3, [pc, #292]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	603b      	str	r3, [r7, #0]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xTaskIncrementTick+0x46>
 8006a74:	4b41      	ldr	r3, [pc, #260]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	4b41      	ldr	r3, [pc, #260]	; (8006b80 <xTaskIncrementTick+0x154>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a3f      	ldr	r2, [pc, #252]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	4a3f      	ldr	r2, [pc, #252]	; (8006b80 <xTaskIncrementTick+0x154>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	4b3e      	ldr	r3, [pc, #248]	; (8006b84 <xTaskIncrementTick+0x158>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a3d      	ldr	r2, [pc, #244]	; (8006b84 <xTaskIncrementTick+0x158>)
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	f000 fad1 	bl	8007038 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a96:	4b3c      	ldr	r3, [pc, #240]	; (8006b88 <xTaskIncrementTick+0x15c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d349      	bcc.n	8006b34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa0:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aaa:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <xTaskIncrementTick+0x15c>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	601a      	str	r2, [r3, #0]
					break;
 8006ab2:	e03f      	b.n	8006b34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab4:	4b31      	ldr	r3, [pc, #196]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d203      	bcs.n	8006ad4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006acc:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <xTaskIncrementTick+0x15c>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ad2:	e02f      	b.n	8006b34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe ff99 	bl	8005a10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3318      	adds	r3, #24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe ff90 	bl	8005a10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <xTaskIncrementTick+0x160>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d903      	bls.n	8006b04 <xTaskIncrementTick+0xd8>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <xTaskIncrementTick+0x160>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a1f      	ldr	r2, [pc, #124]	; (8006b90 <xTaskIncrementTick+0x164>)
 8006b12:	441a      	add	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7fe ff1b 	bl	8005956 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <xTaskIncrementTick+0x168>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d3b8      	bcc.n	8006aa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b32:	e7b5      	b.n	8006aa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b34:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <xTaskIncrementTick+0x168>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	4915      	ldr	r1, [pc, #84]	; (8006b90 <xTaskIncrementTick+0x164>)
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	440b      	add	r3, r1
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d901      	bls.n	8006b50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b50:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <xTaskIncrementTick+0x16c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e004      	b.n	8006b68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <xTaskIncrementTick+0x170>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <xTaskIncrementTick+0x170>)
 8006b66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b68:	697b      	ldr	r3, [r7, #20]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	2000168c 	.word	0x2000168c
 8006b78:	20001668 	.word	0x20001668
 8006b7c:	2000161c 	.word	0x2000161c
 8006b80:	20001620 	.word	0x20001620
 8006b84:	2000167c 	.word	0x2000167c
 8006b88:	20001684 	.word	0x20001684
 8006b8c:	2000166c 	.word	0x2000166c
 8006b90:	20001194 	.word	0x20001194
 8006b94:	20001190 	.word	0x20001190
 8006b98:	20001678 	.word	0x20001678
 8006b9c:	20001674 	.word	0x20001674

08006ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ba6:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <vTaskSwitchContext+0xa8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bae:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <vTaskSwitchContext+0xac>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bb4:	e041      	b.n	8006c3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006bb6:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <vTaskSwitchContext+0xac>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bbc:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <vTaskSwitchContext+0xb0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	e010      	b.n	8006be6 <vTaskSwitchContext+0x46>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	607b      	str	r3, [r7, #4]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <vTaskSwitchContext+0x3e>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	491b      	ldr	r1, [pc, #108]	; (8006c54 <vTaskSwitchContext+0xb4>)
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0e4      	beq.n	8006bc4 <vTaskSwitchContext+0x24>
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <vTaskSwitchContext+0xb4>)
 8006c06:	4413      	add	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d104      	bne.n	8006c2a <vTaskSwitchContext+0x8a>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <vTaskSwitchContext+0xb8>)
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4a06      	ldr	r2, [pc, #24]	; (8006c50 <vTaskSwitchContext+0xb0>)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6013      	str	r3, [r2, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	2000168c 	.word	0x2000168c
 8006c4c:	20001678 	.word	0x20001678
 8006c50:	2000166c 	.word	0x2000166c
 8006c54:	20001194 	.word	0x20001194
 8006c58:	20001190 	.word	0x20001190

08006c5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60fb      	str	r3, [r7, #12]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <vTaskPlaceOnEventList+0x44>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3318      	adds	r3, #24
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fe fe87 	bl	800599e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c90:	2101      	movs	r1, #1
 8006c92:	6838      	ldr	r0, [r7, #0]
 8006c94:	f000 fa7c 	bl	8007190 <prvAddCurrentTaskToDelayedList>
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20001190 	.word	0x20001190

08006ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	617b      	str	r3, [r7, #20]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3318      	adds	r3, #24
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7fe fe3e 	bl	8005956 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	68b8      	ldr	r0, [r7, #8]
 8006cea:	f000 fa51 	bl	8007190 <prvAddCurrentTaskToDelayedList>
	}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20001190 	.word	0x20001190

08006cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60fb      	str	r3, [r7, #12]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	3318      	adds	r3, #24
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fe6f 	bl	8005a10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d32:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <xTaskRemoveFromEventList+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d11d      	bne.n	8006d76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fe66 	bl	8005a10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <xTaskRemoveFromEventList+0xb4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d903      	bls.n	8006d58 <xTaskRemoveFromEventList+0x5c>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <xTaskRemoveFromEventList+0xb4>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4a13      	ldr	r2, [pc, #76]	; (8006db4 <xTaskRemoveFromEventList+0xb8>)
 8006d66:	441a      	add	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fe fdf1 	bl	8005956 <vListInsertEnd>
 8006d74:	e005      	b.n	8006d82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	3318      	adds	r3, #24
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	480e      	ldr	r0, [pc, #56]	; (8006db8 <xTaskRemoveFromEventList+0xbc>)
 8006d7e:	f7fe fdea 	bl	8005956 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <xTaskRemoveFromEventList+0xc0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d905      	bls.n	8006d9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <xTaskRemoveFromEventList+0xc4>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e001      	b.n	8006da0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006da0:	697b      	ldr	r3, [r7, #20]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000168c 	.word	0x2000168c
 8006db0:	2000166c 	.word	0x2000166c
 8006db4:	20001194 	.word	0x20001194
 8006db8:	20001624 	.word	0x20001624
 8006dbc:	20001190 	.word	0x20001190
 8006dc0:	20001678 	.word	0x20001678

08006dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <vTaskInternalSetTimeOutState+0x24>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <vTaskInternalSetTimeOutState+0x28>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	2000167c 	.word	0x2000167c
 8006dec:	20001668 	.word	0x20001668

08006df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	613b      	str	r3, [r7, #16]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e32:	f000 fe7f 	bl	8007b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e36:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <xTaskCheckForTimeOut+0xbc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d102      	bne.n	8006e56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e023      	b.n	8006e9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <xTaskCheckForTimeOut+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d007      	beq.n	8006e72 <xTaskCheckForTimeOut+0x82>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d302      	bcc.n	8006e72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e015      	b.n	8006e9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d20b      	bcs.n	8006e94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff ff9b 	bl	8006dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
 8006e92:	e004      	b.n	8006e9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e9e:	f000 fe79 	bl	8007b94 <vPortExitCritical>

	return xReturn;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20001668 	.word	0x20001668
 8006eb0:	2000167c 	.word	0x2000167c

08006eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <vTaskMissedYield+0x14>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20001678 	.word	0x20001678

08006ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ed4:	f000 f852 	bl	8006f7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <prvIdleTask+0x28>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d9f9      	bls.n	8006ed4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <prvIdleTask+0x2c>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ef0:	e7f0      	b.n	8006ed4 <prvIdleTask+0x8>
 8006ef2:	bf00      	nop
 8006ef4:	20001194 	.word	0x20001194
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	e00c      	b.n	8006f22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4a12      	ldr	r2, [pc, #72]	; (8006f5c <prvInitialiseTaskLists+0x60>)
 8006f14:	4413      	add	r3, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fcf0 	bl	80058fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b37      	cmp	r3, #55	; 0x37
 8006f26:	d9ef      	bls.n	8006f08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f28:	480d      	ldr	r0, [pc, #52]	; (8006f60 <prvInitialiseTaskLists+0x64>)
 8006f2a:	f7fe fce7 	bl	80058fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f2e:	480d      	ldr	r0, [pc, #52]	; (8006f64 <prvInitialiseTaskLists+0x68>)
 8006f30:	f7fe fce4 	bl	80058fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f34:	480c      	ldr	r0, [pc, #48]	; (8006f68 <prvInitialiseTaskLists+0x6c>)
 8006f36:	f7fe fce1 	bl	80058fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f3a:	480c      	ldr	r0, [pc, #48]	; (8006f6c <prvInitialiseTaskLists+0x70>)
 8006f3c:	f7fe fcde 	bl	80058fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f40:	480b      	ldr	r0, [pc, #44]	; (8006f70 <prvInitialiseTaskLists+0x74>)
 8006f42:	f7fe fcdb 	bl	80058fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <prvInitialiseTaskLists+0x78>)
 8006f48:	4a05      	ldr	r2, [pc, #20]	; (8006f60 <prvInitialiseTaskLists+0x64>)
 8006f4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <prvInitialiseTaskLists+0x7c>)
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <prvInitialiseTaskLists+0x68>)
 8006f50:	601a      	str	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20001194 	.word	0x20001194
 8006f60:	200015f4 	.word	0x200015f4
 8006f64:	20001608 	.word	0x20001608
 8006f68:	20001624 	.word	0x20001624
 8006f6c:	20001638 	.word	0x20001638
 8006f70:	20001650 	.word	0x20001650
 8006f74:	2000161c 	.word	0x2000161c
 8006f78:	20001620 	.word	0x20001620

08006f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f82:	e019      	b.n	8006fb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f84:	f000 fdd6 	bl	8007b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <prvCheckTasksWaitingTermination+0x50>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fd3b 	bl	8005a10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <prvCheckTasksWaitingTermination+0x54>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4a0b      	ldr	r2, [pc, #44]	; (8006fd0 <prvCheckTasksWaitingTermination+0x54>)
 8006fa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <prvCheckTasksWaitingTermination+0x58>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <prvCheckTasksWaitingTermination+0x58>)
 8006fac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fae:	f000 fdf1 	bl	8007b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f810 	bl	8006fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb8:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <prvCheckTasksWaitingTermination+0x58>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e1      	bne.n	8006f84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20001638 	.word	0x20001638
 8006fd0:	20001664 	.word	0x20001664
 8006fd4:	2000164c 	.word	0x2000164c

08006fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d108      	bne.n	8006ffc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 ff8e 	bl	8007f10 <vPortFree>
				vPortFree( pxTCB );
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 ff8b 	bl	8007f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ffa:	e018      	b.n	800702e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007002:	2b01      	cmp	r3, #1
 8007004:	d103      	bne.n	800700e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 ff82 	bl	8007f10 <vPortFree>
	}
 800700c:	e00f      	b.n	800702e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007014:	2b02      	cmp	r3, #2
 8007016:	d00a      	beq.n	800702e <prvDeleteTCB+0x56>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <prvDeleteTCB+0x54>
	}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <prvResetNextTaskUnblockTime+0x38>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <prvResetNextTaskUnblockTime+0x3c>)
 800704a:	f04f 32ff 	mov.w	r2, #4294967295
 800704e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007050:	e008      	b.n	8007064 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <prvResetNextTaskUnblockTime+0x38>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	4a04      	ldr	r2, [pc, #16]	; (8007074 <prvResetNextTaskUnblockTime+0x3c>)
 8007062:	6013      	str	r3, [r2, #0]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	2000161c 	.word	0x2000161c
 8007074:	20001684 	.word	0x20001684

08007078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <xTaskGetSchedulerState+0x34>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007086:	2301      	movs	r3, #1
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	e008      	b.n	800709e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708c:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <xTaskGetSchedulerState+0x38>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007094:	2302      	movs	r3, #2
 8007096:	607b      	str	r3, [r7, #4]
 8007098:	e001      	b.n	800709e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800709a:	2300      	movs	r3, #0
 800709c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800709e:	687b      	ldr	r3, [r7, #4]
	}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20001670 	.word	0x20001670
 80070b0:	2000168c 	.word	0x2000168c

080070b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d056      	beq.n	8007178 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ca:	4b2e      	ldr	r3, [pc, #184]	; (8007184 <xTaskPriorityDisinherit+0xd0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d00a      	beq.n	80070ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	60fb      	str	r3, [r7, #12]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	60bb      	str	r3, [r7, #8]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710c:	1e5a      	subs	r2, r3, #1
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	429a      	cmp	r2, r3
 800711c:	d02c      	beq.n	8007178 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007122:	2b00      	cmp	r3, #0
 8007124:	d128      	bne.n	8007178 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3304      	adds	r3, #4
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fc70 	bl	8005a10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <xTaskPriorityDisinherit+0xd4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d903      	bls.n	8007158 <xTaskPriorityDisinherit+0xa4>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <xTaskPriorityDisinherit+0xd4>)
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a09      	ldr	r2, [pc, #36]	; (800718c <xTaskPriorityDisinherit+0xd8>)
 8007166:	441a      	add	r2, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f7fe fbf1 	bl	8005956 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007178:	697b      	ldr	r3, [r7, #20]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20001190 	.word	0x20001190
 8007188:	2000166c 	.word	0x2000166c
 800718c:	20001194 	.word	0x20001194

08007190 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <prvAddCurrentTaskToDelayedList+0x90>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a0:	4b20      	ldr	r3, [pc, #128]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fc32 	bl	8005a10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d10a      	bne.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071ba:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4819      	ldr	r0, [pc, #100]	; (8007228 <prvAddCurrentTaskToDelayedList+0x98>)
 80071c4:	f7fe fbc7 	bl	8005956 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071c8:	e026      	b.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4413      	add	r3, r2
 80071d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071d2:	4b14      	ldr	r3, [pc, #80]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d209      	bcs.n	80071f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <prvAddCurrentTaskToDelayedList+0x9c>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f7fe fbd5 	bl	800599e <vListInsert>
}
 80071f4:	e010      	b.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvAddCurrentTaskToDelayedList+0x94>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fe fbcb 	bl	800599e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <prvAddCurrentTaskToDelayedList+0xa4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	d202      	bcs.n	8007218 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007212:	4a08      	ldr	r2, [pc, #32]	; (8007234 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6013      	str	r3, [r2, #0]
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20001668 	.word	0x20001668
 8007224:	20001190 	.word	0x20001190
 8007228:	20001650 	.word	0x20001650
 800722c:	20001620 	.word	0x20001620
 8007230:	2000161c 	.word	0x2000161c
 8007234:	20001684 	.word	0x20001684

08007238 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	; 0x28
 800723c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007242:	f000 fb07 	bl	8007854 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <xTimerCreateTimerTask+0x80>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d021      	beq.n	8007292 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007256:	1d3a      	adds	r2, r7, #4
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	f107 030c 	add.w	r3, r7, #12
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fb31 	bl	80058c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	2302      	movs	r3, #2
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	460a      	mov	r2, r1
 8007278:	4910      	ldr	r1, [pc, #64]	; (80072bc <xTimerCreateTimerTask+0x84>)
 800727a:	4811      	ldr	r0, [pc, #68]	; (80072c0 <xTimerCreateTimerTask+0x88>)
 800727c:	f7ff f8de 	bl	800643c <xTaskCreateStatic>
 8007280:	4603      	mov	r3, r0
 8007282:	4a10      	ldr	r2, [pc, #64]	; (80072c4 <xTimerCreateTimerTask+0x8c>)
 8007284:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <xTimerCreateTimerTask+0x8c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	613b      	str	r3, [r7, #16]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072ae:	697b      	ldr	r3, [r7, #20]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200016c0 	.word	0x200016c0
 80072bc:	08008204 	.word	0x08008204
 80072c0:	080073fd 	.word	0x080073fd
 80072c4:	200016c4 	.word	0x200016c4

080072c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	623b      	str	r3, [r7, #32]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072f6:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <xTimerGenericCommand+0x98>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02a      	beq.n	8007354 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b05      	cmp	r3, #5
 800730e:	dc18      	bgt.n	8007342 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007310:	f7ff feb2 	bl	8007078 <xTaskGetSchedulerState>
 8007314:	4603      	mov	r3, r0
 8007316:	2b02      	cmp	r3, #2
 8007318:	d109      	bne.n	800732e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <xTimerGenericCommand+0x98>)
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	f107 0110 	add.w	r1, r7, #16
 8007322:	2300      	movs	r3, #0
 8007324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007326:	f7fe fca1 	bl	8005c6c <xQueueGenericSend>
 800732a:	6278      	str	r0, [r7, #36]	; 0x24
 800732c:	e012      	b.n	8007354 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <xTimerGenericCommand+0x98>)
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	f107 0110 	add.w	r1, r7, #16
 8007336:	2300      	movs	r3, #0
 8007338:	2200      	movs	r2, #0
 800733a:	f7fe fc97 	bl	8005c6c <xQueueGenericSend>
 800733e:	6278      	str	r0, [r7, #36]	; 0x24
 8007340:	e008      	b.n	8007354 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007342:	4b07      	ldr	r3, [pc, #28]	; (8007360 <xTimerGenericCommand+0x98>)
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	f107 0110 	add.w	r1, r7, #16
 800734a:	2300      	movs	r3, #0
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	f7fe fd8b 	bl	8005e68 <xQueueGenericSendFromISR>
 8007352:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007356:	4618      	mov	r0, r3
 8007358:	3728      	adds	r7, #40	; 0x28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200016c0 	.word	0x200016c0

08007364 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736e:	4b22      	ldr	r3, [pc, #136]	; (80073f8 <prvProcessExpiredTimer+0x94>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3304      	adds	r3, #4
 800737c:	4618      	mov	r0, r3
 800737e:	f7fe fb47 	bl	8005a10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d022      	beq.n	80073d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	18d1      	adds	r1, r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	6978      	ldr	r0, [r7, #20]
 800739e:	f000 f8d1 	bl	8007544 <prvInsertTimerInActiveList>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01f      	beq.n	80073e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073a8:	2300      	movs	r3, #0
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	2300      	movs	r3, #0
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	2100      	movs	r1, #0
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f7ff ff88 	bl	80072c8 <xTimerGenericCommand>
 80073b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d113      	bne.n	80073e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	6978      	ldr	r0, [r7, #20]
 80073ee:	4798      	blx	r3
}
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	200016b8 	.word	0x200016b8

080073fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007404:	f107 0308 	add.w	r3, r7, #8
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f857 	bl	80074bc <prvGetNextExpireTime>
 800740e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4619      	mov	r1, r3
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f803 	bl	8007420 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800741a:	f000 f8d5 	bl	80075c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800741e:	e7f1      	b.n	8007404 <prvTimerTask+0x8>

08007420 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800742a:	f7ff fa43 	bl	80068b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	4618      	mov	r0, r3
 8007434:	f000 f866 	bl	8007504 <prvSampleTimeNow>
 8007438:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d130      	bne.n	80074a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <prvProcessTimerOrBlockTask+0x3c>
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	d806      	bhi.n	800745c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800744e:	f7ff fa3f 	bl	80068d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007452:	68f9      	ldr	r1, [r7, #12]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff ff85 	bl	8007364 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800745a:	e024      	b.n	80074a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d008      	beq.n	8007474 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007462:	4b13      	ldr	r3, [pc, #76]	; (80074b0 <prvProcessTimerOrBlockTask+0x90>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <prvProcessTimerOrBlockTask+0x50>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <prvProcessTimerOrBlockTask+0x52>
 8007470:	2300      	movs	r3, #0
 8007472:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <prvProcessTimerOrBlockTask+0x94>)
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	4619      	mov	r1, r3
 8007482:	f7fe ffa7 	bl	80063d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007486:	f7ff fa23 	bl	80068d0 <xTaskResumeAll>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007490:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <prvProcessTimerOrBlockTask+0x98>)
 8007492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
}
 80074a0:	e001      	b.n	80074a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074a2:	f7ff fa15 	bl	80068d0 <xTaskResumeAll>
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	200016bc 	.word	0x200016bc
 80074b4:	200016c0 	.word	0x200016c0
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074c4:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <prvGetNextExpireTime+0x44>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <prvGetNextExpireTime+0x16>
 80074ce:	2201      	movs	r2, #1
 80074d0:	e000      	b.n	80074d4 <prvGetNextExpireTime+0x18>
 80074d2:	2200      	movs	r2, #0
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d105      	bne.n	80074ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <prvGetNextExpireTime+0x44>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e001      	b.n	80074f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074f0:	68fb      	ldr	r3, [r7, #12]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	200016b8 	.word	0x200016b8

08007504 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800750c:	f7ff fa7e 	bl	8006a0c <xTaskGetTickCount>
 8007510:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007512:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <prvSampleTimeNow+0x3c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	429a      	cmp	r2, r3
 800751a:	d205      	bcs.n	8007528 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800751c:	f000 f936 	bl	800778c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e002      	b.n	800752e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800752e:	4a04      	ldr	r2, [pc, #16]	; (8007540 <prvSampleTimeNow+0x3c>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200016c8 	.word	0x200016c8

08007544 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	d812      	bhi.n	8007590 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	429a      	cmp	r2, r3
 8007576:	d302      	bcc.n	800757e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007578:	2301      	movs	r3, #1
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	e01b      	b.n	80075b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800757e:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <prvInsertTimerInActiveList+0x7c>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7fe fa08 	bl	800599e <vListInsert>
 800758e:	e012      	b.n	80075b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d206      	bcs.n	80075a6 <prvInsertTimerInActiveList+0x62>
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d302      	bcc.n	80075a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e007      	b.n	80075b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <prvInsertTimerInActiveList+0x80>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fe f9f4 	bl	800599e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075b6:	697b      	ldr	r3, [r7, #20]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200016bc 	.word	0x200016bc
 80075c4:	200016b8 	.word	0x200016b8

080075c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08e      	sub	sp, #56	; 0x38
 80075cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ce:	e0ca      	b.n	8007766 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	da18      	bge.n	8007608 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075d6:	1d3b      	adds	r3, r7, #4
 80075d8:	3304      	adds	r3, #4
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	61fb      	str	r3, [r7, #28]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fe:	6850      	ldr	r0, [r2, #4]
 8007600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007602:	6892      	ldr	r2, [r2, #8]
 8007604:	4611      	mov	r1, r2
 8007606:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f2c0 80aa 	blt.w	8007764 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	3304      	adds	r3, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f7fe f9f5 	bl	8005a10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007626:	463b      	mov	r3, r7
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff ff6b 	bl	8007504 <prvSampleTimeNow>
 800762e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b09      	cmp	r3, #9
 8007634:	f200 8097 	bhi.w	8007766 <prvProcessReceivedCommands+0x19e>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <prvProcessReceivedCommands+0x78>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007669 	.word	0x08007669
 8007644:	08007669 	.word	0x08007669
 8007648:	08007669 	.word	0x08007669
 800764c:	080076dd 	.word	0x080076dd
 8007650:	080076f1 	.word	0x080076f1
 8007654:	0800773b 	.word	0x0800773b
 8007658:	08007669 	.word	0x08007669
 800765c:	08007669 	.word	0x08007669
 8007660:	080076dd 	.word	0x080076dd
 8007664:	080076f1 	.word	0x080076f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	18d1      	adds	r1, r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007688:	f7ff ff5c 	bl	8007544 <prvInsertTimerInActiveList>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d069      	beq.n	8007766 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007698:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d05e      	beq.n	8007766 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	441a      	add	r2, r3
 80076b0:	2300      	movs	r3, #0
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ba:	f7ff fe05 	bl	80072c8 <xTimerGenericCommand>
 80076be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d14f      	bne.n	8007766 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	61bb      	str	r3, [r7, #24]
}
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80076ee:	e03a      	b.n	8007766 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f6:	f043 0301 	orr.w	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	617b      	str	r3, [r7, #20]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	18d1      	adds	r1, r2, r3
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007734:	f7ff ff06 	bl	8007544 <prvInsertTimerInActiveList>
					break;
 8007738:	e015      	b.n	8007766 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800774a:	f000 fbe1 	bl	8007f10 <vPortFree>
 800774e:	e00a      	b.n	8007766 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007762:	e000      	b.n	8007766 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007764:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007766:	4b08      	ldr	r3, [pc, #32]	; (8007788 <prvProcessReceivedCommands+0x1c0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	1d39      	adds	r1, r7, #4
 800776c:	2200      	movs	r2, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fc16 	bl	8005fa0 <xQueueReceive>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	f47f af2a 	bne.w	80075d0 <prvProcessReceivedCommands+0x8>
	}
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3730      	adds	r7, #48	; 0x30
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200016c0 	.word	0x200016c0

0800778c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007792:	e048      	b.n	8007826 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <prvSwitchTimerLists+0xc0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779e:	4b2b      	ldr	r3, [pc, #172]	; (800784c <prvSwitchTimerLists+0xc0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe f92f 	bl	8005a10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02e      	beq.n	8007826 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4413      	add	r3, r2
 80077d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d90e      	bls.n	80077f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077e6:	4b19      	ldr	r3, [pc, #100]	; (800784c <prvSwitchTimerLists+0xc0>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3304      	adds	r3, #4
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f7fe f8d4 	bl	800599e <vListInsert>
 80077f6:	e016      	b.n	8007826 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077f8:	2300      	movs	r3, #0
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2300      	movs	r3, #0
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	2100      	movs	r1, #0
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fd60 	bl	80072c8 <xTimerGenericCommand>
 8007808:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	603b      	str	r3, [r7, #0]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007826:	4b09      	ldr	r3, [pc, #36]	; (800784c <prvSwitchTimerLists+0xc0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1b1      	bne.n	8007794 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <prvSwitchTimerLists+0xc0>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007836:	4b06      	ldr	r3, [pc, #24]	; (8007850 <prvSwitchTimerLists+0xc4>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a04      	ldr	r2, [pc, #16]	; (800784c <prvSwitchTimerLists+0xc0>)
 800783c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800783e:	4a04      	ldr	r2, [pc, #16]	; (8007850 <prvSwitchTimerLists+0xc4>)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	6013      	str	r3, [r2, #0]
}
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200016b8 	.word	0x200016b8
 8007850:	200016bc 	.word	0x200016bc

08007854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800785a:	f000 f96b 	bl	8007b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800785e:	4b15      	ldr	r3, [pc, #84]	; (80078b4 <prvCheckForValidListAndQueue+0x60>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d120      	bne.n	80078a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007866:	4814      	ldr	r0, [pc, #80]	; (80078b8 <prvCheckForValidListAndQueue+0x64>)
 8007868:	f7fe f848 	bl	80058fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800786c:	4813      	ldr	r0, [pc, #76]	; (80078bc <prvCheckForValidListAndQueue+0x68>)
 800786e:	f7fe f845 	bl	80058fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007872:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <prvCheckForValidListAndQueue+0x6c>)
 8007874:	4a10      	ldr	r2, [pc, #64]	; (80078b8 <prvCheckForValidListAndQueue+0x64>)
 8007876:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007878:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <prvCheckForValidListAndQueue+0x70>)
 800787a:	4a10      	ldr	r2, [pc, #64]	; (80078bc <prvCheckForValidListAndQueue+0x68>)
 800787c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800787e:	2300      	movs	r3, #0
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <prvCheckForValidListAndQueue+0x74>)
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <prvCheckForValidListAndQueue+0x78>)
 8007886:	2110      	movs	r1, #16
 8007888:	200a      	movs	r0, #10
 800788a:	f7fe f953 	bl	8005b34 <xQueueGenericCreateStatic>
 800788e:	4603      	mov	r3, r0
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <prvCheckForValidListAndQueue+0x60>)
 8007892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007894:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <prvCheckForValidListAndQueue+0x60>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <prvCheckForValidListAndQueue+0x60>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	490b      	ldr	r1, [pc, #44]	; (80078d0 <prvCheckForValidListAndQueue+0x7c>)
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fd6c 	bl	8006380 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a8:	f000 f974 	bl	8007b94 <vPortExitCritical>
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200016c0 	.word	0x200016c0
 80078b8:	20001690 	.word	0x20001690
 80078bc:	200016a4 	.word	0x200016a4
 80078c0:	200016b8 	.word	0x200016b8
 80078c4:	200016bc 	.word	0x200016bc
 80078c8:	2000176c 	.word	0x2000176c
 80078cc:	200016cc 	.word	0x200016cc
 80078d0:	0800820c 	.word	0x0800820c

080078d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3b04      	subs	r3, #4
 80078e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b04      	subs	r3, #4
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f023 0201 	bic.w	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3b04      	subs	r3, #4
 8007902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007904:	4a0c      	ldr	r2, [pc, #48]	; (8007938 <pxPortInitialiseStack+0x64>)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3b14      	subs	r3, #20
 800790e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3b04      	subs	r3, #4
 800791a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f06f 0202 	mvn.w	r2, #2
 8007922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3b20      	subs	r3, #32
 8007928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	0800793d 	.word	0x0800793d

0800793c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <prvTaskExitError+0x54>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d00a      	beq.n	8007966 <prvTaskExitError+0x2a>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <prvTaskExitError+0x28>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60bb      	str	r3, [r7, #8]
}
 8007978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800797a:	bf00      	nop
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0fc      	beq.n	800797c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	2000000c 	.word	0x2000000c
	...

080079a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <pxCurrentTCBConst2>)
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	6808      	ldr	r0, [r1, #0]
 80079a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	f380 8809 	msr	PSP, r0
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8811 	msr	BASEPRI, r0
 80079ba:	4770      	bx	lr
 80079bc:	f3af 8000 	nop.w

080079c0 <pxCurrentTCBConst2>:
 80079c0:	20001190 	.word	0x20001190
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop

080079c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079c8:	4808      	ldr	r0, [pc, #32]	; (80079ec <prvPortStartFirstTask+0x24>)
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	6800      	ldr	r0, [r0, #0]
 80079ce:	f380 8808 	msr	MSP, r0
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8814 	msr	CONTROL, r0
 80079da:	b662      	cpsie	i
 80079dc:	b661      	cpsie	f
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	df00      	svc	0
 80079e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ea:	bf00      	nop
 80079ec:	e000ed08 	.word	0xe000ed08

080079f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079f6:	4b46      	ldr	r3, [pc, #280]	; (8007b10 <xPortStartScheduler+0x120>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a46      	ldr	r2, [pc, #280]	; (8007b14 <xPortStartScheduler+0x124>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10a      	bne.n	8007a16 <xPortStartScheduler+0x26>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	613b      	str	r3, [r7, #16]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a16:	4b3e      	ldr	r3, [pc, #248]	; (8007b10 <xPortStartScheduler+0x120>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a3f      	ldr	r2, [pc, #252]	; (8007b18 <xPortStartScheduler+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10a      	bne.n	8007a36 <xPortStartScheduler+0x46>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	60fb      	str	r3, [r7, #12]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <xPortStartScheduler+0x12c>)
 8007a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <xPortStartScheduler+0x130>)
 8007a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a5e:	4b31      	ldr	r3, [pc, #196]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a60:	2207      	movs	r2, #7
 8007a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a64:	e009      	b.n	8007a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a66:	4b2f      	ldr	r3, [pc, #188]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	d0ef      	beq.n	8007a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a86:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <xPortStartScheduler+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f1c3 0307 	rsb	r3, r3, #7
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d00a      	beq.n	8007aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	60bb      	str	r3, [r7, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <xPortStartScheduler+0x134>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <xPortStartScheduler+0x134>)
 8007ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <xPortStartScheduler+0x134>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aba:	4a1a      	ldr	r2, [pc, #104]	; (8007b24 <xPortStartScheduler+0x134>)
 8007abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <xPortStartScheduler+0x138>)
 8007acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <xPortStartScheduler+0x138>)
 8007ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ade:	f000 f8dd 	bl	8007c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <xPortStartScheduler+0x13c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ae8:	f000 f8fc 	bl	8007ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <xPortStartScheduler+0x140>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <xPortStartScheduler+0x140>)
 8007af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007af8:	f7ff ff66 	bl	80079c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007afc:	f7ff f850 	bl	8006ba0 <vTaskSwitchContext>
	prvTaskExitError();
 8007b00:	f7ff ff1c 	bl	800793c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	e000ed00 	.word	0xe000ed00
 8007b14:	410fc271 	.word	0x410fc271
 8007b18:	410fc270 	.word	0x410fc270
 8007b1c:	e000e400 	.word	0xe000e400
 8007b20:	200017bc 	.word	0x200017bc
 8007b24:	200017c0 	.word	0x200017c0
 8007b28:	e000ed20 	.word	0xe000ed20
 8007b2c:	2000000c 	.word	0x2000000c
 8007b30:	e000ef34 	.word	0xe000ef34

08007b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	607b      	str	r3, [r7, #4]
}
 8007b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3301      	adds	r3, #1
 8007b54:	4a0d      	ldr	r2, [pc, #52]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <vPortEnterCritical+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10f      	bne.n	8007b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortEnterCritical+0x5c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	603b      	str	r3, [r7, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <vPortEnterCritical+0x4a>
	}
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	2000000c 	.word	0x2000000c
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <vPortExitCritical+0x50>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <vPortExitCritical+0x24>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	607b      	str	r3, [r7, #4]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <vPortExitCritical+0x50>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bc2:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <vPortExitCritical+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <vPortExitCritical+0x42>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f383 8811 	msr	BASEPRI, r3
}
 8007bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	2000000c 	.word	0x2000000c
	...

08007bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bf0:	f3ef 8009 	mrs	r0, PSP
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <pxCurrentTCBConst>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f01e 0f10 	tst.w	lr, #16
 8007c00:	bf08      	it	eq
 8007c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	6010      	str	r0, [r2, #0]
 8007c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c14:	f380 8811 	msr	BASEPRI, r0
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f7fe ffbe 	bl	8006ba0 <vTaskSwitchContext>
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f380 8811 	msr	BASEPRI, r0
 8007c2c:	bc09      	pop	{r0, r3}
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	6808      	ldr	r0, [r1, #0]
 8007c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c36:	f01e 0f10 	tst.w	lr, #16
 8007c3a:	bf08      	it	eq
 8007c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c40:	f380 8809 	msr	PSP, r0
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst>:
 8007c50:	20001190 	.word	0x20001190
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c72:	f7fe fedb 	bl	8006a2c <xTaskIncrementTick>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <xPortSysTickHandler+0x40>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f383 8811 	msr	BASEPRI, r3
}
 8007c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <vPortSetupTimerInterrupt+0x34>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <vPortSetupTimerInterrupt+0x38>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <vPortSetupTimerInterrupt+0x3c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <vPortSetupTimerInterrupt+0x40>)
 8007cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb6:	099b      	lsrs	r3, r3, #6
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <vPortSetupTimerInterrupt+0x44>)
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <vPortSetupTimerInterrupt+0x34>)
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	e000e010 	.word	0xe000e010
 8007cd4:	e000e018 	.word	0xe000e018
 8007cd8:	20000000 	.word	0x20000000
 8007cdc:	10624dd3 	.word	0x10624dd3
 8007ce0:	e000e014 	.word	0xe000e014

08007ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cf4 <vPortEnableVFP+0x10>
 8007ce8:	6801      	ldr	r1, [r0, #0]
 8007cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cee:	6001      	str	r1, [r0, #0]
 8007cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cf2:	bf00      	nop
 8007cf4:	e000ed88 	.word	0xe000ed88

08007cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cfe:	f3ef 8305 	mrs	r3, IPSR
 8007d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b0f      	cmp	r3, #15
 8007d08:	d914      	bls.n	8007d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d0a:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <vPortValidateInterruptPriority+0x70>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d14:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <vPortValidateInterruptPriority+0x74>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	7afa      	ldrb	r2, [r7, #11]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d20a      	bcs.n	8007d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <vPortValidateInterruptPriority+0x78>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <vPortValidateInterruptPriority+0x7c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d90a      	bls.n	8007d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	603b      	str	r3, [r7, #0]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <vPortValidateInterruptPriority+0x60>
	}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	e000e3f0 	.word	0xe000e3f0
 8007d6c:	200017bc 	.word	0x200017bc
 8007d70:	e000ed0c 	.word	0xe000ed0c
 8007d74:	200017c0 	.word	0x200017c0

08007d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	; 0x28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d84:	f7fe fd96 	bl	80068b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d88:	4b5b      	ldr	r3, [pc, #364]	; (8007ef8 <pvPortMalloc+0x180>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d90:	f000 f920 	bl	8007fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d94:	4b59      	ldr	r3, [pc, #356]	; (8007efc <pvPortMalloc+0x184>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 8093 	bne.w	8007ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01d      	beq.n	8007de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007da8:	2208      	movs	r2, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d014      	beq.n	8007de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f023 0307 	bic.w	r3, r3, #7
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <pvPortMalloc+0x6c>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	617b      	str	r3, [r7, #20]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d06e      	beq.n	8007ec8 <pvPortMalloc+0x150>
 8007dea:	4b45      	ldr	r3, [pc, #276]	; (8007f00 <pvPortMalloc+0x188>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d869      	bhi.n	8007ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007df4:	4b43      	ldr	r3, [pc, #268]	; (8007f04 <pvPortMalloc+0x18c>)
 8007df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007df8:	4b42      	ldr	r3, [pc, #264]	; (8007f04 <pvPortMalloc+0x18c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dfe:	e004      	b.n	8007e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d903      	bls.n	8007e1c <pvPortMalloc+0xa4>
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f1      	bne.n	8007e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e1c:	4b36      	ldr	r3, [pc, #216]	; (8007ef8 <pvPortMalloc+0x180>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d050      	beq.n	8007ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	4413      	add	r3, r2
 8007e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	2308      	movs	r3, #8
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d91f      	bls.n	8007e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <pvPortMalloc+0xf8>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	613b      	str	r3, [r7, #16]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e82:	69b8      	ldr	r0, [r7, #24]
 8007e84:	f000 f908 	bl	8008098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e88:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <pvPortMalloc+0x188>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <pvPortMalloc+0x188>)
 8007e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <pvPortMalloc+0x188>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <pvPortMalloc+0x190>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d203      	bcs.n	8007eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ea2:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <pvPortMalloc+0x188>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <pvPortMalloc+0x190>)
 8007ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <pvPortMalloc+0x184>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <pvPortMalloc+0x194>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	4a11      	ldr	r2, [pc, #68]	; (8007f0c <pvPortMalloc+0x194>)
 8007ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ec8:	f7fe fd02 	bl	80068d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <pvPortMalloc+0x174>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60fb      	str	r3, [r7, #12]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <pvPortMalloc+0x172>
	return pvReturn;
 8007eec:	69fb      	ldr	r3, [r7, #28]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3728      	adds	r7, #40	; 0x28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200053cc 	.word	0x200053cc
 8007efc:	200053e0 	.word	0x200053e0
 8007f00:	200053d0 	.word	0x200053d0
 8007f04:	200053c4 	.word	0x200053c4
 8007f08:	200053d4 	.word	0x200053d4
 8007f0c:	200053d8 	.word	0x200053d8

08007f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d04d      	beq.n	8007fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f22:	2308      	movs	r3, #8
 8007f24:	425b      	negs	r3, r3
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4413      	add	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <vPortFree+0xb8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <vPortFree+0x44>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	60fb      	str	r3, [r7, #12]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <vPortFree+0x62>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60bb      	str	r3, [r7, #8]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <vPortFree+0xb8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01e      	beq.n	8007fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11a      	bne.n	8007fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <vPortFree+0xb8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	43db      	mvns	r3, r3
 8007f92:	401a      	ands	r2, r3
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f98:	f7fe fc8c 	bl	80068b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <vPortFree+0xbc>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	4a09      	ldr	r2, [pc, #36]	; (8007fcc <vPortFree+0xbc>)
 8007fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007faa:	6938      	ldr	r0, [r7, #16]
 8007fac:	f000 f874 	bl	8008098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <vPortFree+0xc0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	4a06      	ldr	r2, [pc, #24]	; (8007fd0 <vPortFree+0xc0>)
 8007fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fba:	f7fe fc89 	bl	80068d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fbe:	bf00      	nop
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200053e0 	.word	0x200053e0
 8007fcc:	200053d0 	.word	0x200053d0
 8007fd0:	200053dc 	.word	0x200053dc

08007fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fe0:	4b27      	ldr	r3, [pc, #156]	; (8008080 <prvHeapInit+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00c      	beq.n	8008008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0307 	bic.w	r3, r3, #7
 8007ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	4a1f      	ldr	r2, [pc, #124]	; (8008080 <prvHeapInit+0xac>)
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800800c:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <prvHeapInit+0xb0>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <prvHeapInit+0xb0>)
 8008014:	2200      	movs	r2, #0
 8008016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	4413      	add	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008020:	2208      	movs	r2, #8
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1a9b      	subs	r3, r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a15      	ldr	r2, [pc, #84]	; (8008088 <prvHeapInit+0xb4>)
 8008034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <prvHeapInit+0xb4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <prvHeapInit+0xb4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvHeapInit+0xb4>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <prvHeapInit+0xb8>)
 8008062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <prvHeapInit+0xbc>)
 800806a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <prvHeapInit+0xc0>)
 800806e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	200017c4 	.word	0x200017c4
 8008084:	200053c4 	.word	0x200053c4
 8008088:	200053cc 	.word	0x200053cc
 800808c:	200053d4 	.word	0x200053d4
 8008090:	200053d0 	.word	0x200053d0
 8008094:	200053e0 	.word	0x200053e0

08008098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080a0:	4b28      	ldr	r3, [pc, #160]	; (8008144 <prvInsertBlockIntoFreeList+0xac>)
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	e002      	b.n	80080ac <prvInsertBlockIntoFreeList+0x14>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d8f7      	bhi.n	80080a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	4413      	add	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d108      	bne.n	80080da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	441a      	add	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	441a      	add	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d118      	bne.n	8008120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	4b15      	ldr	r3, [pc, #84]	; (8008148 <prvInsertBlockIntoFreeList+0xb0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d00d      	beq.n	8008116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	441a      	add	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e008      	b.n	8008128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <prvInsertBlockIntoFreeList+0xb0>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	e003      	b.n	8008128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d002      	beq.n	8008136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	200053c4 	.word	0x200053c4
 8008148:	200053cc 	.word	0x200053cc

0800814c <__libc_init_array>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	4d0d      	ldr	r5, [pc, #52]	; (8008184 <__libc_init_array+0x38>)
 8008150:	4c0d      	ldr	r4, [pc, #52]	; (8008188 <__libc_init_array+0x3c>)
 8008152:	1b64      	subs	r4, r4, r5
 8008154:	10a4      	asrs	r4, r4, #2
 8008156:	2600      	movs	r6, #0
 8008158:	42a6      	cmp	r6, r4
 800815a:	d109      	bne.n	8008170 <__libc_init_array+0x24>
 800815c:	4d0b      	ldr	r5, [pc, #44]	; (800818c <__libc_init_array+0x40>)
 800815e:	4c0c      	ldr	r4, [pc, #48]	; (8008190 <__libc_init_array+0x44>)
 8008160:	f000 f82e 	bl	80081c0 <_init>
 8008164:	1b64      	subs	r4, r4, r5
 8008166:	10a4      	asrs	r4, r4, #2
 8008168:	2600      	movs	r6, #0
 800816a:	42a6      	cmp	r6, r4
 800816c:	d105      	bne.n	800817a <__libc_init_array+0x2e>
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	f855 3b04 	ldr.w	r3, [r5], #4
 8008174:	4798      	blx	r3
 8008176:	3601      	adds	r6, #1
 8008178:	e7ee      	b.n	8008158 <__libc_init_array+0xc>
 800817a:	f855 3b04 	ldr.w	r3, [r5], #4
 800817e:	4798      	blx	r3
 8008180:	3601      	adds	r6, #1
 8008182:	e7f2      	b.n	800816a <__libc_init_array+0x1e>
 8008184:	080082a8 	.word	0x080082a8
 8008188:	080082a8 	.word	0x080082a8
 800818c:	080082a8 	.word	0x080082a8
 8008190:	080082ac 	.word	0x080082ac

08008194 <memcpy>:
 8008194:	440a      	add	r2, r1
 8008196:	4291      	cmp	r1, r2
 8008198:	f100 33ff 	add.w	r3, r0, #4294967295
 800819c:	d100      	bne.n	80081a0 <memcpy+0xc>
 800819e:	4770      	bx	lr
 80081a0:	b510      	push	{r4, lr}
 80081a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d1f9      	bne.n	80081a2 <memcpy+0xe>
 80081ae:	bd10      	pop	{r4, pc}

080081b0 <memset>:
 80081b0:	4402      	add	r2, r0
 80081b2:	4603      	mov	r3, r0
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d100      	bne.n	80081ba <memset+0xa>
 80081b8:	4770      	bx	lr
 80081ba:	f803 1b01 	strb.w	r1, [r3], #1
 80081be:	e7f9      	b.n	80081b4 <memset+0x4>

080081c0 <_init>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr

080081cc <_fini>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr
