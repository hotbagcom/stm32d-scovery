
DISCOvery6_ADC_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009010  08009010  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009018  08009018  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000085c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ec  200008ec  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f3c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf0  00000000  00000000  00037ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  0003bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025001  00000000  00000000  0003dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adc1  00000000  00000000  00062fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d81b6  00000000  00000000  0007dd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155f28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050b4  00000000  00000000  00155f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fdc 	.word	0x08008fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008fdc 	.word	0x08008fdc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fd14 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f888 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f9d8 	bl	80010c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d18:	f000 f942 	bl	8000fa0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d1c:	f000 f96e 	bl	8000ffc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d20:	f000 f99c 	bl	800105c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d24:	f007 fd12 	bl	800874c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000d28:	f000 f8e6 	bl	8000ef8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8000d2c:	4836      	ldr	r0, [pc, #216]	; (8000e08 <main+0x100>)
 8000d2e:	f000 fddd 	bl	80018ec <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d32:	f007 fd31 	bl	8008798 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    b_pb_state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000d36:	2101      	movs	r1, #1
 8000d38:	4834      	ldr	r0, [pc, #208]	; (8000e0c <main+0x104>)
 8000d3a:	f001 fcc7 	bl	80026cc <HAL_GPIO_ReadPin>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <main+0x108>)
 8000d44:	601a      	str	r2, [r3, #0]
    if( b_pb_state){
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <main+0x108>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d046      	beq.n	8000ddc <main+0xd4>
    	adc_value = HAL_ADC_GetValue(&hadc1);
 8000d4e:	482e      	ldr	r0, [pc, #184]	; (8000e08 <main+0x100>)
 8000d50:	f000 ffba 	bl	8001cc8 <HAL_ADC_GetValue>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <main+0x10c>)
 8000d5a:	801a      	strh	r2, [r3, #0]
    	adc_voltage = adc_value*5.0/1023;
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <main+0x10c>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fb83 	bl	800046c <__aeabi_i2d>
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <main+0x110>)
 8000d6c:	f7ff fbe8 	bl	8000540 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	a321      	add	r3, pc, #132	; (adr r3, 8000e00 <main+0xf8>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fd09 	bl	8000794 <__aeabi_ddiv>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fdeb 	bl	8000964 <__aeabi_d2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <main+0x114>)
 8000d92:	6013      	str	r3, [r2, #0]

    	 if(adc_value < 512){
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <main+0x10c>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9c:	d20c      	bcs.n	8000db8 <main+0xb0>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <main+0x118>)
 8000da6:	f001 fca9 	bl	80026fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db0:	481b      	ldr	r0, [pc, #108]	; (8000e20 <main+0x118>)
 8000db2:	f001 fca3 	bl	80026fc <HAL_GPIO_WritePin>
 8000db6:	e7bc      	b.n	8000d32 <main+0x2a>
		}
		else if(adc_value > 512){
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <main+0x10c>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc0:	d9b7      	bls.n	8000d32 <main+0x2a>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <main+0x118>)
 8000dca:	f001 fc97 	bl	80026fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <main+0x118>)
 8000dd6:	f001 fc91 	bl	80026fc <HAL_GPIO_WritePin>
 8000dda:	e7aa      	b.n	8000d32 <main+0x2a>
		}
    }
    else if( !b_pb_state){
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <main+0x108>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1a6      	bne.n	8000d32 <main+0x2a>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <main+0x118>)
 8000dec:	f001 fc86 	bl	80026fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <main+0x118>)
 8000df8:	f001 fc80 	bl	80026fc <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000dfc:	e799      	b.n	8000d32 <main+0x2a>
 8000dfe:	bf00      	nop
 8000e00:	00000000 	.word	0x00000000
 8000e04:	408ff800 	.word	0x408ff800
 8000e08:	200000ac 	.word	0x200000ac
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	200001e8 	.word	0x200001e8
 8000e14:	200001ec 	.word	0x200001ec
 8000e18:	40140000 	.word	0x40140000
 8000e1c:	200001f0 	.word	0x200001f0
 8000e20:	40020c00 	.word	0x40020c00

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	; 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	; 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 ffcc 	bl	8008dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e94:	2308      	movs	r3, #8
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fe2e 	bl	8004b0c <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eb6:	f000 fa05 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 f88f 	bl	8004ffc <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ee4:	f000 f9ee 	bl	80012c4 <Error_Handler>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3750      	adds	r7, #80	; 0x50
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f0c:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <MX_ADC1_Init+0xa0>)
 8000f0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f3c:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <MX_ADC1_Init+0xa4>)
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f5c:	f000 fc82 	bl	8001864 <HAL_ADC_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000f66:	f000 f9ad 	bl	80012c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f6a:	230e      	movs	r3, #14
 8000f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f72:	2307      	movs	r3, #7
 8000f74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_ADC1_Init+0x9c>)
 8000f7c:	f000 fed0 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f86:	f000 f99d 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000ac 	.word	0x200000ac
 8000f98:	40012000 	.word	0x40012000
 8000f9c:	0f000001 	.word	0x0f000001

08000fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <MX_I2C1_Init+0x54>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x58>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fde:	f002 ffb1 	bl	8003f44 <HAL_I2C_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe8:	f000 f96c 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000f4 	.word	0x200000f4
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	000186a0 	.word	0x000186a0

08000ffc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_I2S3_Init+0x54>)
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <MX_I2S3_Init+0x58>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2S3_Init+0x54>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_I2S3_Init+0x54>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_I2S3_Init+0x54>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_I2S3_Init+0x54>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_I2S3_Init+0x54>)
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <MX_I2S3_Init+0x5c>)
 8001026:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_I2S3_Init+0x54>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_I2S3_Init+0x54>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_I2S3_Init+0x54>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_I2S3_Init+0x54>)
 800103c:	f003 f8c6 	bl	80041cc <HAL_I2S_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001046:	f000 f93d 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000148 	.word	0x20000148
 8001054:	40003c00 	.word	0x40003c00
 8001058:	00017700 	.word	0x00017700

0800105c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_SPI1_Init+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_SPI1_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_SPI1_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_SPI1_Init+0x64>)
 80010ae:	f004 faf1 	bl	8005694 <HAL_SPI_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010b8:	f000 f904 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000190 	.word	0x20000190
 80010c4:	40013000 	.word	0x40013000

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b72      	ldr	r3, [pc, #456]	; (80012ac <MX_GPIO_Init+0x1e4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a71      	ldr	r2, [pc, #452]	; (80012ac <MX_GPIO_Init+0x1e4>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <MX_GPIO_Init+0x1e4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b68      	ldr	r3, [pc, #416]	; (80012ac <MX_GPIO_Init+0x1e4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b64      	ldr	r3, [pc, #400]	; (80012ac <MX_GPIO_Init+0x1e4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a63      	ldr	r2, [pc, #396]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b61      	ldr	r3, [pc, #388]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b5d      	ldr	r3, [pc, #372]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a5c      	ldr	r2, [pc, #368]	; (80012ac <MX_GPIO_Init+0x1e4>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b56      	ldr	r3, [pc, #344]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a55      	ldr	r2, [pc, #340]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <MX_GPIO_Init+0x1e4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2108      	movs	r1, #8
 800118a:	4849      	ldr	r0, [pc, #292]	; (80012b0 <MX_GPIO_Init+0x1e8>)
 800118c:	f001 fab6 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2101      	movs	r1, #1
 8001194:	4847      	ldr	r0, [pc, #284]	; (80012b4 <MX_GPIO_Init+0x1ec>)
 8001196:	f001 fab1 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800119a:	2200      	movs	r2, #0
 800119c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011a0:	4845      	ldr	r0, [pc, #276]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 80011a2:	f001 faab 	bl	80026fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011a6:	2308      	movs	r3, #8
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	483c      	ldr	r0, [pc, #240]	; (80012b0 <MX_GPIO_Init+0x1e8>)
 80011be:	f001 f8e9 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4836      	ldr	r0, [pc, #216]	; (80012b4 <MX_GPIO_Init+0x1ec>)
 80011da:	f001 f8db 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011de:	2308      	movs	r3, #8
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ee:	2305      	movs	r3, #5
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	482e      	ldr	r0, [pc, #184]	; (80012b4 <MX_GPIO_Init+0x1ec>)
 80011fa:	f001 f8cb 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011fe:	2301      	movs	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001202:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	482a      	ldr	r0, [pc, #168]	; (80012bc <MX_GPIO_Init+0x1f4>)
 8001214:	f001 f8be 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001218:	2304      	movs	r3, #4
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	4825      	ldr	r0, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 800122c:	f001 f8b2 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001242:	2305      	movs	r3, #5
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	481c      	ldr	r0, [pc, #112]	; (80012c0 <MX_GPIO_Init+0x1f8>)
 800124e:	f001 f8a1 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001252:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001256:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 800126c:	f001 f892 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001270:	2320      	movs	r3, #32
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_GPIO_Init+0x1f0>)
 8001284:	f001 f886 	bl	8002394 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800128c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_GPIO_Init+0x1e8>)
 800129e:	f001 f879 	bl	8002394 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	; 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_MspInit+0x4c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x4c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x4c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800130e:	2007      	movs	r0, #7
 8001310:	f000 fffe 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <HAL_ADC_MspInit+0x8c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12f      	bne.n	80013a2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_ADC_MspInit+0x90>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_ADC_MspInit+0x90>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_ADC_MspInit+0x90>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_ADC_MspInit+0x90>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_ADC_MspInit+0x90>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_ADC_MspInit+0x90>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = pot1_inte_Pin;
 800137a:	2310      	movs	r3, #16
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot1_inte_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <HAL_ADC_MspInit+0x94>)
 800138e:	f001 f801 	bl	8002394 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2012      	movs	r0, #18
 8001398:	f000 ffc5 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800139c:	2012      	movs	r0, #18
 800139e:	f000 ffde 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40012000 	.word	0x40012000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020800 	.word	0x40020800

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_I2C_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12c      	bne.n	8001434 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_I2C_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2312      	movs	r3, #18
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001408:	2304      	movs	r3, #4
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_I2C_MspInit+0x8c>)
 8001414:	f000 ffbe 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0x88>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_I2C_MspInit+0x88>)
 8001422:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_I2C_MspInit+0x88>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40005400 	.word	0x40005400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400

08001448 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a31      	ldr	r2, [pc, #196]	; (8001538 <HAL_I2S_MspInit+0xf0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d15a      	bne.n	800152e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800147c:	23c0      	movs	r3, #192	; 0xc0
 800147e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4618      	mov	r0, r3
 800148a:	f003 ffc3 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001494:	f7ff ff16 	bl	80012c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_I2S_MspInit+0xf4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a26      	ldr	r2, [pc, #152]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_I2S_MspInit+0xf4>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014ec:	2310      	movs	r3, #16
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014fc:	2306      	movs	r3, #6
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <HAL_I2S_MspInit+0xf8>)
 8001508:	f000 ff44 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800150c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800151e:	2306      	movs	r3, #6
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <HAL_I2S_MspInit+0xfc>)
 800152a:	f000 ff33 	bl	8002394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3738      	adds	r7, #56	; 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40003c00 	.word	0x40003c00
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020800 	.word	0x40020800

08001548 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_SPI_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12b      	bne.n	80015c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 8001574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_SPI_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015a2:	23e0      	movs	r3, #224	; 0xe0
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b2:	2305      	movs	r3, #5
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_SPI_MspInit+0x8c>)
 80015be:	f000 fee9 	bl	8002394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40013000 	.word	0x40013000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f8da 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <ADC_IRQHandler+0x10>)
 8001632:	f000 fa39 	bl	8001aa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200000ac 	.word	0x200000ac

08001640 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <OTG_FS_IRQHandler+0x10>)
 8001646:	f001 fadd 	bl	8002c04 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200005d8 	.word	0x200005d8

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f007 fb6a 	bl	8008d5c <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20020000 	.word	0x20020000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	200001f4 	.word	0x200001f4
 80016bc:	200008f0 	.word	0x200008f0

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f007 fb29 	bl	8008d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff faf7 	bl	8000d08 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001728:	08009020 	.word	0x08009020
  ldr r2, =_sbss
 800172c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001730:	200008ec 	.word	0x200008ec

08001734 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <CAN1_RX0_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 fdd5 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fdb0 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fded 	bl	800237a <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 fdb5 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	200001f8 	.word	0x200001f8

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200001f8 	.word	0x200001f8

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e033      	b.n	80018e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fd4c 	bl	8001320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb54 	bl	8001f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Start_IT+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e0bd      	b.n	8001a82 <HAL_ADC_Start_IT+0x196>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d018      	beq.n	800194e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_ADC_Start_IT+0x1a4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_ADC_Start_IT+0x1a8>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	f040 8085 	bne.w	8001a68 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001988:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800199c:	d106      	bne.n	80019ac <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f023 0206 	bic.w	r2, r3, #6
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
 80019aa:	e002      	b.n	80019b2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_ADC_Start_IT+0x1ac>)
 80019bc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d12a      	bne.n	8001a3e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <HAL_ADC_Start_IT+0x1b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d015      	beq.n	8001a1e <HAL_ADC_Start_IT+0x132>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <HAL_ADC_Start_IT+0x1b4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_Start_IT+0x11c>
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_ADC_Start_IT+0x1ac>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <HAL_ADC_Start_IT+0x1b8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d136      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_ADC_Start_IT+0x1ac>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d130      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d129      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e020      	b.n	8001a80 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_ADC_Start_IT+0x1b0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d11b      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d114      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	e00b      	b.n	8001a80 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f043 0210 	orr.w	r2, r3, #16
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	40012300 	.word	0x40012300
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40012100 	.word	0x40012100
 8001aa4:	40012200 	.word	0x40012200

08001aa8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d049      	beq.n	8001b72 <HAL_ADC_IRQHandler+0xca>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d046      	beq.n	8001b72 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12b      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d127      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d119      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0220 	bic.w	r2, r2, #32
 8001b3c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8bd 	bl	8001ce2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0212 	mvn.w	r2, #18
 8001b70:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d057      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x190>
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d054      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d139      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d12b      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d124      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d11d      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d119      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa97 	bl	800215c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 020c 	mvn.w	r2, #12
 8001c36:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d017      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x1d6>
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d014      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f841 	bl	8001cf6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0201 	mvn.w	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c8c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x218>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f043 0202 	orr.w	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0220 	mvn.w	r2, #32
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f82a 	bl	8001d0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0220 	mvn.w	r2, #32
 8001cbe:	601a      	str	r2, [r3, #0]
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1c>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e105      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x228>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d925      	bls.n	8001d98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68d9      	ldr	r1, [r3, #12]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4403      	add	r3, r0
 8001d8a:	3b1e      	subs	r3, #30
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	e022      	b.n	8001dde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	2207      	movs	r2, #7
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6919      	ldr	r1, [r3, #16]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4403      	add	r3, r0
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d824      	bhi.n	8001e30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b05      	subs	r3, #5
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b05      	subs	r3, #5
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2e:	e04c      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d824      	bhi.n	8001e82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b23      	subs	r3, #35	; 0x23
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43da      	mvns	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	400a      	ands	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b23      	subs	r3, #35	; 0x23
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e80:	e023      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b41      	subs	r3, #65	; 0x41
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b41      	subs	r3, #65	; 0x41
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_ADC_ConfigChannel+0x234>)
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_ADC_ConfigChannel+0x238>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1cc>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_ADC_ConfigChannel+0x238>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d123      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x1e6>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d11b      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d111      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_ADC_ConfigChannel+0x23c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_ADC_ConfigChannel+0x240>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9a      	lsrs	r2, r3, #18
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40012300 	.word	0x40012300
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	431bde83 	.word	0x431bde83

08001f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <ADC_Init+0x1f0>)
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	021a      	lsls	r2, r3, #8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4a58      	ldr	r2, [pc, #352]	; (8002158 <ADC_Init+0x1f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800202c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e00f      	b.n	8002062 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002060:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0202 	bic.w	r2, r2, #2
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e1b      	ldrb	r3, [r3, #24]
 800207c:	005a      	lsls	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	3b01      	subs	r3, #1
 80020bc:	035a      	lsls	r2, r3, #13
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	e007      	b.n	80020d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	051a      	lsls	r2, r3, #20
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800211a:	025a      	lsls	r2, r3, #9
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	029a      	lsls	r2, r3, #10
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40012300 	.word	0x40012300
 8002158:	0f000001 	.word	0x0f000001

0800215c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e16b      	b.n	8002688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b0:	2201      	movs	r2, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	f040 815a 	bne.w	8002682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d005      	beq.n	80023e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d130      	bne.n	8002448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800241c:	2201      	movs	r2, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0201 	and.w	r2, r3, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b03      	cmp	r3, #3
 8002452:	d017      	beq.n	8002484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d123      	bne.n	80024d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	08da      	lsrs	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	08da      	lsrs	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3208      	adds	r2, #8
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0203 	and.w	r2, r3, #3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80b4 	beq.w	8002682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <HAL_GPIO_Init+0x30c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	4a5f      	ldr	r2, [pc, #380]	; (80026a0 <HAL_GPIO_Init+0x30c>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002528:	6453      	str	r3, [r2, #68]	; 0x44
 800252a:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_GPIO_Init+0x30c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002536:	4a5b      	ldr	r2, [pc, #364]	; (80026a4 <HAL_GPIO_Init+0x310>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x314>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02b      	beq.n	80025ba <HAL_GPIO_Init+0x226>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x318>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d025      	beq.n	80025b6 <HAL_GPIO_Init+0x222>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_GPIO_Init+0x31c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01f      	beq.n	80025b2 <HAL_GPIO_Init+0x21e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x320>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x21a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x324>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x216>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <HAL_GPIO_Init+0x328>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x212>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x32c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <HAL_GPIO_Init+0x330>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x20a>
 800259a:	2307      	movs	r3, #7
 800259c:	e00e      	b.n	80025bc <HAL_GPIO_Init+0x228>
 800259e:	2308      	movs	r3, #8
 80025a0:	e00c      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00a      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025a6:	2305      	movs	r3, #5
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x228>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x310>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_GPIO_Init+0x334>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_GPIO_Init+0x334>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_GPIO_Init+0x334>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_GPIO_Init+0x334>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_GPIO_Init+0x334>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f ae90 	bls.w	80023b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40021c00 	.word	0x40021c00
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e001      	b.n	80026ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800272e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002730:	b08f      	sub	sp, #60	; 0x3c
 8002732:	af0a      	add	r7, sp, #40	; 0x28
 8002734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e054      	b.n	80027ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f006 f854 	bl	8008808 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2203      	movs	r2, #3
 8002764:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f883 	bl	800588a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	687e      	ldr	r6, [r7, #4]
 800278c:	466d      	mov	r5, sp
 800278e:	f106 0410 	add.w	r4, r6, #16
 8002792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800279e:	e885 0003 	stmia.w	r5, {r0, r1}
 80027a2:	1d33      	adds	r3, r6, #4
 80027a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f002 fffd 	bl	80057a6 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f87a 	bl	80058ac <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	687e      	ldr	r6, [r7, #4]
 80027c0:	466d      	mov	r5, sp
 80027c2:	f106 0410 	add.w	r4, r6, #16
 80027c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d6:	1d33      	adds	r3, r6, #4
 80027d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f003 fa02 	bl	8005be4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b089      	sub	sp, #36	; 0x24
 80027f6:	af04      	add	r7, sp, #16
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	4603      	mov	r3, r0
 8002802:	70fb      	strb	r3, [r7, #3]
 8002804:	460b      	mov	r3, r1
 8002806:	70bb      	strb	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_HCD_HC_Init+0x28>
 8002816:	2302      	movs	r3, #2
 8002818:	e076      	b.n	8002908 <HAL_HCD_HC_Init+0x116>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	333d      	adds	r3, #61	; 0x3d
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3338      	adds	r3, #56	; 0x38
 8002842:	787a      	ldrb	r2, [r7, #1]
 8002844:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3340      	adds	r3, #64	; 0x40
 8002854:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002856:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3339      	adds	r3, #57	; 0x39
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	333f      	adds	r3, #63	; 0x3f
 8002878:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800287c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	78ba      	ldrb	r2, [r7, #2]
 8002882:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002886:	b2d0      	uxtb	r0, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	333a      	adds	r3, #58	; 0x3a
 8002894:	4602      	mov	r2, r0
 8002896:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002898:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da09      	bge.n	80028b4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	333b      	adds	r3, #59	; 0x3b
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e008      	b.n	80028c6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	333b      	adds	r3, #59	; 0x3b
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333c      	adds	r3, #60	; 0x3c
 80028d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028d8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	787c      	ldrb	r4, [r7, #1]
 80028e0:	78ba      	ldrb	r2, [r7, #2]
 80028e2:	78f9      	ldrb	r1, [r7, #3]
 80028e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	4623      	mov	r3, r4
 80028f6:	f003 fafb 	bl	8005ef0 <USB_HC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bd90      	pop	{r4, r7, pc}

08002910 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_HCD_HC_Halt+0x1e>
 800292a:	2302      	movs	r3, #2
 800292c:	e00f      	b.n	800294e <HAL_HCD_HC_Halt+0x3e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fd4b 	bl	80063da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4603      	mov	r3, r0
 8002968:	70fb      	strb	r3, [r7, #3]
 800296a:	460b      	mov	r3, r1
 800296c:	70bb      	strb	r3, [r7, #2]
 800296e:	4613      	mov	r3, r2
 8002970:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	333b      	adds	r3, #59	; 0x3b
 8002980:	78ba      	ldrb	r2, [r7, #2]
 8002982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	333f      	adds	r3, #63	; 0x3f
 8002992:	787a      	ldrb	r2, [r7, #1]
 8002994:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002996:	7c3b      	ldrb	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d112      	bne.n	80029c2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3342      	adds	r3, #66	; 0x42
 80029aa:	2203      	movs	r2, #3
 80029ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	333d      	adds	r3, #61	; 0x3d
 80029bc:	7f3a      	ldrb	r2, [r7, #28]
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e008      	b.n	80029d4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3342      	adds	r3, #66	; 0x42
 80029d0:	2202      	movs	r2, #2
 80029d2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	f200 80c6 	bhi.w	8002b68 <HAL_HCD_HC_SubmitRequest+0x210>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002b55 	.word	0x08002b55
 80029ec:	08002a59 	.word	0x08002a59
 80029f0:	08002ad7 	.word	0x08002ad7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029f4:	7c3b      	ldrb	r3, [r7, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f040 80b8 	bne.w	8002b6c <HAL_HCD_HC_SubmitRequest+0x214>
 80029fc:	78bb      	ldrb	r3, [r7, #2]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 80b4 	bne.w	8002b6c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002a04:	8b3b      	ldrh	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3355      	adds	r3, #85	; 0x55
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3355      	adds	r3, #85	; 0x55
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3342      	adds	r3, #66	; 0x42
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a42:	e093      	b.n	8002b6c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3342      	adds	r3, #66	; 0x42
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
      break;
 8002a56:	e089      	b.n	8002b6c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a58:	78bb      	ldrb	r3, [r7, #2]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11d      	bne.n	8002a9a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3355      	adds	r3, #85	; 0x55
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3342      	adds	r3, #66	; 0x42
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a84:	e073      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3342      	adds	r3, #66	; 0x42
 8002a94:	2202      	movs	r2, #2
 8002a96:	701a      	strb	r2, [r3, #0]
      break;
 8002a98:	e069      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3354      	adds	r3, #84	; 0x54
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3342      	adds	r3, #66	; 0x42
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
      break;
 8002ac0:	e055      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3342      	adds	r3, #66	; 0x42
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	701a      	strb	r2, [r3, #0]
      break;
 8002ad4:	e04b      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ad6:	78bb      	ldrb	r3, [r7, #2]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11d      	bne.n	8002b18 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3355      	adds	r3, #85	; 0x55
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3342      	adds	r3, #66	; 0x42
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b02:	e034      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3342      	adds	r3, #66	; 0x42
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
      break;
 8002b16:	e02a      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3354      	adds	r3, #84	; 0x54
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3342      	adds	r3, #66	; 0x42
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
      break;
 8002b3e:	e016      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3342      	adds	r3, #66	; 0x42
 8002b4e:	2202      	movs	r2, #2
 8002b50:	701a      	strb	r2, [r3, #0]
      break;
 8002b52:	e00c      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3342      	adds	r3, #66	; 0x42
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002b6c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3344      	adds	r3, #68	; 0x44
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	8b3a      	ldrh	r2, [r7, #24]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	202c      	movs	r0, #44	; 0x2c
 8002b88:	fb00 f303 	mul.w	r3, r0, r3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334c      	adds	r3, #76	; 0x4c
 8002b90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3360      	adds	r3, #96	; 0x60
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3350      	adds	r3, #80	; 0x50
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3339      	adds	r3, #57	; 0x39
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3361      	adds	r3, #97	; 0x61
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	222c      	movs	r2, #44	; 0x2c
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	3338      	adds	r3, #56	; 0x38
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	18d1      	adds	r1, r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f003 fa9e 	bl	8006134 <USB_HC_StartXfer>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 ff9f 	bl	8005b5e <USB_GetMode>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 80f6 	bne.w	8002e14 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 ff83 	bl	8005b38 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80ec 	beq.w	8002e12 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 ff7a 	bl	8005b38 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c4e:	d104      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 ff6a 	bl	8005b38 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6e:	d104      	bne.n	8002c7a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 ff5a 	bl	8005b38 <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c8e:	d104      	bne.n	8002c9a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 ff4a 	bl	8005b38 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d103      	bne.n	8002cb6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 ff3c 	bl	8005b38 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cca:	d11c      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cd4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	6938      	ldr	r0, [r7, #16]
 8002cea:	f002 fe2b 	bl	8005944 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cee:	6938      	ldr	r0, [r7, #16]
 8002cf0:	f002 fe5c 	bl	80059ac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 f832 	bl	8005d64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f005 fdff 	bl	8008904 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 ff14 	bl	8005b38 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1a:	d102      	bne.n	8002d22 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f001 f89e 	bl	8003e5e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 ff06 	bl	8005b38 <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d106      	bne.n	8002d44 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f005 fdc8 	bl	80088cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2208      	movs	r2, #8
 8002d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fef5 	bl	8005b38 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d101      	bne.n	8002d5c <HAL_HCD_IRQHandler+0x158>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_HCD_IRQHandler+0x15a>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0210 	bic.w	r2, r2, #16
 8002d70:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 ffa1 	bl	8003cba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0210 	orr.w	r2, r2, #16
 8002d86:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f002 fed3 	bl	8005b38 <USB_ReadInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9c:	d13a      	bne.n	8002e14 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fb08 	bl	80063b8 <USB_HC_ReadInterrupt>
 8002da8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e025      	b.n	8002dfc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d018      	beq.n	8002df6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dda:	d106      	bne.n	8002dea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8ab 	bl	8002f3e <HCD_HC_IN_IRQHandler>
 8002de8:	e005      	b.n	8002df6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fbf9 	bl	80035e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3d4      	bcc.n	8002db0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0e:	615a      	str	r2, [r3, #20]
 8002e10:	e000      	b.n	8002e14 <HAL_HCD_IRQHandler+0x210>
      return;
 8002e12:	bf00      	nop
    }
  }
}
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_HCD_Start+0x16>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e013      	b.n	8002e58 <HAL_HCD_Start+0x3e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fff4 	bl	8005e2c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fd0d 	bl	8005868 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_HCD_Stop+0x16>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e00d      	b.n	8002e92 <HAL_HCD_Stop+0x32>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 fbe2 	bl	800664c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 ff96 	bl	8005dd8 <USB_ResetPort>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3360      	adds	r3, #96	; 0x60
 8002ed0:	781b      	ldrb	r3, [r3, #0]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3350      	adds	r3, #80	; 0x50
 8002ef8:	681b      	ldr	r3, [r3, #0]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 ffda 	bl	8005ecc <USB_GetCurrentFrame>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f002 ffb5 	bl	8005e9e <USB_GetHostSpeed>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d11a      	bne.n	8002fa4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3361      	adds	r3, #97	; 0x61
 8002f8e:	2206      	movs	r2, #6
 8002f90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fa1c 	bl	80063da <USB_HC_Halt>
 8002fa2:	e0af      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d11b      	bne.n	8002ff4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3361      	adds	r3, #97	; 0x61
 8002fde:	2207      	movs	r2, #7
 8002fe0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 f9f4 	bl	80063da <USB_HC_Halt>
 8002ff2:	e087      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d109      	bne.n	800301e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	2320      	movs	r3, #32
 800301a:	6093      	str	r3, [r2, #8]
 800301c:	e072      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d11a      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	2308      	movs	r3, #8
 8003044:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3361      	adds	r3, #97	; 0x61
 8003054:	2205      	movs	r2, #5
 8003056:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f9b9 	bl	80063da <USB_HC_Halt>
 8003068:	e04c      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003080:	d11b      	bne.n	80030ba <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	461a      	mov	r2, r3
 8003090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003094:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3361      	adds	r3, #97	; 0x61
 80030a4:	2208      	movs	r2, #8
 80030a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 f991 	bl	80063da <USB_HC_Halt>
 80030b8:	e024      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b80      	cmp	r3, #128	; 0x80
 80030ce:	d119      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3361      	adds	r3, #97	; 0x61
 80030f0:	2206      	movs	r2, #6
 80030f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 f96b 	bl	80063da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311a:	d112      	bne.n	8003142 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f003 f957 	bl	80063da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003140:	e24e      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	f040 80df 	bne.w	8003318 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3348      	adds	r3, #72	; 0x48
 8003170:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0159      	lsls	r1, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	440b      	add	r3, r1
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003184:	1ad2      	subs	r2, r2, r3
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	202c      	movs	r0, #44	; 0x2c
 800318c:	fb00 f303 	mul.w	r3, r0, r3
 8003190:	440b      	add	r3, r1
 8003192:	3350      	adds	r3, #80	; 0x50
 8003194:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	3361      	adds	r3, #97	; 0x61
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	335c      	adds	r3, #92	; 0x5c
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	2301      	movs	r3, #1
 80031ca:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	333f      	adds	r3, #63	; 0x3f
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	333f      	adds	r3, #63	; 0x3f
 80031ee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d111      	bne.n	8003218 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 f8eb 	bl	80063da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	2310      	movs	r3, #16
 8003214:	6093      	str	r3, [r2, #8]
 8003216:	e03a      	b.n	800328e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	333f      	adds	r3, #63	; 0x3f
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d009      	beq.n	8003240 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	333f      	adds	r3, #63	; 0x3f
 800323a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800323c:	2b01      	cmp	r3, #1
 800323e:	d126      	bne.n	800328e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	440a      	add	r2, r1
 8003256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800325e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3360      	adds	r3, #96	; 0x60
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	b2d9      	uxtb	r1, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	202c      	movs	r0, #44	; 0x2c
 800327c:	fb00 f303 	mul.w	r3, r0, r3
 8003280:	4413      	add	r3, r2
 8003282:	3360      	adds	r3, #96	; 0x60
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f005 fb49 	bl	8008920 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d12b      	bne.n	80032ee <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3348      	adds	r3, #72	; 0x48
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	202c      	movs	r0, #44	; 0x2c
 80032ac:	fb00 f202 	mul.w	r2, r0, r2
 80032b0:	440a      	add	r2, r1
 80032b2:	3240      	adds	r2, #64	; 0x40
 80032b4:	8812      	ldrh	r2, [r2, #0]
 80032b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 818e 	beq.w	80035e0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3354      	adds	r3, #84	; 0x54
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f083 0301 	eor.w	r3, r3, #1
 80032d8:	b2d8      	uxtb	r0, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3354      	adds	r3, #84	; 0x54
 80032e8:	4602      	mov	r2, r0
 80032ea:	701a      	strb	r2, [r3, #0]
}
 80032ec:	e178      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3354      	adds	r3, #84	; 0x54
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2d8      	uxtb	r0, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3354      	adds	r3, #84	; 0x54
 8003312:	4602      	mov	r2, r0
 8003314:	701a      	strb	r2, [r3, #0]
}
 8003316:	e163      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b02      	cmp	r3, #2
 800332c:	f040 80f6 	bne.w	800351c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3361      	adds	r3, #97	; 0x61
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d109      	bne.n	8003358 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3360      	adds	r3, #96	; 0x60
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e0c9      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3361      	adds	r3, #97	; 0x61
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b05      	cmp	r3, #5
 800336a:	d109      	bne.n	8003380 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3360      	adds	r3, #96	; 0x60
 800337a:	2205      	movs	r2, #5
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e0b5      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3361      	adds	r3, #97	; 0x61
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d009      	beq.n	80033a8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3361      	adds	r3, #97	; 0x61
 80033a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d150      	bne.n	800344a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	335c      	adds	r3, #92	; 0x5c
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	202c      	movs	r0, #44	; 0x2c
 80033c0:	fb00 f303 	mul.w	r3, r0, r3
 80033c4:	440b      	add	r3, r1
 80033c6:	335c      	adds	r3, #92	; 0x5c
 80033c8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	335c      	adds	r3, #92	; 0x5c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d912      	bls.n	8003404 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	335c      	adds	r3, #92	; 0x5c
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3360      	adds	r3, #96	; 0x60
 80033fe:	2204      	movs	r2, #4
 8003400:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003402:	e073      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3360      	adds	r3, #96	; 0x60
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800342c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003434:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003448:	e050      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	3361      	adds	r3, #97	; 0x61
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d122      	bne.n	80034a4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	3360      	adds	r3, #96	; 0x60
 800346c:	2202      	movs	r2, #2
 800346e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003486:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800348e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e023      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3361      	adds	r3, #97	; 0x61
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	d119      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	335c      	adds	r3, #92	; 0x5c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	202c      	movs	r0, #44	; 0x2c
 80034d0:	fb00 f303 	mul.w	r3, r0, r3
 80034d4:	440b      	add	r3, r1
 80034d6:	335c      	adds	r3, #92	; 0x5c
 80034d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3360      	adds	r3, #96	; 0x60
 80034e8:	2204      	movs	r2, #4
 80034ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2302      	movs	r3, #2
 80034fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	b2d9      	uxtb	r1, r3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	202c      	movs	r0, #44	; 0x2c
 8003508:	fb00 f303 	mul.w	r3, r0, r3
 800350c:	4413      	add	r3, r2
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f005 fa03 	bl	8008920 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800351a:	e061      	b.n	80035e0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b10      	cmp	r3, #16
 8003530:	d156      	bne.n	80035e0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	333f      	adds	r3, #63	; 0x3f
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d111      	bne.n	800356a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	335c      	adds	r3, #92	; 0x5c
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f002 ff39 	bl	80063da <USB_HC_Halt>
 8003568:	e031      	b.n	80035ce <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	333f      	adds	r3, #63	; 0x3f
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	333f      	adds	r3, #63	; 0x3f
 800358c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800358e:	2b02      	cmp	r3, #2
 8003590:	d11d      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	335c      	adds	r3, #92	; 0x5c
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d110      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3361      	adds	r3, #97	; 0x61
 80035ba:	2203      	movs	r2, #3
 80035bc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f002 ff06 	bl	80063da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	461a      	mov	r2, r3
 80035dc:	2310      	movs	r3, #16
 80035de:	6093      	str	r3, [r2, #8]
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d11a      	bne.n	800364e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2304      	movs	r3, #4
 8003628:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3361      	adds	r3, #97	; 0x61
 8003638:	2206      	movs	r2, #6
 800363a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f002 fec7 	bl	80063da <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800364c:	e331      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d12e      	bne.n	80036c2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	2320      	movs	r3, #32
 8003674:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	212c      	movs	r1, #44	; 0x2c
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	333d      	adds	r3, #61	; 0x3d
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	f040 8313 	bne.w	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	333d      	adds	r3, #61	; 0x3d
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3360      	adds	r3, #96	; 0x60
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 fe8d 	bl	80063da <USB_HC_Halt>
}
 80036c0:	e2f7      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d8:	d112      	bne.n	8003700 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	461a      	mov	r2, r3
 80036e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f002 fe6e 	bl	80063da <USB_HC_Halt>
}
 80036fe:	e2d8      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d140      	bne.n	8003798 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	335c      	adds	r3, #92	; 0x5c
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d111      	bne.n	8003762 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	333d      	adds	r3, #61	; 0x3d
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	461a      	mov	r2, r3
 800375e:	2340      	movs	r3, #64	; 0x40
 8003760:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	461a      	mov	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3361      	adds	r3, #97	; 0x61
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f002 fe22 	bl	80063da <USB_HC_Halt>
}
 8003796:	e28c      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d12c      	bne.n	8003808 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3361      	adds	r3, #97	; 0x61
 80037bc:	2204      	movs	r2, #4
 80037be:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	333d      	adds	r3, #61	; 0x3d
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	335c      	adds	r3, #92	; 0x5c
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fdf3 	bl	80063da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	2340      	movs	r3, #64	; 0x40
 8003804:	6093      	str	r3, [r2, #8]
}
 8003806:	e254      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11a      	bne.n	8003854 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	2308      	movs	r3, #8
 800382e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3361      	adds	r3, #97	; 0x61
 800383e:	2205      	movs	r2, #5
 8003840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f002 fdc4 	bl	80063da <USB_HC_Halt>
}
 8003852:	e22e      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d140      	bne.n	80038ec <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	335c      	adds	r3, #92	; 0x5c
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3361      	adds	r3, #97	; 0x61
 800388a:	2203      	movs	r2, #3
 800388c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	333d      	adds	r3, #61	; 0x3d
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d112      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	333c      	adds	r3, #60	; 0x3c
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	333d      	adds	r3, #61	; 0x3d
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fd81 	bl	80063da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	2310      	movs	r3, #16
 80038e8:	6093      	str	r3, [r2, #8]
}
 80038ea:	e1e2      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d164      	bne.n	80039cc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d111      	bne.n	800392e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3361      	adds	r3, #97	; 0x61
 8003918:	2206      	movs	r2, #6
 800391a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f002 fd57 	bl	80063da <USB_HC_Halt>
 800392c:	e044      	b.n	80039b8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	335c      	adds	r3, #92	; 0x5c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	202c      	movs	r0, #44	; 0x2c
 8003946:	fb00 f303 	mul.w	r3, r0, r3
 800394a:	440b      	add	r3, r1
 800394c:	335c      	adds	r3, #92	; 0x5c
 800394e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	335c      	adds	r3, #92	; 0x5c
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d920      	bls.n	80039a6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	335c      	adds	r3, #92	; 0x5c
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3360      	adds	r3, #96	; 0x60
 8003984:	2204      	movs	r2, #4
 8003986:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	b2d9      	uxtb	r1, r3
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	202c      	movs	r0, #44	; 0x2c
 8003992:	fb00 f303 	mul.w	r3, r0, r3
 8003996:	4413      	add	r3, r2
 8003998:	3360      	adds	r3, #96	; 0x60
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f004 ffbe 	bl	8008920 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039a4:	e008      	b.n	80039b8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3360      	adds	r3, #96	; 0x60
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	461a      	mov	r2, r3
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	6093      	str	r3, [r2, #8]
}
 80039ca:	e172      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d11b      	bne.n	8003a1c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3361      	adds	r3, #97	; 0x61
 80039f2:	2208      	movs	r2, #8
 80039f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 fcea 	bl	80063da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	461a      	mov	r2, r3
 8003a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a18:	6093      	str	r3, [r2, #8]
}
 8003a1a:	e14a      	b.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	f040 813f 	bne.w	8003cb2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3361      	adds	r3, #97	; 0x61
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d17d      	bne.n	8003b44 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	3360      	adds	r3, #96	; 0x60
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	212c      	movs	r1, #44	; 0x2c
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	333f      	adds	r3, #63	; 0x3f
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d00a      	beq.n	8003a84 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	333f      	adds	r3, #63	; 0x3f
 8003a7c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	f040 8100 	bne.w	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d113      	bne.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3355      	adds	r3, #85	; 0x55
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2d8      	uxtb	r0, r3
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3355      	adds	r3, #85	; 0x55
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	f040 80e3 	bne.w	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	212c      	movs	r1, #44	; 0x2c
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	4413      	add	r3, r2
 8003aca:	334c      	adds	r3, #76	; 0x4c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80d8 	beq.w	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	334c      	adds	r3, #76	; 0x4c
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	202c      	movs	r0, #44	; 0x2c
 8003aea:	fb00 f202 	mul.w	r2, r0, r2
 8003aee:	440a      	add	r2, r1
 8003af0:	3240      	adds	r2, #64	; 0x40
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	202c      	movs	r0, #44	; 0x2c
 8003afe:	fb00 f202 	mul.w	r2, r0, r2
 8003b02:	440a      	add	r2, r1
 8003b04:	3240      	adds	r2, #64	; 0x40
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b5 	beq.w	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3355      	adds	r3, #85	; 0x55
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2d8      	uxtb	r0, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3355      	adds	r3, #85	; 0x55
 8003b3e:	4602      	mov	r2, r0
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e09f      	b.n	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3361      	adds	r3, #97	; 0x61
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d109      	bne.n	8003b6c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3360      	adds	r3, #96	; 0x60
 8003b66:	2202      	movs	r2, #2
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e08b      	b.n	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3361      	adds	r3, #97	; 0x61
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d109      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3360      	adds	r3, #96	; 0x60
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e077      	b.n	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3361      	adds	r3, #97	; 0x61
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d109      	bne.n	8003bbc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3360      	adds	r3, #96	; 0x60
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e063      	b.n	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	212c      	movs	r1, #44	; 0x2c
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3361      	adds	r3, #97	; 0x61
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d009      	beq.n	8003be4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3361      	adds	r3, #97	; 0x61
 8003bde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d14f      	bne.n	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	335c      	adds	r3, #92	; 0x5c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	202c      	movs	r0, #44	; 0x2c
 8003bfc:	fb00 f303 	mul.w	r3, r0, r3
 8003c00:	440b      	add	r3, r1
 8003c02:	335c      	adds	r3, #92	; 0x5c
 8003c04:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	335c      	adds	r3, #92	; 0x5c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d912      	bls.n	8003c40 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	335c      	adds	r3, #92	; 0x5c
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3360      	adds	r3, #96	; 0x60
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e021      	b.n	8003c84 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3360      	adds	r3, #96	; 0x60
 8003c4e:	2202      	movs	r2, #2
 8003c50:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c68:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c70:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	461a      	mov	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	461a      	mov	r2, r3
 8003c92:	2302      	movs	r3, #2
 8003c94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	202c      	movs	r0, #44	; 0x2c
 8003ca0:	fb00 f303 	mul.w	r3, r0, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3360      	adds	r3, #96	; 0x60
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f004 fe37 	bl	8008920 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cb2:	bf00      	nop
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08a      	sub	sp, #40	; 0x28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	0c5b      	lsrs	r3, r3, #17
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d004      	beq.n	8003d00 <HCD_RXQLVL_IRQHandler+0x46>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	f000 80a9 	beq.w	8003e50 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003cfe:	e0aa      	b.n	8003e56 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80a6 	beq.w	8003e54 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	3344      	adds	r3, #68	; 0x44
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 809b 	beq.w	8003e54 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3350      	adds	r3, #80	; 0x50
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	441a      	add	r2, r3
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	202c      	movs	r0, #44	; 0x2c
 8003d38:	fb00 f303 	mul.w	r3, r0, r3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	334c      	adds	r3, #76	; 0x4c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d87a      	bhi.n	8003e3c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	3344      	adds	r3, #68	; 0x44
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f001 fe92 	bl	8005a88 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3344      	adds	r3, #68	; 0x44
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	441a      	add	r2, r3
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	202c      	movs	r0, #44	; 0x2c
 8003d7e:	fb00 f303 	mul.w	r3, r0, r3
 8003d82:	440b      	add	r3, r1
 8003d84:	3344      	adds	r3, #68	; 0x44
 8003d86:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3350      	adds	r3, #80	; 0x50
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	202c      	movs	r0, #44	; 0x2c
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	440b      	add	r3, r1
 8003da8:	3350      	adds	r3, #80	; 0x50
 8003daa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	0cdb      	lsrs	r3, r3, #19
 8003dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3340      	adds	r3, #64	; 0x40
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d13c      	bne.n	8003e54 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d039      	beq.n	8003e54 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dfe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	212c      	movs	r1, #44	; 0x2c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3354      	adds	r3, #84	; 0x54
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2d8      	uxtb	r0, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3354      	adds	r3, #84	; 0x54
 8003e36:	4602      	mov	r2, r0
 8003e38:	701a      	strb	r2, [r3, #0]
      break;
 8003e3a:	e00b      	b.n	8003e54 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	212c      	movs	r1, #44	; 0x2c
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3360      	adds	r3, #96	; 0x60
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	701a      	strb	r2, [r3, #0]
      break;
 8003e4e:	e001      	b.n	8003e54 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003e54:	bf00      	nop
  }
}
 8003e56:	bf00      	nop
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e8a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d10b      	bne.n	8003eae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d102      	bne.n	8003ea6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f004 fd21 	bl	80088e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d132      	bne.n	8003f1e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d126      	bne.n	8003f18 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d113      	bne.n	8003efa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003edc:	d106      	bne.n	8003eec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 ff3d 	bl	8005d64 <USB_InitFSLSPClkSel>
 8003eea:	e011      	b.n	8003f10 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 ff36 	bl	8005d64 <USB_InitFSLSPClkSel>
 8003ef8:	e00a      	b.n	8003f10 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d106      	bne.n	8003f10 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f0e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f004 fd13 	bl	800893c <HAL_HCD_PortEnabled_Callback>
 8003f16:	e002      	b.n	8003f1e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f004 fd1d 	bl	8008958 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d103      	bne.n	8003f30 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f043 0320 	orr.w	r3, r3, #32
 8003f2e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e12b      	b.n	80041ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd fa24 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f001 fa20 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a81      	ldr	r2, [pc, #516]	; (80041b8 <HAL_I2C_Init+0x274>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d807      	bhi.n	8003fc8 <HAL_I2C_Init+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a80      	ldr	r2, [pc, #512]	; (80041bc <HAL_I2C_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e006      	b.n	8003fd6 <HAL_I2C_Init+0x92>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a7d      	ldr	r2, [pc, #500]	; (80041c0 <HAL_I2C_Init+0x27c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0e7      	b.n	80041ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a78      	ldr	r2, [pc, #480]	; (80041c4 <HAL_I2C_Init+0x280>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a6a      	ldr	r2, [pc, #424]	; (80041b8 <HAL_I2C_Init+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <HAL_I2C_Init+0xd4>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	e009      	b.n	800402c <HAL_I2C_Init+0xe8>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a69      	ldr	r2, [pc, #420]	; (80041c8 <HAL_I2C_Init+0x284>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	3301      	adds	r3, #1
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800403e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	495c      	ldr	r1, [pc, #368]	; (80041b8 <HAL_I2C_Init+0x274>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d819      	bhi.n	8004080 <HAL_I2C_Init+0x13c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e59      	subs	r1, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb1 f3f3 	udiv	r3, r1, r3
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004060:	400b      	ands	r3, r1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_I2C_Init+0x138>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fbb1 f3f3 	udiv	r3, r1, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407a:	e051      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 800407c:	2304      	movs	r3, #4
 800407e:	e04f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_I2C_Init+0x168>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e012      	b.n	80040d2 <HAL_I2C_Init+0x18e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	0099      	lsls	r1, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Init+0x196>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <HAL_I2C_Init+0x1bc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e58      	subs	r0, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	e00f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800414e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6911      	ldr	r1, [r2, #16]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	000186a0 	.word	0x000186a0
 80041bc:	001e847f 	.word	0x001e847f
 80041c0:	003d08ff 	.word	0x003d08ff
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	10624dd3 	.word	0x10624dd3

080041cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e128      	b.n	8004430 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a90      	ldr	r2, [pc, #576]	; (8004438 <HAL_I2S_Init+0x26c>)
 80041f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7fd f925 	bl	8001448 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004214:	f023 030f 	bic.w	r3, r3, #15
 8004218:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2202      	movs	r2, #2
 8004220:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d060      	beq.n	80042ec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004232:	2310      	movs	r3, #16
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e001      	b.n	800423c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004238:	2320      	movs	r3, #32
 800423a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b20      	cmp	r3, #32
 8004242:	d802      	bhi.n	800424a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800424a:	2001      	movs	r0, #1
 800424c:	f001 f9c4 	bl	80055d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004250:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425a:	d125      	bne.n	80042a8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	fbb2 f2f3 	udiv	r2, r2, r3
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	3305      	adds	r3, #5
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e01f      	b.n	80042c6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	3305      	adds	r3, #5
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e00e      	b.n	80042c6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	3305      	adds	r3, #5
 80042c4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4a5c      	ldr	r2, [pc, #368]	; (800443c <HAL_I2S_Init+0x270>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80042ec:	2302      	movs	r3, #2
 80042ee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d902      	bls.n	8004300 <HAL_I2S_Init+0x134>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2bff      	cmp	r3, #255	; 0xff
 80042fe:	d907      	bls.n	8004310 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f043 0210 	orr.w	r2, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e08f      	b.n	8004430 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	ea42 0103 	orr.w	r1, r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	430a      	orrs	r2, r1
 8004322:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800432e:	f023 030f 	bic.w	r3, r3, #15
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6851      	ldr	r1, [r2, #4]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6892      	ldr	r2, [r2, #8]
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	68d2      	ldr	r2, [r2, #12]
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6992      	ldr	r2, [r2, #24]
 8004346:	430a      	orrs	r2, r1
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004352:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d161      	bne.n	8004420 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a38      	ldr	r2, [pc, #224]	; (8004440 <HAL_I2S_Init+0x274>)
 8004360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a37      	ldr	r2, [pc, #220]	; (8004444 <HAL_I2S_Init+0x278>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d101      	bne.n	8004370 <HAL_I2S_Init+0x1a4>
 800436c:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_I2S_Init+0x27c>)
 800436e:	e001      	b.n	8004374 <HAL_I2S_Init+0x1a8>
 8004370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	4932      	ldr	r1, [pc, #200]	; (8004444 <HAL_I2S_Init+0x278>)
 800437c:	428a      	cmp	r2, r1
 800437e:	d101      	bne.n	8004384 <HAL_I2S_Init+0x1b8>
 8004380:	4a31      	ldr	r2, [pc, #196]	; (8004448 <HAL_I2S_Init+0x27c>)
 8004382:	e001      	b.n	8004388 <HAL_I2S_Init+0x1bc>
 8004384:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004388:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800438c:	f023 030f 	bic.w	r3, r3, #15
 8004390:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2b      	ldr	r2, [pc, #172]	; (8004444 <HAL_I2S_Init+0x278>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_I2S_Init+0x1d4>
 800439c:	4b2a      	ldr	r3, [pc, #168]	; (8004448 <HAL_I2S_Init+0x27c>)
 800439e:	e001      	b.n	80043a4 <HAL_I2S_Init+0x1d8>
 80043a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a4:	2202      	movs	r2, #2
 80043a6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <HAL_I2S_Init+0x278>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_I2S_Init+0x1ea>
 80043b2:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_I2S_Init+0x27c>)
 80043b4:	e001      	b.n	80043ba <HAL_I2S_Init+0x1ee>
 80043b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d003      	beq.n	80043d0 <HAL_I2S_Init+0x204>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80043d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	e001      	b.n	80043dc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043f0:	4313      	orrs	r3, r2
 80043f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	4313      	orrs	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004408:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <HAL_I2S_Init+0x278>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_I2S_Init+0x24c>
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_I2S_Init+0x27c>)
 8004416:	e001      	b.n	800441c <HAL_I2S_Init+0x250>
 8004418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441c:	897a      	ldrh	r2, [r7, #10]
 800441e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	08004543 	.word	0x08004543
 800443c:	cccccccd 	.word	0xcccccccd
 8004440:	08004659 	.word	0x08004659
 8004444:	40003800 	.word	0x40003800
 8004448:	40003400 	.word	0x40003400

0800444c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	881a      	ldrh	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ffb8 	bl	800444c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	b292      	uxth	r2, r2
 80044f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	1c9a      	adds	r2, r3, #2
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10e      	bne.n	800453a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800452a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff93 	bl	8004460 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b04      	cmp	r3, #4
 800455c:	d13a      	bne.n	80045d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d109      	bne.n	800457c <I2S_IRQHandler+0x3a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d102      	bne.n	800457c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ffb4 	bl	80044e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d126      	bne.n	80045d4 <I2S_IRQHandler+0x92>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b20      	cmp	r3, #32
 8004592:	d11f      	bne.n	80045d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f043 0202 	orr.w	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff ff50 	bl	8004474 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d136      	bne.n	800464e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d109      	bne.n	80045fe <I2S_IRQHandler+0xbc>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d102      	bne.n	80045fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff45 	bl	8004488 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d122      	bne.n	800464e <I2S_IRQHandler+0x10c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d11b      	bne.n	800464e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004624:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff13 	bl	8004474 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800464e:	bf00      	nop
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a92      	ldr	r2, [pc, #584]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004672:	4b92      	ldr	r3, [pc, #584]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004674:	e001      	b.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a8b      	ldr	r2, [pc, #556]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004690:	4b8a      	ldr	r3, [pc, #552]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004692:	e001      	b.n	8004698 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a4:	d004      	beq.n	80046b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 8099 	bne.w	80047e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d107      	bne.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f925 	bl	8004914 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9c8 	bl	8004a74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d13a      	bne.n	8004764 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d035      	beq.n	8004764 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6e      	ldr	r2, [pc, #440]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004702:	4b6e      	ldr	r3, [pc, #440]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004704:	e001      	b.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004706:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4969      	ldr	r1, [pc, #420]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004712:	428b      	cmp	r3, r1
 8004714:	d101      	bne.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004716:	4b69      	ldr	r3, [pc, #420]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004718:	e001      	b.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800471a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800471e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004722:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004732:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	f043 0202 	orr.w	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fe88 	bl	8004474 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b08      	cmp	r3, #8
 800476c:	f040 80c3 	bne.w	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80bd 	beq.w	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800478a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a49      	ldr	r2, [pc, #292]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004796:	4b49      	ldr	r3, [pc, #292]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004798:	e001      	b.n	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800479a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4944      	ldr	r1, [pc, #272]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047a6:	428b      	cmp	r3, r1
 80047a8:	d101      	bne.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80047aa:	4b44      	ldr	r3, [pc, #272]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ac:	e001      	b.n	80047b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80047ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f043 0204 	orr.w	r2, r3, #4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe4a 	bl	8004474 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047e0:	e089      	b.n	80048f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d107      	bne.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8be 	bl	8004978 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d107      	bne.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8fd 	bl	8004a10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d12f      	bne.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d02a      	beq.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004838:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004846:	e001      	b.n	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004848:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4919      	ldr	r1, [pc, #100]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004854:	428b      	cmp	r3, r1
 8004856:	d101      	bne.n	800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800485a:	e001      	b.n	8004860 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800485c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004860:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004864:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	f043 0202 	orr.w	r2, r3, #2
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fdfa 	bl	8004474 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b08      	cmp	r3, #8
 8004888:	d136      	bne.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d031      	beq.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a0:	e001      	b.n	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80048a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4902      	ldr	r1, [pc, #8]	; (80048b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d106      	bne.n	80048c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80048b2:	4b02      	ldr	r3, [pc, #8]	; (80048bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048b4:	e006      	b.n	80048c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80048b6:	bf00      	nop
 80048b8:	40003800 	.word	0x40003800
 80048bc:	40003400 	.word	0x40003400
 80048c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048c8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	f043 0204 	orr.w	r2, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fdc0 	bl	8004474 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f4:	e000      	b.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048f6:	bf00      	nop
}
 80048f8:	bf00      	nop
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c99      	adds	r1, r3, #2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6251      	str	r1, [r2, #36]	; 0x24
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d113      	bne.n	800496e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004954:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffc9 	bl	8004900 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	1c99      	adds	r1, r3, #2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6251      	str	r1, [r2, #36]	; 0x24
 800498a:	8819      	ldrh	r1, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <I2SEx_TxISR_I2SExt+0x90>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d101      	bne.n	800499a <I2SEx_TxISR_I2SExt+0x22>
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <I2SEx_TxISR_I2SExt+0x94>)
 8004998:	e001      	b.n	800499e <I2SEx_TxISR_I2SExt+0x26>
 800499a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499e:	460a      	mov	r2, r1
 80049a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <I2SEx_TxISR_I2SExt+0x90>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <I2SEx_TxISR_I2SExt+0x50>
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <I2SEx_TxISR_I2SExt+0x94>)
 80049c6:	e001      	b.n	80049cc <I2SEx_TxISR_I2SExt+0x54>
 80049c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	490d      	ldr	r1, [pc, #52]	; (8004a08 <I2SEx_TxISR_I2SExt+0x90>)
 80049d4:	428b      	cmp	r3, r1
 80049d6:	d101      	bne.n	80049dc <I2SEx_TxISR_I2SExt+0x64>
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <I2SEx_TxISR_I2SExt+0x94>)
 80049da:	e001      	b.n	80049e0 <I2SEx_TxISR_I2SExt+0x68>
 80049dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ff81 	bl	8004900 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40003800 	.word	0x40003800
 8004a0c:	40003400 	.word	0x40003400

08004a10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68d8      	ldr	r0, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	1c99      	adds	r1, r3, #2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a28:	b282      	uxth	r2, r0
 8004a2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d113      	bne.n	8004a6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff4a 	bl	8004900 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <I2SEx_RxISR_I2SExt+0x90>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <I2SEx_RxISR_I2SExt+0x16>
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <I2SEx_RxISR_I2SExt+0x94>)
 8004a88:	e001      	b.n	8004a8e <I2SEx_RxISR_I2SExt+0x1a>
 8004a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a8e:	68d8      	ldr	r0, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	1c99      	adds	r1, r3, #2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a9a:	b282      	uxth	r2, r0
 8004a9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d121      	bne.n	8004afa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <I2SEx_RxISR_I2SExt+0x90>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <I2SEx_RxISR_I2SExt+0x50>
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <I2SEx_RxISR_I2SExt+0x94>)
 8004ac2:	e001      	b.n	8004ac8 <I2SEx_RxISR_I2SExt+0x54>
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	490d      	ldr	r1, [pc, #52]	; (8004b04 <I2SEx_RxISR_I2SExt+0x90>)
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	d101      	bne.n	8004ad8 <I2SEx_RxISR_I2SExt+0x64>
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <I2SEx_RxISR_I2SExt+0x94>)
 8004ad6:	e001      	b.n	8004adc <I2SEx_RxISR_I2SExt+0x68>
 8004ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004adc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ae0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff03 	bl	8004900 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40003800 	.word	0x40003800
 8004b08:	40003400 	.word	0x40003400

08004b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e267      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d075      	beq.n	8004c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	4b88      	ldr	r3, [pc, #544]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b85      	ldr	r3, [pc, #532]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b82      	ldr	r3, [pc, #520]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05b      	beq.n	8004c14 <HAL_RCC_OscConfig+0x108>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d157      	bne.n	8004c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e242      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCC_OscConfig+0x74>
 8004b72:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a75      	ldr	r2, [pc, #468]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e01d      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x98>
 8004b8a:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6f      	ldr	r2, [pc, #444]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4b6d      	ldr	r3, [pc, #436]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6c      	ldr	r2, [pc, #432]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e00b      	b.n	8004bbc <HAL_RCC_OscConfig+0xb0>
 8004ba4:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a68      	ldr	r2, [pc, #416]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fc fe1e 	bl	8001804 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fc fe1a 	bl	8001804 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e207      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b5b      	ldr	r3, [pc, #364]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0xc0>
 8004bea:	e014      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fc fe0a 	bl	8001804 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fc fe06 	bl	8001804 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1f3      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xe8>
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d063      	beq.n	8004cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c22:	4b4a      	ldr	r3, [pc, #296]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b44      	ldr	r3, [pc, #272]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d116      	bne.n	8004c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e1c7      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4937      	ldr	r1, [pc, #220]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	e03a      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7c:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <HAL_RCC_OscConfig+0x244>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc fdbf 	bl	8001804 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7fc fdbb 	bl	8001804 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1a8      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4925      	ldr	r1, [pc, #148]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
 8004cbc:	e015      	b.n	8004cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <HAL_RCC_OscConfig+0x244>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fd9e 	bl	8001804 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fc fd9a 	bl	8001804 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e187      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d036      	beq.n	8004d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_RCC_OscConfig+0x248>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fc fd7e 	bl	8001804 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0c:	f7fc fd7a 	bl	8001804 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e167      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_OscConfig+0x240>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x200>
 8004d2a:	e01b      	b.n	8004d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_OscConfig+0x248>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fc fd67 	bl	8001804 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d38:	e00e      	b.n	8004d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3a:	f7fc fd63 	bl	8001804 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d907      	bls.n	8004d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e150      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	42470000 	.word	0x42470000
 8004d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d58:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ea      	bne.n	8004d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8097 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d76:	4b81      	ldr	r3, [pc, #516]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	4b7d      	ldr	r3, [pc, #500]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a7c      	ldr	r2, [pc, #496]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
 8004d92:	4b7a      	ldr	r3, [pc, #488]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	4b77      	ldr	r3, [pc, #476]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d118      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dae:	4b74      	ldr	r3, [pc, #464]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a73      	ldr	r2, [pc, #460]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dba:	f7fc fd23 	bl	8001804 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc2:	f7fc fd1f 	bl	8001804 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e10c      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd4:	4b6a      	ldr	r3, [pc, #424]	; (8004f80 <HAL_RCC_OscConfig+0x474>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x2ea>
 8004de8:	4b64      	ldr	r3, [pc, #400]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a63      	ldr	r2, [pc, #396]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	e01c      	b.n	8004e30 <HAL_RCC_OscConfig+0x324>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCC_OscConfig+0x30c>
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5e      	ldr	r2, [pc, #376]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0304 	orr.w	r3, r3, #4
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b5c      	ldr	r3, [pc, #368]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a5b      	ldr	r2, [pc, #364]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
 8004e16:	e00b      	b.n	8004e30 <HAL_RCC_OscConfig+0x324>
 8004e18:	4b58      	ldr	r3, [pc, #352]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a57      	ldr	r2, [pc, #348]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
 8004e24:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	4a54      	ldr	r2, [pc, #336]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 0304 	bic.w	r3, r3, #4
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d015      	beq.n	8004e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e38:	f7fc fce4 	bl	8001804 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fc fce0 	bl	8001804 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e0cb      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e56:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ee      	beq.n	8004e40 <HAL_RCC_OscConfig+0x334>
 8004e62:	e014      	b.n	8004e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e64:	f7fc fcce 	bl	8001804 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fc fcca 	bl	8001804 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0b5      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ee      	bne.n	8004e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	4a38      	ldr	r2, [pc, #224]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80a1 	beq.w	8004fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eaa:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d05c      	beq.n	8004f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d141      	bne.n	8004f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_OscConfig+0x478>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fc fc9e 	bl	8001804 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fc fc9a 	bl	8001804 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e087      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	019b      	lsls	r3, r3, #6
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	491b      	ldr	r1, [pc, #108]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_RCC_OscConfig+0x478>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1a:	f7fc fc73 	bl	8001804 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f22:	f7fc fc6f 	bl	8001804 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e05c      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x416>
 8004f40:	e054      	b.n	8004fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_OscConfig+0x478>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fc fc5c 	bl	8001804 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fc fc58 	bl	8001804 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e045      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <HAL_RCC_OscConfig+0x470>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x444>
 8004f6e:	e03d      	b.n	8004fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e038      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40007000 	.word	0x40007000
 8004f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <HAL_RCC_OscConfig+0x4ec>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d028      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d121      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d11a      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d111      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0cc      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b68      	ldr	r3, [pc, #416]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90c      	bls.n	8005038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005026:	4b63      	ldr	r3, [pc, #396]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0b8      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800505a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a52      	ldr	r2, [pc, #328]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	494d      	ldr	r1, [pc, #308]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d044      	beq.n	800511c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d119      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e07f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d003      	beq.n	80050ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b3f      	ldr	r3, [pc, #252]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e067      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4934      	ldr	r1, [pc, #208]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fb8a 	bl	8001804 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fc fb86 	bl	8001804 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04f      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d20c      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4916      	ldr	r1, [pc, #88]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	490e      	ldr	r1, [pc, #56]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005182:	f000 f821 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	490a      	ldr	r1, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc faea 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023c00 	.word	0x40023c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	08008ff8 	.word	0x08008ff8
 80051c0:	20000000 	.word	0x20000000
 80051c4:	20000004 	.word	0x20000004

080051c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051cc:	b094      	sub	sp, #80	; 0x50
 80051ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	2300      	movs	r3, #0
 80051d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d8:	2300      	movs	r3, #0
 80051da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e0:	4b79      	ldr	r3, [pc, #484]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 030c 	and.w	r3, r3, #12
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d00d      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x40>
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	f200 80e1 	bhi.w	80053b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x34>
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_GetSysClockFreq+0x3a>
 80051fa:	e0db      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051fc:	4b73      	ldr	r3, [pc, #460]	; (80053cc <HAL_RCC_GetSysClockFreq+0x204>)
 80051fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005200:	e0db      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005202:	4b73      	ldr	r3, [pc, #460]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005206:	e0d8      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005208:	4b6f      	ldr	r3, [pc, #444]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005212:	4b6d      	ldr	r3, [pc, #436]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d063      	beq.n	80052e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521e:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	099b      	lsrs	r3, r3, #6
 8005224:	2200      	movs	r2, #0
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
 8005228:	63fa      	str	r2, [r7, #60]	; 0x3c
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	633b      	str	r3, [r7, #48]	; 0x30
 8005232:	2300      	movs	r3, #0
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
 8005236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	f04f 0000 	mov.w	r0, #0
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	0159      	lsls	r1, r3, #5
 8005248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524c:	0150      	lsls	r0, r2, #5
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4621      	mov	r1, r4
 8005254:	1a51      	subs	r1, r2, r1
 8005256:	6139      	str	r1, [r7, #16]
 8005258:	4629      	mov	r1, r5
 800525a:	eb63 0301 	sbc.w	r3, r3, r1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800526c:	4659      	mov	r1, fp
 800526e:	018b      	lsls	r3, r1, #6
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005276:	4651      	mov	r1, sl
 8005278:	018a      	lsls	r2, r1, #6
 800527a:	4651      	mov	r1, sl
 800527c:	ebb2 0801 	subs.w	r8, r2, r1
 8005280:	4659      	mov	r1, fp
 8005282:	eb63 0901 	sbc.w	r9, r3, r1
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529a:	4690      	mov	r8, r2
 800529c:	4699      	mov	r9, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	eb18 0303 	adds.w	r3, r8, r3
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	462b      	mov	r3, r5
 80052a8:	eb49 0303 	adc.w	r3, r9, r3
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ba:	4629      	mov	r1, r5
 80052bc:	024b      	lsls	r3, r1, #9
 80052be:	4621      	mov	r1, r4
 80052c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052c4:	4621      	mov	r1, r4
 80052c6:	024a      	lsls	r2, r1, #9
 80052c8:	4610      	mov	r0, r2
 80052ca:	4619      	mov	r1, r3
 80052cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ce:	2200      	movs	r2, #0
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d8:	f7fb fb94 	bl	8000a04 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4613      	mov	r3, r2
 80052e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e4:	e058      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e6:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	099b      	lsrs	r3, r3, #6
 80052ec:	2200      	movs	r2, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	4611      	mov	r1, r2
 80052f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
 80052fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	0159      	lsls	r1, r3, #5
 800530e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005312:	0150      	lsls	r0, r2, #5
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4641      	mov	r1, r8
 800531a:	ebb2 0a01 	subs.w	sl, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb63 0b01 	sbc.w	fp, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005338:	ebb2 040a 	subs.w	r4, r2, sl
 800533c:	eb63 050b 	sbc.w	r5, r3, fp
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	00eb      	lsls	r3, r5, #3
 800534a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534e:	00e2      	lsls	r2, r4, #3
 8005350:	4614      	mov	r4, r2
 8005352:	461d      	mov	r5, r3
 8005354:	4643      	mov	r3, r8
 8005356:	18e3      	adds	r3, r4, r3
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	464b      	mov	r3, r9
 800535c:	eb45 0303 	adc.w	r3, r5, r3
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800536e:	4629      	mov	r1, r5
 8005370:	028b      	lsls	r3, r1, #10
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005378:	4621      	mov	r1, r4
 800537a:	028a      	lsls	r2, r1, #10
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005382:	2200      	movs	r2, #0
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	61fa      	str	r2, [r7, #28]
 8005388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538c:	f7fb fb3a 	bl	8000a04 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	3301      	adds	r3, #1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b2:	e002      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetSysClockFreq+0x204>)
 80053b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3750      	adds	r7, #80	; 0x50
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	007a1200 	.word	0x007a1200

080053d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000000 	.word	0x20000000

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f0:	f7ff fff0 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0a9b      	lsrs	r3, r3, #10
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	08009008 	.word	0x08009008

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d035      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800543c:	4b62      	ldr	r3, [pc, #392]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fc f9df 	bl	8001804 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fc f9db 	bl	8001804 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0b0      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545c:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	4955      	ldr	r1, [pc, #340]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800547c:	4b52      	ldr	r3, [pc, #328]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005482:	f7fc f9bf 	bl	8001804 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005488:	e008      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800548a:	f7fc f9bb 	bl	8001804 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e090      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8083 	beq.w	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a43      	ldr	r2, [pc, #268]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054de:	f7fc f991 	bl	8001804 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fc f98d 	bl	8001804 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e062      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02f      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d028      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d114      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800554a:	f7fc f95b 	bl	8001804 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fc f957 	bl	8001804 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e02a      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005580:	d10d      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	490d      	ldr	r1, [pc, #52]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055a8:	6093      	str	r3, [r2, #8]
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b6:	4905      	ldr	r1, [pc, #20]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	42470068 	.word	0x42470068
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40007000 	.word	0x40007000
 80055d4:	42470e40 	.word	0x42470e40

080055d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d13e      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d12f      	bne.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800560e:	617b      	str	r3, [r7, #20]
          break;
 8005610:	e02f      	b.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561e:	d108      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005620:	4b18      	ldr	r3, [pc, #96]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	e007      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005648:	099b      	lsrs	r3, r3, #6
 800564a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565c:	0f1b      	lsrs	r3, r3, #28
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
          break;
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
          break;
 8005670:	bf00      	nop
        }
      }
      break;
 8005672:	bf00      	nop
    }
  }
  return frequency;
 8005674:	697b      	ldr	r3, [r7, #20]
}
 8005676:	4618      	mov	r0, r3
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	00bb8000 	.word	0x00bb8000
 800568c:	007a1200 	.word	0x007a1200
 8005690:	00f42400 	.word	0x00f42400

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e07b      	b.n	800579e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e005      	b.n	80056cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fb ff2e 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	ea42 0103 	orr.w	r1, r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	f003 0104 	and.w	r1, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f003 0210 	and.w	r2, r3, #16
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057a6:	b084      	sub	sp, #16
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	f107 001c 	add.w	r0, r7, #28
 80057b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d122      	bne.n	8005804 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f9bf 	bl	8005b7c <USB_CoreReset>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	e01a      	b.n	800583a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f9b3 	bl	8005b7c <USB_CoreReset>
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800581a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
 800582c:	e005      	b.n	800583a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	2b01      	cmp	r3, #1
 800583e:	d10b      	bne.n	8005858 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f043 0206 	orr.w	r2, r3, #6
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005864:	b004      	add	sp, #16
 8005866:	4770      	bx	lr

08005868 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f043 0201 	orr.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 0201 	bic.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d115      	bne.n	80058fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058da:	2001      	movs	r0, #1
 80058dc:	f7fb ff9e 	bl	800181c <HAL_Delay>
      ms++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f939 	bl	8005b5e <USB_GetMode>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d01e      	beq.n	8005930 <USB_SetCurrentMode+0x84>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b31      	cmp	r3, #49	; 0x31
 80058f6:	d9f0      	bls.n	80058da <USB_SetCurrentMode+0x2e>
 80058f8:	e01a      	b.n	8005930 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d115      	bne.n	800592c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800590c:	2001      	movs	r0, #1
 800590e:	f7fb ff85 	bl	800181c <HAL_Delay>
      ms++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f920 	bl	8005b5e <USB_GetMode>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <USB_SetCurrentMode+0x84>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b31      	cmp	r3, #49	; 0x31
 8005928:	d9f0      	bls.n	800590c <USB_SetCurrentMode+0x60>
 800592a:	e001      	b.n	8005930 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e005      	b.n	800593c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b32      	cmp	r3, #50	; 0x32
 8005934:	d101      	bne.n	800593a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <USB_FlushTxFifo+0x64>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e01b      	b.n	800599c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	daf2      	bge.n	8005952 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	019b      	lsls	r3, r3, #6
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <USB_FlushTxFifo+0x64>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e006      	b.n	800599c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b20      	cmp	r3, #32
 8005998:	d0f0      	beq.n	800597c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	00030d40 	.word	0x00030d40

080059ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a11      	ldr	r2, [pc, #68]	; (8005a08 <USB_FlushRxFifo+0x5c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e018      	b.n	80059fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	daf2      	bge.n	80059b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2210      	movs	r2, #16
 80059da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <USB_FlushRxFifo+0x5c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e006      	b.n	80059fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d0f0      	beq.n	80059dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b089      	sub	sp, #36	; 0x24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4611      	mov	r1, r2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	71fb      	strb	r3, [r7, #7]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d123      	bne.n	8005a7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a32:	88bb      	ldrh	r3, [r7, #4]
 8005a34:	3303      	adds	r3, #3
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e018      	b.n	8005a72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	031a      	lsls	r2, r3, #12
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3e2      	bcc.n	8005a40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3724      	adds	r7, #36	; 0x24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b08b      	sub	sp, #44	; 0x2c
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	089b      	lsrs	r3, r3, #2
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	e014      	b.n	8005ade <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	3301      	adds	r3, #1
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	3301      	adds	r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	3301      	adds	r3, #1
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	6a3a      	ldr	r2, [r7, #32]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d3e6      	bcc.n	8005ab4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ae6:	8bfb      	ldrh	r3, [r7, #30]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01e      	beq.n	8005b2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af6:	461a      	mov	r2, r3
 8005af8:	f107 0310 	add.w	r3, r7, #16
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	701a      	strb	r2, [r3, #0]
      i++;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	3301      	adds	r3, #1
 8005b16:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b1e:	8bfb      	ldrh	r3, [r7, #30]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b24:	8bfb      	ldrh	r3, [r7, #30]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ea      	bne.n	8005b00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	372c      	adds	r7, #44	; 0x2c
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b50:	68fb      	ldr	r3, [r7, #12]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <USB_CoreReset+0x64>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e01b      	b.n	8005bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	daf2      	bge.n	8005b88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <USB_CoreReset+0x64>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e006      	b.n	8005bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d0f0      	beq.n	8005bb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	00030d40 	.word	0x00030d40

08005be4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be4:	b084      	sub	sp, #16
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d018      	beq.n	8005c6c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10a      	bne.n	8005c56 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e014      	b.n	8005c80 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c64:	f023 0304 	bic.w	r3, r3, #4
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e009      	b.n	8005c80 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c7a:	f023 0304 	bic.w	r3, r3, #4
 8005c7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c80:	2110      	movs	r1, #16
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fe5e 	bl	8005944 <USB_FlushTxFifo>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fe8a 	bl	80059ac <USB_FlushRxFifo>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e015      	b.n	8005cd4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	461a      	mov	r2, r3
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d3e5      	bcc.n	8005ca8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <USB_HostInit+0x16c>)
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <USB_HostInit+0x170>)
 8005d08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d0c:	e009      	b.n	8005d22 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <USB_HostInit+0x174>)
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <USB_HostInit+0x178>)
 8005d1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f043 0210 	orr.w	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <USB_HostInit+0x17c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d4c:	b004      	add	sp, #16
 8005d4e:	4770      	bx	lr
 8005d50:	01000200 	.word	0x01000200
 8005d54:	00e00300 	.word	0x00e00300
 8005d58:	00600080 	.word	0x00600080
 8005d5c:	004000e0 	.word	0x004000e0
 8005d60:	a3200008 	.word	0xa3200008

08005d64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d107      	bne.n	8005db6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dac:	461a      	mov	r2, r3
 8005dae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005db2:	6053      	str	r3, [r2, #4]
 8005db4:	e009      	b.n	8005dca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d106      	bne.n	8005dca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005dc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005df8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e08:	2064      	movs	r0, #100	; 0x64
 8005e0a:	f7fb fd07 	bl	800181c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e1c:	200a      	movs	r0, #10
 8005e1e:	f7fb fcfd 	bl	800181c <HAL_Delay>

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	460b      	mov	r3, r1
 8005e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d109      	bne.n	8005e70 <USB_DriveVbus+0x44>
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d106      	bne.n	8005e70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d109      	bne.n	8005e90 <USB_DriveVbus+0x64>
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	0c5b      	lsrs	r3, r3, #17
 8005ebc:	f003 0303 	and.w	r3, r3, #3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	b29b      	uxth	r3, r3
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	70fb      	strb	r3, [r7, #3]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70bb      	strb	r3, [r7, #2]
 8005f06:	4613      	mov	r3, r2
 8005f08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295
 8005f24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d87e      	bhi.n	800602c <USB_HC_Init+0x13c>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <USB_HC_Init+0x44>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005fef 	.word	0x08005fef
 8005f3c:	08005f45 	.word	0x08005f45
 8005f40:	08005fb1 	.word	0x08005fb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	461a      	mov	r2, r3
 8005f52:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	da10      	bge.n	8005f82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f80:	e057      	b.n	8006032 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d051      	beq.n	8006032 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fac:	60d3      	str	r3, [r2, #12]
      break;
 8005fae:	e040      	b.n	8006032 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f240 639d 	movw	r3, #1693	; 0x69d
 8005fc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da34      	bge.n	8006036 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fec:	e023      	b.n	8006036 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f240 2325 	movw	r3, #549	; 0x225
 8006000:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006002:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006006:	2b00      	cmp	r3, #0
 8006008:	da17      	bge.n	800603a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	78fa      	ldrb	r2, [r7, #3]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	440a      	add	r2, r1
 8006020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006024:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006028:	60d3      	str	r3, [r2, #12]
      }
      break;
 800602a:	e006      	b.n	800603a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	77fb      	strb	r3, [r7, #31]
      break;
 8006030:	e004      	b.n	800603c <USB_HC_Init+0x14c>
      break;
 8006032:	bf00      	nop
 8006034:	e002      	b.n	800603c <USB_HC_Init+0x14c>
      break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <USB_HC_Init+0x14c>
      break;
 800603a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	440a      	add	r2, r1
 8006052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006056:	f043 0302 	orr.w	r3, r3, #2
 800605a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	2101      	movs	r1, #1
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006076:	4313      	orrs	r3, r2
 8006078:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006086:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800608a:	2b00      	cmp	r3, #0
 800608c:	da03      	bge.n	8006096 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	e001      	b.n	800609a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff feff 	bl	8005e9e <USB_GetHostSpeed>
 80060a0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d106      	bne.n	80060b8 <USB_HC_Init+0x1c8>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d003      	beq.n	80060b8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e001      	b.n	80060bc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060bc:	787b      	ldrb	r3, [r7, #1]
 80060be:	059b      	lsls	r3, r3, #22
 80060c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060c4:	78bb      	ldrb	r3, [r7, #2]
 80060c6:	02db      	lsls	r3, r3, #11
 80060c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060cc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060d2:	049b      	lsls	r3, r3, #18
 80060d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	0159      	lsls	r1, r3, #5
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	440b      	add	r3, r1
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060f8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d003      	beq.n	800610a <USB_HC_Init+0x21a>
 8006102:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d10f      	bne.n	800612a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	440a      	add	r2, r1
 8006120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006128:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800612a:	7ffb      	ldrb	r3, [r7, #31]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08c      	sub	sp, #48	; 0x30
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800614c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006150:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02d      	beq.n	80061ba <USB_HC_StartXfer+0x86>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	791b      	ldrb	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d129      	bne.n	80061ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d117      	bne.n	800619c <USB_HC_StartXfer+0x68>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	79db      	ldrb	r3, [r3, #7]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <USB_HC_StartXfer+0x48>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	79db      	ldrb	r3, [r3, #7]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d10f      	bne.n	800619c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	4413      	add	r3, r2
 8006184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	440a      	add	r2, r1
 8006192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <USB_HC_StartXfer+0x86>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	795b      	ldrb	r3, [r3, #5]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d107      	bne.n	80061ba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fa0f 	bl	80065d4 <USB_DoPing>
      return HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e0f8      	b.n	80063ac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d018      	beq.n	80061f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	8912      	ldrh	r2, [r2, #8]
 80061ca:	4413      	add	r3, r2
 80061cc:	3b01      	subs	r3, #1
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	8912      	ldrh	r2, [r2, #8]
 80061d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061da:	8b7b      	ldrh	r3, [r7, #26]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d90b      	bls.n	80061f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061e0:	8b7b      	ldrh	r3, [r7, #26]
 80061e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	8912      	ldrh	r2, [r2, #8]
 80061ea:	fb03 f202 	mul.w	r2, r3, r2
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	611a      	str	r2, [r3, #16]
 80061f2:	e001      	b.n	80061f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061f4:	2301      	movs	r3, #1
 80061f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	8912      	ldrh	r2, [r2, #8]
 8006206:	fb03 f202 	mul.w	r2, r3, r2
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	611a      	str	r2, [r3, #16]
 800620e:	e003      	b.n	8006218 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006220:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006222:	04d9      	lsls	r1, r3, #19
 8006224:	4b63      	ldr	r3, [pc, #396]	; (80063b4 <USB_HC_StartXfer+0x280>)
 8006226:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006228:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	7a9b      	ldrb	r3, [r3, #10]
 800622e:	075b      	lsls	r3, r3, #29
 8006230:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006234:	69f9      	ldr	r1, [r7, #28]
 8006236:	0148      	lsls	r0, r1, #5
 8006238:	6a39      	ldr	r1, [r7, #32]
 800623a:	4401      	add	r1, r0
 800623c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006240:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006242:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	68d9      	ldr	r1, [r3, #12]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	460a      	mov	r2, r1
 800625c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	440a      	add	r2, r1
 800628c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006294:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	7e7b      	ldrb	r3, [r7, #25]
 80062a6:	075b      	lsls	r3, r3, #29
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	0148      	lsls	r0, r1, #5
 80062ac:	6a39      	ldr	r1, [r7, #32]
 80062ae:	4401      	add	r1, r0
 80062b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062b4:	4313      	orrs	r3, r2
 80062b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	78db      	ldrb	r3, [r3, #3]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	e003      	b.n	80062ea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	461a      	mov	r2, r3
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e04e      	b.n	80063ac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	78db      	ldrb	r3, [r3, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d149      	bne.n	80063aa <USB_HC_StartXfer+0x276>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d045      	beq.n	80063aa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	79db      	ldrb	r3, [r3, #7]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d830      	bhi.n	8006388 <USB_HC_StartXfer+0x254>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <USB_HC_StartXfer+0x1f8>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	0800633d 	.word	0x0800633d
 8006330:	08006361 	.word	0x08006361
 8006334:	0800633d 	.word	0x0800633d
 8006338:	08006361 	.word	0x08006361
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	3303      	adds	r3, #3
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006346:	8afa      	ldrh	r2, [r7, #22]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	b29b      	uxth	r3, r3
 800634e:	429a      	cmp	r2, r3
 8006350:	d91c      	bls.n	800638c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]
        }
        break;
 800635e:	e015      	b.n	800638c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	3303      	adds	r3, #3
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800636a:	8afa      	ldrh	r2, [r7, #22]
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	b29b      	uxth	r3, r3
 8006376:	429a      	cmp	r2, r3
 8006378:	d90a      	bls.n	8006390 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	619a      	str	r2, [r3, #24]
        }
        break;
 8006386:	e003      	b.n	8006390 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006388:	bf00      	nop
 800638a:	e002      	b.n	8006392 <USB_HC_StartXfer+0x25e>
        break;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <USB_HC_StartXfer+0x25e>
        break;
 8006390:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	68d9      	ldr	r1, [r3, #12]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	785a      	ldrb	r2, [r3, #1]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2000      	movs	r0, #0
 80063a2:	9000      	str	r0, [sp, #0]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fb31 	bl	8005a0c <USB_WritePacket>
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3728      	adds	r7, #40	; 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	1ff80000 	.word	0x1ff80000

080063b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	b29b      	uxth	r3, r3
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063da:	b480      	push	{r7}
 80063dc:	b089      	sub	sp, #36	; 0x24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0c9b      	lsrs	r3, r3, #18
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	0fdb      	lsrs	r3, r3, #31
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b20      	cmp	r3, #32
 8006428:	d104      	bne.n	8006434 <USB_HC_Halt+0x5a>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e0c8      	b.n	80065c6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <USB_HC_Halt+0x66>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d163      	bne.n	8006508 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	440a      	add	r2, r1
 8006456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800645e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	f040 80ab 	bne.w	80065c4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d133      	bne.n	80064e2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	440a      	add	r2, r1
 8006490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006498:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3301      	adds	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064c6:	d81d      	bhi.n	8006504 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064de:	d0ec      	beq.n	80064ba <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064e0:	e070      	b.n	80065c4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006500:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006502:	e05f      	b.n	80065c4 <USB_HC_Halt+0x1ea>
            break;
 8006504:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006506:	e05d      	b.n	80065c4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006526:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d133      	bne.n	80065a0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006552:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006556:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006576:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006584:	d81d      	bhi.n	80065c2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659c:	d0ec      	beq.n	8006578 <USB_HC_Halt+0x19e>
 800659e:	e011      	b.n	80065c4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e000      	b.n	80065c4 <USB_HC_Halt+0x1ea>
          break;
 80065c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3724      	adds	r7, #36	; 0x24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065e8:	2301      	movs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	04da      	lsls	r2, r3, #19
 80065f0:	4b15      	ldr	r3, [pc, #84]	; (8006648 <USB_DoPing+0x74>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006604:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800661c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006624:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	461a      	mov	r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	1ff80000 	.word	0x1ff80000

0800664c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff f912 	bl	800588a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006666:	2110      	movs	r1, #16
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff f96b 	bl	8005944 <USB_FlushTxFifo>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f997 	bl	80059ac <USB_FlushRxFifo>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006688:	2300      	movs	r3, #0
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	e01f      	b.n	80066ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c2:	461a      	mov	r2, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	3301      	adds	r3, #1
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d9dc      	bls.n	800668e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	e034      	b.n	8006744 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006700:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	461a      	mov	r2, r3
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006720:	d80c      	bhi.n	800673c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	4413      	add	r3, r2
 800672a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d0ec      	beq.n	8006714 <USB_StopHost+0xc8>
 800673a:	e000      	b.n	800673e <USB_StopHost+0xf2>
        break;
 800673c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d9c7      	bls.n	80066da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006750:	461a      	mov	r2, r3
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff f881 	bl	8005868 <USB_EnableGlobalInt>

  return ret;
 8006766:	7ffb      	ldrb	r3, [r7, #31]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b089      	sub	sp, #36	; 0x24
 8006774:	af04      	add	r7, sp, #16
 8006776:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006778:	2301      	movs	r3, #1
 800677a:	2202      	movs	r2, #2
 800677c:	2102      	movs	r1, #2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc66 	bl	8007050 <USBH_FindInterface>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2bff      	cmp	r3, #255	; 0xff
 800678c:	d002      	beq.n	8006794 <USBH_CDC_InterfaceInit+0x24>
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d901      	bls.n	8006798 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006794:	2302      	movs	r3, #2
 8006796:	e13d      	b.n	8006a14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc3b 	bl	8007018 <USBH_SelectInterface>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80067ac:	2302      	movs	r3, #2
 80067ae:	e131      	b.n	8006a14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80067b6:	2050      	movs	r0, #80	; 0x50
 80067b8:	f002 fafa 	bl	8008db0 <malloc>
 80067bc:	4603      	mov	r3, r0
 80067be:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067d0:	2302      	movs	r3, #2
 80067d2:	e11f      	b.n	8006a14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067d4:	2250      	movs	r2, #80	; 0x50
 80067d6:	2100      	movs	r1, #0
 80067d8:	68b8      	ldr	r0, [r7, #8]
 80067da:	f002 faf9 	bl	8008dd0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	211a      	movs	r1, #26
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	b25b      	sxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da15      	bge.n	8006822 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	211a      	movs	r1, #26
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	4413      	add	r3, r2
 8006802:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	211a      	movs	r1, #26
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	4413      	add	r3, r2
 8006818:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800681c:	881a      	ldrh	r2, [r3, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 ff2c 	bl	8008686 <USBH_AllocPipe>
 800682e:	4603      	mov	r3, r0
 8006830:	461a      	mov	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	7819      	ldrb	r1, [r3, #0]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	7858      	ldrb	r0, [r3, #1]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	8952      	ldrh	r2, [r2, #10]
 800684e:	9202      	str	r2, [sp, #8]
 8006850:	2203      	movs	r2, #3
 8006852:	9201      	str	r2, [sp, #4]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	4623      	mov	r3, r4
 8006858:	4602      	mov	r2, r0
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fee4 	bl	8008628 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2200      	movs	r2, #0
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 f9f3 	bl	8008c54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800686e:	2300      	movs	r3, #0
 8006870:	2200      	movs	r2, #0
 8006872:	210a      	movs	r1, #10
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fbeb 	bl	8007050 <USBH_FindInterface>
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2bff      	cmp	r3, #255	; 0xff
 8006882:	d002      	beq.n	800688a <USBH_CDC_InterfaceInit+0x11a>
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d901      	bls.n	800688e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800688a:	2302      	movs	r3, #2
 800688c:	e0c2      	b.n	8006a14 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	211a      	movs	r1, #26
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b25b      	sxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da16      	bge.n	80068d4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	211a      	movs	r1, #26
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	211a      	movs	r1, #26
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068cc:	881a      	ldrh	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	835a      	strh	r2, [r3, #26]
 80068d2:	e015      	b.n	8006900 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	211a      	movs	r1, #26
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	211a      	movs	r1, #26
 80068f0:	fb01 f303 	mul.w	r3, r1, r3
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068fa:	881a      	ldrh	r2, [r3, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	211a      	movs	r1, #26
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b25b      	sxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	da16      	bge.n	8006946 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	211a      	movs	r1, #26
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	4413      	add	r3, r2
 8006924:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006928:	781a      	ldrb	r2, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	211a      	movs	r1, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800693e:	881a      	ldrh	r2, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	835a      	strh	r2, [r3, #26]
 8006944:	e015      	b.n	8006972 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	211a      	movs	r1, #26
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	211a      	movs	r1, #26
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800696c:	881a      	ldrh	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7b9b      	ldrb	r3, [r3, #14]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fe84 	bl	8008686 <USBH_AllocPipe>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	7bdb      	ldrb	r3, [r3, #15]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fe7a 	bl	8008686 <USBH_AllocPipe>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	7b59      	ldrb	r1, [r3, #13]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	7b98      	ldrb	r0, [r3, #14]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	8b12      	ldrh	r2, [r2, #24]
 80069b2:	9202      	str	r2, [sp, #8]
 80069b4:	2202      	movs	r2, #2
 80069b6:	9201      	str	r2, [sp, #4]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4623      	mov	r3, r4
 80069bc:	4602      	mov	r2, r0
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fe32 	bl	8008628 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	7b19      	ldrb	r1, [r3, #12]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	7bd8      	ldrb	r0, [r3, #15]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	8b52      	ldrh	r2, [r2, #26]
 80069dc:	9202      	str	r2, [sp, #8]
 80069de:	2202      	movs	r2, #2
 80069e0:	9201      	str	r2, [sp, #4]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4623      	mov	r3, r4
 80069e6:	4602      	mov	r2, r0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fe1d 	bl	8008628 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	7b5b      	ldrb	r3, [r3, #13]
 80069fa:	2200      	movs	r2, #0
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 f928 	bl	8008c54 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	7b1b      	ldrb	r3, [r3, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 f921 	bl	8008c54 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd90      	pop	{r4, r7, pc}

08006a1c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fe12 	bl	8008666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fe3d 	bl	80086c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	7b1b      	ldrb	r3, [r3, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	7b1b      	ldrb	r3, [r3, #12]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 fdff 	bl	8008666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	7b1b      	ldrb	r3, [r3, #12]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fe2a 	bl	80086c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	7b5b      	ldrb	r3, [r3, #13]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	7b5b      	ldrb	r3, [r3, #13]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fdec 	bl	8008666 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	7b5b      	ldrb	r3, [r3, #13]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 fe17 	bl	80086c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f002 f983 	bl	8008dc0 <free>
    phost->pActiveClass->pData = 0U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3340      	adds	r3, #64	; 0x40
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8b1 	bl	8006c4e <GetLineCoding>
 8006aec:	4603      	mov	r3, r0
 8006aee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d105      	bne.n	8006b02 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006afc:	2102      	movs	r1, #2
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b02:	7afb      	ldrb	r3, [r7, #11]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d877      	bhi.n	8006c20 <USBH_CDC_Process+0x114>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <USBH_CDC_Process+0x2c>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b4d 	.word	0x08006b4d
 8006b3c:	08006b53 	.word	0x08006b53
 8006b40:	08006b83 	.word	0x08006b83
 8006b44:	08006bf7 	.word	0x08006bf7
 8006b48:	08006c05 	.word	0x08006c05
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b50:	e06d      	b.n	8006c2e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f897 	bl	8006c8c <SetLineCoding>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b70:	e058      	b.n	8006c24 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d055      	beq.n	8006c24 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b80:	e050      	b.n	8006c24 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3340      	adds	r3, #64	; 0x40
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f860 	bl	8006c4e <GetLineCoding>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d126      	bne.n	8006be6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	791b      	ldrb	r3, [r3, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d13b      	bne.n	8006c28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d133      	bne.n	8006c28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d12b      	bne.n	8006c28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d124      	bne.n	8006c28 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f958 	bl	8006e94 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006be4:	e020      	b.n	8006c28 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d01d      	beq.n	8006c28 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bf4:	e018      	b.n	8006c28 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f867 	bl	8006cca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f8da 	bl	8006db6 <CDC_ProcessReception>
      break;
 8006c02:	e014      	b.n	8006c2e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c04:	2100      	movs	r1, #0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 ffef 	bl	8007bea <USBH_ClrFeature>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006c1e:	e005      	b.n	8006c2c <USBH_CDC_Process+0x120>

    default:
      break;
 8006c20:	bf00      	nop
 8006c22:	e004      	b.n	8006c2e <USBH_CDC_Process+0x122>
      break;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <USBH_CDC_Process+0x122>
      break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <USBH_CDC_Process+0x122>
      break;
 8006c2c:	bf00      	nop

  }

  return status;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	22a1      	movs	r2, #161	; 0xa1
 8006c5c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2221      	movs	r2, #33	; 0x21
 8006c62:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2207      	movs	r2, #7
 8006c74:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2207      	movs	r2, #7
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fa81 	bl	8008184 <USBH_CtlReq>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2221      	movs	r2, #33	; 0x21
 8006c9a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2207      	movs	r2, #7
 8006cb2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2207      	movs	r2, #7
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fa62 	bl	8008184 <USBH_CtlReq>
 8006cc0:	4603      	mov	r3, r0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af02      	add	r7, sp, #8
 8006cd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d002      	beq.n	8006cf0 <CDC_ProcessTransmission+0x26>
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d023      	beq.n	8006d36 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cee:	e05e      	b.n	8006dae <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	8b12      	ldrh	r2, [r2, #24]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d90b      	bls.n	8006d14 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	69d9      	ldr	r1, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8b1a      	ldrh	r2, [r3, #24]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	7b5b      	ldrb	r3, [r3, #13]
 8006d08:	2001      	movs	r0, #1
 8006d0a:	9000      	str	r0, [sp, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fc48 	bl	80085a2 <USBH_BulkSendData>
 8006d12:	e00b      	b.n	8006d2c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	7b5b      	ldrb	r3, [r3, #13]
 8006d22:	2001      	movs	r0, #1
 8006d24:	9000      	str	r0, [sp, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fc3b 	bl	80085a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d34:	e03b      	b.n	8006dae <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	7b5b      	ldrb	r3, [r3, #13]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 ff5f 	bl	8008c00 <USBH_LL_GetURBState>
 8006d42:	4603      	mov	r3, r0
 8006d44:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d46:	7afb      	ldrb	r3, [r7, #11]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d128      	bne.n	8006d9e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	8b12      	ldrh	r2, [r2, #24]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d90e      	bls.n	8006d76 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	8b12      	ldrh	r2, [r2, #24]
 8006d60:	1a9a      	subs	r2, r3, r2
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	8b12      	ldrh	r2, [r2, #24]
 8006d6e:	441a      	add	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	61da      	str	r2, [r3, #28]
 8006d74:	e002      	b.n	8006d7c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d8c:	e00e      	b.n	8006dac <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f868 	bl	8006e6c <USBH_CDC_TransmitCallback>
      break;
 8006d9c:	e006      	b.n	8006dac <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d103      	bne.n	8006dac <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dac:	bf00      	nop
  }
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d002      	beq.n	8006ddc <CDC_ProcessReception+0x26>
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d00e      	beq.n	8006df8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006dda:	e043      	b.n	8006e64 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	6a19      	ldr	r1, [r3, #32]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	8b5a      	ldrh	r2, [r3, #26]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	7b1b      	ldrb	r3, [r3, #12]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fbff 	bl	80085ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2204      	movs	r2, #4
 8006df2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006df6:	e035      	b.n	8006e64 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	7b1b      	ldrb	r3, [r3, #12]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fefe 	bl	8008c00 <USBH_LL_GetURBState>
 8006e04:	4603      	mov	r3, r0
 8006e06:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e08:	7cfb      	ldrb	r3, [r7, #19]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d129      	bne.n	8006e62 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	7b1b      	ldrb	r3, [r3, #12]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fe61 	bl	8008adc <USBH_LL_GetLastXferSize>
 8006e1a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d016      	beq.n	8006e54 <CDC_ProcessReception+0x9e>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	8b5b      	ldrh	r3, [r3, #26]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d910      	bls.n	8006e54 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1ad2      	subs	r2, r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	6a1a      	ldr	r2, [r3, #32]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	441a      	add	r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e52:	e006      	b.n	8006e62 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f80f 	bl	8006e80 <USBH_CDC_ReceiveCallback>
      break;
 8006e62:	bf00      	nop
  }
}
 8006e64:	bf00      	nop
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e029      	b.n	8006f14 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	79fa      	ldrb	r2, [r7, #7]
 8006ec4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f81f 	bl	8006f1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f001 fd31 	bl	8008974 <USBH_LL_Init>

  return USBH_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e009      	b.n	8006f42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	33e0      	adds	r3, #224	; 0xe0
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	2200      	movs	r2, #0
 8006f3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b0f      	cmp	r3, #15
 8006f46:	d9f2      	bls.n	8006f2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	e009      	b.n	8006f62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f68:	d3f1      	bcc.n	8006f4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2240      	movs	r2, #64	; 0x40
 8006f8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d016      	beq.n	8007006 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10e      	bne.n	8007000 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fe8:	1c59      	adds	r1, r3, #1
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	33de      	adds	r3, #222	; 0xde
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	e004      	b.n	800700a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007000:	2302      	movs	r3, #2
 8007002:	73fb      	strb	r3, [r7, #15]
 8007004:	e001      	b.n	800700a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007006:	2302      	movs	r3, #2
 8007008:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800702e:	78fa      	ldrb	r2, [r7, #3]
 8007030:	429a      	cmp	r2, r3
 8007032:	d204      	bcs.n	800703e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800703c:	e001      	b.n	8007042 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800703e:	2302      	movs	r3, #2
 8007040:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	461a      	mov	r2, r3
 800705e:	4603      	mov	r3, r0
 8007060:	70fb      	strb	r3, [r7, #3]
 8007062:	460b      	mov	r3, r1
 8007064:	70bb      	strb	r3, [r7, #2]
 8007066:	4613      	mov	r3, r2
 8007068:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007078:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800707a:	e025      	b.n	80070c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	221a      	movs	r2, #26
 8007080:	fb02 f303 	mul.w	r3, r2, r3
 8007084:	3308      	adds	r3, #8
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	3302      	adds	r3, #2
 800708c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	795b      	ldrb	r3, [r3, #5]
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	429a      	cmp	r2, r3
 8007096:	d002      	beq.n	800709e <USBH_FindInterface+0x4e>
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	2bff      	cmp	r3, #255	; 0xff
 800709c:	d111      	bne.n	80070c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070a2:	78ba      	ldrb	r2, [r7, #2]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d002      	beq.n	80070ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070a8:	78bb      	ldrb	r3, [r7, #2]
 80070aa:	2bff      	cmp	r3, #255	; 0xff
 80070ac:	d109      	bne.n	80070c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070b2:	787a      	ldrb	r2, [r7, #1]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d002      	beq.n	80070be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070b8:	787b      	ldrb	r3, [r7, #1]
 80070ba:	2bff      	cmp	r3, #255	; 0xff
 80070bc:	d101      	bne.n	80070c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	e006      	b.n	80070d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	3301      	adds	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d9d6      	bls.n	800707c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070ce:	23ff      	movs	r3, #255	; 0xff
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fc81 	bl	80089ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070ea:	2101      	movs	r1, #1
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fd9a 	bl	8008c26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af04      	add	r7, sp, #16
 8007102:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007104:	2302      	movs	r3, #2
 8007106:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	d102      	bne.n	800711e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2203      	movs	r2, #3
 800711c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b0b      	cmp	r3, #11
 8007126:	f200 81be 	bhi.w	80074a6 <USBH_Process+0x3aa>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <USBH_Process+0x34>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007161 	.word	0x08007161
 8007134:	08007193 	.word	0x08007193
 8007138:	080071fb 	.word	0x080071fb
 800713c:	08007441 	.word	0x08007441
 8007140:	080074a7 	.word	0x080074a7
 8007144:	0800729f 	.word	0x0800729f
 8007148:	080073e7 	.word	0x080073e7
 800714c:	080072d5 	.word	0x080072d5
 8007150:	080072f5 	.word	0x080072f5
 8007154:	08007315 	.word	0x08007315
 8007158:	08007359 	.word	0x08007359
 800715c:	08007429 	.word	0x08007429
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 819e 	beq.w	80074aa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007174:	20c8      	movs	r0, #200	; 0xc8
 8007176:	f001 fd9d 	bl	8008cb4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fc93 	bl	8008aa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007190:	e18b      	b.n	80074aa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007198:	2b01      	cmp	r3, #1
 800719a:	d107      	bne.n	80071ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071aa:	e18d      	b.n	80074c8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b6:	d914      	bls.n	80071e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071be:	3301      	adds	r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d903      	bls.n	80071da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	220d      	movs	r2, #13
 80071d6:	701a      	strb	r2, [r3, #0]
      break;
 80071d8:	e176      	b.n	80074c8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
      break;
 80071e0:	e172      	b.n	80074c8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071e8:	f103 020a 	add.w	r2, r3, #10
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f001 fd5e 	bl	8008cb4 <USBH_Delay>
      break;
 80071f8:	e166      	b.n	80074c8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800720a:	2104      	movs	r1, #4
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007210:	2064      	movs	r0, #100	; 0x64
 8007212:	f001 fd4f 	bl	8008cb4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fc1e 	bl	8008a58 <USBH_LL_GetSpeed>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2205      	movs	r2, #5
 800722a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fa29 	bl	8008686 <USBH_AllocPipe>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800723c:	2180      	movs	r1, #128	; 0x80
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fa21 	bl	8008686 <USBH_AllocPipe>
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7919      	ldrb	r1, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007260:	b292      	uxth	r2, r2
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4603      	mov	r3, r0
 800726c:	2280      	movs	r2, #128	; 0x80
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 f9da 	bl	8008628 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7959      	ldrb	r1, [r3, #5]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007288:	b292      	uxth	r2, r2
 800728a:	9202      	str	r2, [sp, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	9201      	str	r2, [sp, #4]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4603      	mov	r3, r0
 8007294:	2200      	movs	r2, #0
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 f9c6 	bl	8008628 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800729c:	e114      	b.n	80074c8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f918 	bl	80074d4 <USBH_HandleEnum>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 80fe 	bne.w	80074ae <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d103      	bne.n	80072cc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2208      	movs	r2, #8
 80072c8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072ca:	e0f0      	b.n	80074ae <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2207      	movs	r2, #7
 80072d0:	701a      	strb	r2, [r3, #0]
      break;
 80072d2:	e0ec      	b.n	80074ae <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80e9 	beq.w	80074b2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072e6:	2101      	movs	r1, #1
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2208      	movs	r2, #8
 80072f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072f2:	e0de      	b.n	80074b2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fc2c 	bl	8007b5c <USBH_SetCfg>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 80d5 	bne.w	80074b6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2209      	movs	r2, #9
 8007310:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007312:	e0d0      	b.n	80074b6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007322:	2101      	movs	r1, #1
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fc3c 	bl	8007ba2 <USBH_SetFeature>
 800732a:	4603      	mov	r3, r0
 800732c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d103      	bne.n	800733e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	220a      	movs	r2, #10
 800733a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733c:	e0bd      	b.n	80074ba <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b03      	cmp	r3, #3
 8007344:	f040 80b9 	bne.w	80074ba <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	220a      	movs	r2, #10
 800734c:	701a      	strb	r2, [r3, #0]
      break;
 800734e:	e0b4      	b.n	80074ba <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	220a      	movs	r2, #10
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e0b0      	b.n	80074ba <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80ad 	beq.w	80074be <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
 8007370:	e016      	b.n	80073a0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007372:	7bfa      	ldrb	r2, [r7, #15]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	32de      	adds	r2, #222	; 0xde
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	791a      	ldrb	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007384:	429a      	cmp	r2, r3
 8007386:	d108      	bne.n	800739a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007388:	7bfa      	ldrb	r2, [r7, #15]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32de      	adds	r2, #222	; 0xde
 800738e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007398:	e005      	b.n	80073a6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	3301      	adds	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0e5      	beq.n	8007372 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d016      	beq.n	80073de <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	4798      	blx	r3
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2206      	movs	r2, #6
 80073c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ce:	2103      	movs	r1, #3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073d4:	e073      	b.n	80074be <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	220d      	movs	r2, #13
 80073da:	701a      	strb	r2, [r3, #0]
      break;
 80073dc:	e06f      	b.n	80074be <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	220d      	movs	r2, #13
 80073e2:	701a      	strb	r2, [r3, #0]
      break;
 80073e4:	e06b      	b.n	80074be <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d017      	beq.n	8007420 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	220b      	movs	r2, #11
 800740c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800740e:	e058      	b.n	80074c2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d154      	bne.n	80074c2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220d      	movs	r2, #13
 800741c:	701a      	strb	r2, [r3, #0]
      break;
 800741e:	e050      	b.n	80074c2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220d      	movs	r2, #13
 8007424:	701a      	strb	r2, [r3, #0]
      break;
 8007426:	e04c      	b.n	80074c2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d049      	beq.n	80074c6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
      }
      break;
 800743e:	e042      	b.n	80074c6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fd67 	bl	8006f1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d005      	beq.n	8007482 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800747c:	2105      	movs	r1, #5
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d107      	bne.n	800749e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fe20 	bl	80070dc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800749c:	e014      	b.n	80074c8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 faa4 	bl	80089ec <USBH_LL_Start>
      break;
 80074a4:	e010      	b.n	80074c8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80074a6:	bf00      	nop
 80074a8:	e00e      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074aa:	bf00      	nop
 80074ac:	e00c      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074ae:	bf00      	nop
 80074b0:	e00a      	b.n	80074c8 <USBH_Process+0x3cc>
    break;
 80074b2:	bf00      	nop
 80074b4:	e008      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074b6:	bf00      	nop
 80074b8:	e006      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074ba:	bf00      	nop
 80074bc:	e004      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074be:	bf00      	nop
 80074c0:	e002      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074c2:	bf00      	nop
 80074c4:	e000      	b.n	80074c8 <USBH_Process+0x3cc>
      break;
 80074c6:	bf00      	nop
  }
  return USBH_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop

080074d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af04      	add	r7, sp, #16
 80074da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b07      	cmp	r3, #7
 80074ea:	f200 81c1 	bhi.w	8007870 <USBH_HandleEnum+0x39c>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <USBH_HandleEnum+0x20>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007515 	.word	0x08007515
 80074f8:	080075d3 	.word	0x080075d3
 80074fc:	0800763d 	.word	0x0800763d
 8007500:	080076cb 	.word	0x080076cb
 8007504:	08007735 	.word	0x08007735
 8007508:	080077a5 	.word	0x080077a5
 800750c:	080077eb 	.word	0x080077eb
 8007510:	08007831 	.word	0x08007831
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007514:	2108      	movs	r1, #8
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa50 	bl	80079bc <USBH_Get_DevDesc>
 800751c:	4603      	mov	r3, r0
 800751e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d130      	bne.n	8007588 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7919      	ldrb	r1, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800754a:	b292      	uxth	r2, r2
 800754c:	9202      	str	r2, [sp, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	9201      	str	r2, [sp, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	4603      	mov	r3, r0
 8007556:	2280      	movs	r2, #128	; 0x80
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f865 	bl	8008628 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7959      	ldrb	r1, [r3, #5]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007572:	b292      	uxth	r2, r2
 8007574:	9202      	str	r2, [sp, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	9201      	str	r2, [sp, #4]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4603      	mov	r3, r0
 800757e:	2200      	movs	r2, #0
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 f851 	bl	8008628 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007586:	e175      	b.n	8007874 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b03      	cmp	r3, #3
 800758c:	f040 8172 	bne.w	8007874 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007596:	3301      	adds	r3, #1
 8007598:	b2da      	uxtb	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d903      	bls.n	80075b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220d      	movs	r2, #13
 80075ae:	701a      	strb	r2, [r3, #0]
      break;
 80075b0:	e160      	b.n	8007874 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	795b      	ldrb	r3, [r3, #5]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f885 	bl	80086c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	791b      	ldrb	r3, [r3, #4]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f87f 	bl	80086c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
      break;
 80075d0:	e150      	b.n	8007874 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075d2:	2112      	movs	r1, #18
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f9f1 	bl	80079bc <USBH_Get_DevDesc>
 80075da:	4603      	mov	r3, r0
 80075dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075ea:	e145      	b.n	8007878 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f040 8142 	bne.w	8007878 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800760a:	2b03      	cmp	r3, #3
 800760c:	d903      	bls.n	8007616 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220d      	movs	r2, #13
 8007612:	701a      	strb	r2, [r3, #0]
      break;
 8007614:	e130      	b.n	8007878 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 f853 	bl	80086c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	791b      	ldrb	r3, [r3, #4]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f84d 	bl	80086c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
      break;
 800763a:	e11d      	b.n	8007878 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800763c:	2101      	movs	r1, #1
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa68 	bl	8007b14 <USBH_SetAddress>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d132      	bne.n	80076b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800764e:	2002      	movs	r0, #2
 8007650:	f001 fb30 	bl	8008cb4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2203      	movs	r2, #3
 8007660:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7919      	ldrb	r1, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007676:	b292      	uxth	r2, r2
 8007678:	9202      	str	r2, [sp, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	2280      	movs	r2, #128	; 0x80
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 ffcf 	bl	8008628 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	7959      	ldrb	r1, [r3, #5]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800769e:	b292      	uxth	r2, r2
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	2200      	movs	r2, #0
 80076a4:	9201      	str	r2, [sp, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4603      	mov	r3, r0
 80076aa:	2200      	movs	r2, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 ffbb 	bl	8008628 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076b2:	e0e3      	b.n	800787c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	f040 80e0 	bne.w	800787c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	220d      	movs	r2, #13
 80076c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	705a      	strb	r2, [r3, #1]
      break;
 80076c8:	e0d8      	b.n	800787c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076ca:	2109      	movs	r1, #9
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f99d 	bl	8007a0c <USBH_Get_CfgDesc>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2204      	movs	r2, #4
 80076e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076e2:	e0cd      	b.n	8007880 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	f040 80ca 	bne.w	8007880 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076f2:	3301      	adds	r3, #1
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007702:	2b03      	cmp	r3, #3
 8007704:	d903      	bls.n	800770e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220d      	movs	r2, #13
 800770a:	701a      	strb	r2, [r3, #0]
      break;
 800770c:	e0b8      	b.n	8007880 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	795b      	ldrb	r3, [r3, #5]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 ffd7 	bl	80086c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 ffd1 	bl	80086c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	e0a5      	b.n	8007880 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f965 	bl	8007a0c <USBH_Get_CfgDesc>
 8007742:	4603      	mov	r3, r0
 8007744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2205      	movs	r2, #5
 8007750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007752:	e097      	b.n	8007884 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b03      	cmp	r3, #3
 8007758:	f040 8094 	bne.w	8007884 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007762:	3301      	adds	r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007772:	2b03      	cmp	r3, #3
 8007774:	d903      	bls.n	800777e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	220d      	movs	r2, #13
 800777a:	701a      	strb	r2, [r3, #0]
      break;
 800777c:	e082      	b.n	8007884 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	795b      	ldrb	r3, [r3, #5]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 ff9f 	bl	80086c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	791b      	ldrb	r3, [r3, #4]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 ff99 	bl	80086c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e06f      	b.n	8007884 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d019      	beq.n	80077e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ba:	23ff      	movs	r3, #255	; 0xff
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f949 	bl	8007a54 <USBH_Get_StringDesc>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2206      	movs	r2, #6
 80077d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077d2:	e059      	b.n	8007888 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d156      	bne.n	8007888 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2206      	movs	r2, #6
 80077de:	705a      	strb	r2, [r3, #1]
      break;
 80077e0:	e052      	b.n	8007888 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2206      	movs	r2, #6
 80077e6:	705a      	strb	r2, [r3, #1]
      break;
 80077e8:	e04e      	b.n	8007888 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d019      	beq.n	8007828 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007800:	23ff      	movs	r3, #255	; 0xff
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f926 	bl	8007a54 <USBH_Get_StringDesc>
 8007808:	4603      	mov	r3, r0
 800780a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2207      	movs	r2, #7
 8007816:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007818:	e038      	b.n	800788c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d135      	bne.n	800788c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2207      	movs	r2, #7
 8007824:	705a      	strb	r2, [r3, #1]
      break;
 8007826:	e031      	b.n	800788c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2207      	movs	r2, #7
 800782c:	705a      	strb	r2, [r3, #1]
      break;
 800782e:	e02d      	b.n	800788c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007836:	2b00      	cmp	r3, #0
 8007838:	d017      	beq.n	800786a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007846:	23ff      	movs	r3, #255	; 0xff
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f903 	bl	8007a54 <USBH_Get_StringDesc>
 800784e:	4603      	mov	r3, r0
 8007850:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800785c:	e018      	b.n	8007890 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d115      	bne.n	8007890 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	e012      	b.n	8007890 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
      break;
 800786e:	e00f      	b.n	8007890 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007870:	bf00      	nop
 8007872:	e00e      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 8007874:	bf00      	nop
 8007876:	e00c      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 8007878:	bf00      	nop
 800787a:	e00a      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 800787c:	bf00      	nop
 800787e:	e008      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 8007880:	bf00      	nop
 8007882:	e006      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <USBH_HandleEnum+0x3be>
      break;
 8007890:	bf00      	nop
  }
  return Status;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f804 	bl	80078de <USBH_HandleSof>
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b0b      	cmp	r3, #11
 80078ee:	d10a      	bne.n	8007906 <USBH_HandleSof+0x28>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
  }
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800791e:	bf00      	nop
}
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800793a:	bf00      	nop
}
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f844 	bl	8008a22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fe91 	bl	80086c8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	795b      	ldrb	r3, [r3, #5]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fe8b 	bl	80086c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079da:	2100      	movs	r1, #0
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f864 	bl	8007aaa <USBH_GetDescriptor>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	b292      	uxth	r2, r2
 80079fc:	4619      	mov	r1, r3
 80079fe:	f000 f918 	bl	8007c32 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	331c      	adds	r3, #28
 8007a1c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007a1e:	887b      	ldrh	r3, [r7, #2]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f83d 	bl	8007aaa <USBH_GetDescriptor>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d107      	bne.n	8007a4a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a3a:	887b      	ldrh	r3, [r7, #2]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f987 	bl	8007d54 <USBH_ParseCfgDesc>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	460b      	mov	r3, r1
 8007a62:	72fb      	strb	r3, [r7, #11]
 8007a64:	4613      	mov	r3, r2
 8007a66:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a70:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a78:	893b      	ldrh	r3, [r7, #8]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	2100      	movs	r1, #0
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f812 	bl	8007aaa <USBH_GetDescriptor>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a96:	893a      	ldrh	r2, [r7, #8]
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fb24 	bl	80080e8 <USBH_ParseStringDesc>
  }

  return status;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	607b      	str	r3, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	72fb      	strb	r3, [r7, #11]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	789b      	ldrb	r3, [r3, #2]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d11c      	bne.n	8007afe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2206      	movs	r2, #6
 8007ad4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	893a      	ldrh	r2, [r7, #8]
 8007ada:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007adc:	893b      	ldrh	r3, [r7, #8]
 8007ade:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae6:	d104      	bne.n	8007af2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f240 4209 	movw	r2, #1033	; 0x409
 8007aee:	829a      	strh	r2, [r3, #20]
 8007af0:	e002      	b.n	8007af8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8b3a      	ldrh	r2, [r7, #24]
 8007afc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007afe:	8b3b      	ldrh	r3, [r7, #24]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fb3d 	bl	8008184 <USBH_CtlReq>
 8007b0a:	4603      	mov	r3, r0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	789b      	ldrb	r3, [r3, #2]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d10f      	bne.n	8007b48 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2205      	movs	r2, #5
 8007b32:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fb19 	bl	8008184 <USBH_CtlReq>
 8007b52:	4603      	mov	r3, r0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	789b      	ldrb	r3, [r3, #2]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d10e      	bne.n	8007b8e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2209      	movs	r2, #9
 8007b7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	887a      	ldrh	r2, [r7, #2]
 8007b80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 faf6 	bl	8008184 <USBH_CtlReq>
 8007b98:	4603      	mov	r3, r0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	789b      	ldrb	r3, [r3, #2]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10f      	bne.n	8007bd6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fad2 	bl	8008184 <USBH_CtlReq>
 8007be0:	4603      	mov	r3, r0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	789b      	ldrb	r3, [r3, #2]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d10f      	bne.n	8007c1e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 faae 	bl	8008184 <USBH_CtlReq>
 8007c28:	4603      	mov	r3, r0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	785a      	ldrb	r2, [r3, #1]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3302      	adds	r3, #2
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	3303      	adds	r3, #3
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	791a      	ldrb	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	795a      	ldrb	r2, [r3, #5]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	799a      	ldrb	r2, [r3, #6]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	79da      	ldrb	r2, [r3, #7]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	79db      	ldrb	r3, [r3, #7]
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	dc11      	bgt.n	8007cb8 <USBH_ParseDevDesc+0x86>
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	db16      	blt.n	8007cc6 <USBH_ParseDevDesc+0x94>
 8007c98:	3b08      	subs	r3, #8
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	bf14      	ite	ne
 8007cac:	2301      	movne	r3, #1
 8007cae:	2300      	moveq	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <USBH_ParseDevDesc+0x8a>
 8007cb6:	e006      	b.n	8007cc6 <USBH_ParseDevDesc+0x94>
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	d104      	bne.n	8007cc6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	79da      	ldrb	r2, [r3, #7]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	71da      	strb	r2, [r3, #7]
      break;
 8007cc4:	e003      	b.n	8007cce <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2240      	movs	r2, #64	; 0x40
 8007cca:	71da      	strb	r2, [r3, #7]
      break;
 8007ccc:	bf00      	nop
  }

  if (length > 8U)
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d939      	bls.n	8007d48 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3309      	adds	r3, #9
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	330a      	adds	r3, #10
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	330b      	adds	r3, #11
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	330d      	adds	r3, #13
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	4313      	orrs	r3, r2
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	7b9a      	ldrb	r2, [r3, #14]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	7bda      	ldrb	r2, [r3, #15]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	7c1a      	ldrb	r2, [r3, #16]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	7c5a      	ldrb	r2, [r3, #17]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	745a      	strb	r2, [r3, #17]
  }
}
 8007d48:	bf00      	nop
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08c      	sub	sp, #48	; 0x30
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d68:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	785a      	ldrb	r2, [r3, #1]
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	3302      	adds	r3, #2
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3303      	adds	r3, #3
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db0:	bf28      	it	cs
 8007db2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	791a      	ldrb	r2, [r3, #4]
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	795a      	ldrb	r2, [r3, #5]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	799a      	ldrb	r2, [r3, #6]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	79da      	ldrb	r2, [r3, #7]
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	7a1a      	ldrb	r2, [r3, #8]
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b09      	cmp	r3, #9
 8007dea:	d002      	beq.n	8007df2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2209      	movs	r2, #9
 8007df0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	f240 809d 	bls.w	8007f34 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007dfa:	2309      	movs	r3, #9
 8007dfc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e02:	e081      	b.n	8007f08 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e04:	f107 0316 	add.w	r3, r7, #22
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0c:	f000 f99f 	bl	800814e <USBH_GetNextDesc>
 8007e10:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d176      	bne.n	8007f08 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d002      	beq.n	8007e28 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	2209      	movs	r2, #9
 8007e26:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e2c:	221a      	movs	r2, #26
 8007e2e:	fb02 f303 	mul.w	r3, r2, r3
 8007e32:	3308      	adds	r3, #8
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	4413      	add	r3, r2
 8007e38:	3302      	adds	r3, #2
 8007e3a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e3e:	69f8      	ldr	r0, [r7, #28]
 8007e40:	f000 f87e 	bl	8007f40 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e4e:	e043      	b.n	8007ed8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e50:	f107 0316 	add.w	r3, r7, #22
 8007e54:	4619      	mov	r1, r3
 8007e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e58:	f000 f979 	bl	800814e <USBH_GetNextDesc>
 8007e5c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b05      	cmp	r3, #5
 8007e64:	d138      	bne.n	8007ed8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	795b      	ldrb	r3, [r3, #5]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d10f      	bne.n	8007e8e <USBH_ParseCfgDesc+0x13a>
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	799b      	ldrb	r3, [r3, #6]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d10b      	bne.n	8007e8e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	79db      	ldrb	r3, [r3, #7]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10f      	bne.n	8007e9e <USBH_ParseCfgDesc+0x14a>
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d00b      	beq.n	8007e9e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	2209      	movs	r2, #9
 8007e8a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e8c:	e007      	b.n	8007e9e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d004      	beq.n	8007ea0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	2207      	movs	r2, #7
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e000      	b.n	8007ea0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e9e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ea8:	3201      	adds	r2, #1
 8007eaa:	00d2      	lsls	r2, r2, #3
 8007eac:	211a      	movs	r1, #26
 8007eae:	fb01 f303 	mul.w	r3, r1, r3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	6a3a      	ldr	r2, [r7, #32]
 8007eb8:	4413      	add	r3, r2
 8007eba:	3304      	adds	r3, #4
 8007ebc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec0:	69b9      	ldr	r1, [r7, #24]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f86b 	bl	8007f9e <USBH_ParseEPDesc>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	791b      	ldrb	r3, [r3, #4]
 8007edc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d204      	bcs.n	8007eee <USBH_ParseCfgDesc+0x19a>
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	885a      	ldrh	r2, [r3, #2]
 8007ee8:	8afb      	ldrh	r3, [r7, #22]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d8b0      	bhi.n	8007e50 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	791b      	ldrb	r3, [r3, #4]
 8007ef2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d201      	bcs.n	8007efe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e01c      	b.n	8007f38 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f02:	3301      	adds	r3, #1
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d805      	bhi.n	8007f1c <USBH_ParseCfgDesc+0x1c8>
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	885a      	ldrh	r2, [r3, #2]
 8007f14:	8afb      	ldrh	r3, [r7, #22]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	f63f af74 	bhi.w	8007e04 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	791b      	ldrb	r3, [r3, #4]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	bf28      	it	cs
 8007f24:	2302      	movcs	r3, #2
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d201      	bcs.n	8007f34 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e001      	b.n	8007f38 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3730      	adds	r7, #48	; 0x30
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	785a      	ldrb	r2, [r3, #1]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	789a      	ldrb	r2, [r3, #2]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	78da      	ldrb	r2, [r3, #3]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	791a      	ldrb	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	795a      	ldrb	r2, [r3, #5]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	799a      	ldrb	r2, [r3, #6]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	79da      	ldrb	r2, [r3, #7]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	7a1a      	ldrb	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	721a      	strb	r2, [r3, #8]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b087      	sub	sp, #28
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	785a      	ldrb	r2, [r3, #1]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	789a      	ldrb	r2, [r3, #2]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	78da      	ldrb	r2, [r3, #3]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3305      	adds	r3, #5
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	799a      	ldrb	r2, [r3, #6]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	889b      	ldrh	r3, [r3, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	75fb      	strb	r3, [r7, #23]
 8007ffe:	e033      	b.n	8008068 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	889b      	ldrh	r3, [r3, #4]
 8008004:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008008:	f023 0307 	bic.w	r3, r3, #7
 800800c:	b29a      	uxth	r2, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	889b      	ldrh	r3, [r3, #4]
 8008016:	b21a      	sxth	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b299      	uxth	r1, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3305      	adds	r3, #5
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	b29b      	uxth	r3, r3
 800802c:	430b      	orrs	r3, r1
 800802e:	b29b      	uxth	r3, r3
 8008030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008034:	2b00      	cmp	r3, #0
 8008036:	d110      	bne.n	800805a <USBH_ParseEPDesc+0xbc>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b299      	uxth	r1, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3305      	adds	r3, #5
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	b29b      	uxth	r3, r3
 800804c:	430b      	orrs	r3, r1
 800804e:	b29b      	uxth	r3, r3
 8008050:	b21b      	sxth	r3, r3
 8008052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008056:	b21b      	sxth	r3, r3
 8008058:	e001      	b.n	800805e <USBH_ParseEPDesc+0xc0>
 800805a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805e:	4313      	orrs	r3, r2
 8008060:	b21b      	sxth	r3, r3
 8008062:	b29a      	uxth	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800806e:	2b00      	cmp	r3, #0
 8008070:	d116      	bne.n	80080a0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	78db      	ldrb	r3, [r3, #3]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d005      	beq.n	800808a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	78db      	ldrb	r3, [r3, #3]
 8008082:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008086:	2b03      	cmp	r3, #3
 8008088:	d127      	bne.n	80080da <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	799b      	ldrb	r3, [r3, #6]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <USBH_ParseEPDesc+0xfc>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	799b      	ldrb	r3, [r3, #6]
 8008096:	2b10      	cmp	r3, #16
 8008098:	d91f      	bls.n	80080da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800809a:	2303      	movs	r3, #3
 800809c:	75fb      	strb	r3, [r7, #23]
 800809e:	e01c      	b.n	80080da <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	78db      	ldrb	r3, [r3, #3]
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d10a      	bne.n	80080c2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	799b      	ldrb	r3, [r3, #6]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <USBH_ParseEPDesc+0x11e>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	799b      	ldrb	r3, [r3, #6]
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d90e      	bls.n	80080da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080bc:	2303      	movs	r3, #3
 80080be:	75fb      	strb	r3, [r7, #23]
 80080c0:	e00b      	b.n	80080da <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	78db      	ldrb	r3, [r3, #3]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d105      	bne.n	80080da <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	799b      	ldrb	r3, [r3, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080d6:	2303      	movs	r3, #3
 80080d8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d120      	bne.n	8008142 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	1e9a      	subs	r2, r3, #2
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	4293      	cmp	r3, r2
 800810a:	bf28      	it	cs
 800810c:	4613      	movcs	r3, r2
 800810e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3302      	adds	r3, #2
 8008114:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008116:	2300      	movs	r3, #0
 8008118:	82fb      	strh	r3, [r7, #22]
 800811a:	e00b      	b.n	8008134 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800811c:	8afb      	ldrh	r3, [r7, #22]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3301      	adds	r3, #1
 800812c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800812e:	8afb      	ldrh	r3, [r7, #22]
 8008130:	3302      	adds	r3, #2
 8008132:	82fb      	strh	r3, [r7, #22]
 8008134:	8afa      	ldrh	r2, [r7, #22]
 8008136:	8abb      	ldrh	r3, [r7, #20]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3ef      	bcc.n	800811c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
  }
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800814e:	b480      	push	{r7}
 8008150:	b085      	sub	sp, #20
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	881a      	ldrh	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	4413      	add	r3, r2
 8008164:	b29a      	uxth	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008176:	68fb      	ldr	r3, [r7, #12]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008192:	2301      	movs	r3, #1
 8008194:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	789b      	ldrb	r3, [r3, #2]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d002      	beq.n	80081a4 <USBH_CtlReq+0x20>
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d00f      	beq.n	80081c2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80081a2:	e027      	b.n	80081f4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2202      	movs	r2, #2
 80081ba:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	e018      	b.n	80081f4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f81c 	bl	8008200 <USBH_HandleControl>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <USBH_CtlReq+0x54>
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d106      	bne.n	80081e6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	761a      	strb	r2, [r3, #24]
      break;
 80081e4:	e005      	b.n	80081f2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d102      	bne.n	80081f2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	709a      	strb	r2, [r3, #2]
      break;
 80081f2:	bf00      	nop
  }
  return status;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008208:	2301      	movs	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800820c:	2300      	movs	r3, #0
 800820e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7e1b      	ldrb	r3, [r3, #24]
 8008214:	3b01      	subs	r3, #1
 8008216:	2b0a      	cmp	r3, #10
 8008218:	f200 8156 	bhi.w	80084c8 <USBH_HandleControl+0x2c8>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <USBH_HandleControl+0x24>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008251 	.word	0x08008251
 8008228:	0800826b 	.word	0x0800826b
 800822c:	080082d5 	.word	0x080082d5
 8008230:	080082fb 	.word	0x080082fb
 8008234:	08008333 	.word	0x08008333
 8008238:	0800835d 	.word	0x0800835d
 800823c:	080083af 	.word	0x080083af
 8008240:	080083d1 	.word	0x080083d1
 8008244:	0800840d 	.word	0x0800840d
 8008248:	08008433 	.word	0x08008433
 800824c:	08008471 	.word	0x08008471
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f103 0110 	add.w	r1, r3, #16
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	795b      	ldrb	r3, [r3, #5]
 800825a:	461a      	mov	r2, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f943 	bl	80084e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	761a      	strb	r2, [r3, #24]
      break;
 8008268:	e139      	b.n	80084de <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	795b      	ldrb	r3, [r3, #5]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fcc5 	bl	8008c00 <USBH_LL_GetURBState>
 8008276:	4603      	mov	r3, r0
 8008278:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d11e      	bne.n	80082be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	7c1b      	ldrb	r3, [r3, #16]
 8008284:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008288:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8adb      	ldrh	r3, [r3, #22]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008292:	7b7b      	ldrb	r3, [r7, #13]
 8008294:	2b80      	cmp	r3, #128	; 0x80
 8008296:	d103      	bne.n	80082a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2203      	movs	r2, #3
 800829c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800829e:	e115      	b.n	80084cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2205      	movs	r2, #5
 80082a4:	761a      	strb	r2, [r3, #24]
      break;
 80082a6:	e111      	b.n	80084cc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80082a8:	7b7b      	ldrb	r3, [r7, #13]
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d103      	bne.n	80082b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2209      	movs	r2, #9
 80082b2:	761a      	strb	r2, [r3, #24]
      break;
 80082b4:	e10a      	b.n	80084cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2207      	movs	r2, #7
 80082ba:	761a      	strb	r2, [r3, #24]
      break;
 80082bc:	e106      	b.n	80084cc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d003      	beq.n	80082cc <USBH_HandleControl+0xcc>
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	f040 8100 	bne.w	80084cc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220b      	movs	r2, #11
 80082d0:	761a      	strb	r2, [r3, #24]
      break;
 80082d2:	e0fb      	b.n	80084cc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6899      	ldr	r1, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	899a      	ldrh	r2, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	791b      	ldrb	r3, [r3, #4]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f93a 	bl	8008566 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2204      	movs	r2, #4
 80082f6:	761a      	strb	r2, [r3, #24]
      break;
 80082f8:	e0f1      	b.n	80084de <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	791b      	ldrb	r3, [r3, #4]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc7d 	bl	8008c00 <USBH_LL_GetURBState>
 8008306:	4603      	mov	r3, r0
 8008308:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d102      	bne.n	8008316 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2209      	movs	r2, #9
 8008314:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b05      	cmp	r3, #5
 800831a:	d102      	bne.n	8008322 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800831c:	2303      	movs	r3, #3
 800831e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008320:	e0d6      	b.n	80084d0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b04      	cmp	r3, #4
 8008326:	f040 80d3 	bne.w	80084d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	220b      	movs	r2, #11
 800832e:	761a      	strb	r2, [r3, #24]
      break;
 8008330:	e0ce      	b.n	80084d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6899      	ldr	r1, [r3, #8]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	899a      	ldrh	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	795b      	ldrb	r3, [r3, #5]
 800833e:	2001      	movs	r0, #1
 8008340:	9000      	str	r0, [sp, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8ea 	bl	800851c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2206      	movs	r2, #6
 8008358:	761a      	strb	r2, [r3, #24]
      break;
 800835a:	e0c0      	b.n	80084de <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	795b      	ldrb	r3, [r3, #5]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fc4c 	bl	8008c00 <USBH_LL_GetURBState>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d103      	bne.n	800837a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2207      	movs	r2, #7
 8008376:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008378:	e0ac      	b.n	80084d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b05      	cmp	r3, #5
 800837e:	d105      	bne.n	800838c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	220c      	movs	r2, #12
 8008384:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008386:	2303      	movs	r3, #3
 8008388:	73fb      	strb	r3, [r7, #15]
      break;
 800838a:	e0a3      	b.n	80084d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d103      	bne.n	800839a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2205      	movs	r2, #5
 8008396:	761a      	strb	r2, [r3, #24]
      break;
 8008398:	e09c      	b.n	80084d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b04      	cmp	r3, #4
 800839e:	f040 8099 	bne.w	80084d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	220b      	movs	r2, #11
 80083a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80083a8:	2302      	movs	r3, #2
 80083aa:	73fb      	strb	r3, [r7, #15]
      break;
 80083ac:	e092      	b.n	80084d4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	791b      	ldrb	r3, [r3, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f8d5 	bl	8008566 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2208      	movs	r2, #8
 80083cc:	761a      	strb	r2, [r3, #24]

      break;
 80083ce:	e086      	b.n	80084de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	791b      	ldrb	r3, [r3, #4]
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fc12 	bl	8008c00 <USBH_LL_GetURBState>
 80083dc:	4603      	mov	r3, r0
 80083de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d105      	bne.n	80083f2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	220d      	movs	r2, #13
 80083ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083f0:	e072      	b.n	80084d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d103      	bne.n	8008400 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	220b      	movs	r2, #11
 80083fc:	761a      	strb	r2, [r3, #24]
      break;
 80083fe:	e06b      	b.n	80084d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b05      	cmp	r3, #5
 8008404:	d168      	bne.n	80084d8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008406:	2303      	movs	r3, #3
 8008408:	73fb      	strb	r3, [r7, #15]
      break;
 800840a:	e065      	b.n	80084d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	795b      	ldrb	r3, [r3, #5]
 8008410:	2201      	movs	r2, #1
 8008412:	9200      	str	r2, [sp, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	2100      	movs	r1, #0
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f87f 	bl	800851c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	220a      	movs	r2, #10
 800842e:	761a      	strb	r2, [r3, #24]
      break;
 8008430:	e055      	b.n	80084de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	795b      	ldrb	r3, [r3, #5]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fbe1 	bl	8008c00 <USBH_LL_GetURBState>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d105      	bne.n	8008454 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	220d      	movs	r2, #13
 8008450:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008452:	e043      	b.n	80084dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d103      	bne.n	8008462 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2209      	movs	r2, #9
 800845e:	761a      	strb	r2, [r3, #24]
      break;
 8008460:	e03c      	b.n	80084dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b04      	cmp	r3, #4
 8008466:	d139      	bne.n	80084dc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	220b      	movs	r2, #11
 800846c:	761a      	strb	r2, [r3, #24]
      break;
 800846e:	e035      	b.n	80084dc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7e5b      	ldrb	r3, [r3, #25]
 8008474:	3301      	adds	r3, #1
 8008476:	b2da      	uxtb	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	765a      	strb	r2, [r3, #25]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7e5b      	ldrb	r3, [r3, #25]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d806      	bhi.n	8008492 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008490:	e025      	b.n	80084de <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008498:	2106      	movs	r1, #6
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	795b      	ldrb	r3, [r3, #5]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f90c 	bl	80086c8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	791b      	ldrb	r3, [r3, #4]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f906 	bl	80086c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80084c2:	2302      	movs	r3, #2
 80084c4:	73fb      	strb	r3, [r7, #15]
      break;
 80084c6:	e00a      	b.n	80084de <USBH_HandleControl+0x2de>

    default:
      break;
 80084c8:	bf00      	nop
 80084ca:	e008      	b.n	80084de <USBH_HandleControl+0x2de>
      break;
 80084cc:	bf00      	nop
 80084ce:	e006      	b.n	80084de <USBH_HandleControl+0x2de>
      break;
 80084d0:	bf00      	nop
 80084d2:	e004      	b.n	80084de <USBH_HandleControl+0x2de>
      break;
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <USBH_HandleControl+0x2de>
      break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <USBH_HandleControl+0x2de>
      break;
 80084dc:	bf00      	nop
  }

  return status;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084f6:	79f9      	ldrb	r1, [r7, #7]
 80084f8:	2300      	movs	r3, #0
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	2308      	movs	r3, #8
 80084fe:	9302      	str	r3, [sp, #8]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	2300      	movs	r3, #0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	2200      	movs	r2, #0
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fb46 	bl	8008b9e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af04      	add	r7, sp, #16
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4611      	mov	r1, r2
 8008528:	461a      	mov	r2, r3
 800852a:	460b      	mov	r3, r1
 800852c:	80fb      	strh	r3, [r7, #6]
 800852e:	4613      	mov	r3, r2
 8008530:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008540:	7979      	ldrb	r1, [r7, #5]
 8008542:	7e3b      	ldrb	r3, [r7, #24]
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	88fb      	ldrh	r3, [r7, #6]
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	2301      	movs	r3, #1
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	2200      	movs	r2, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 fb21 	bl	8008b9e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b088      	sub	sp, #32
 800856a:	af04      	add	r7, sp, #16
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4611      	mov	r1, r2
 8008572:	461a      	mov	r2, r3
 8008574:	460b      	mov	r3, r1
 8008576:	80fb      	strh	r3, [r7, #6]
 8008578:	4613      	mov	r3, r2
 800857a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800857c:	7979      	ldrb	r1, [r7, #5]
 800857e:	2300      	movs	r3, #0
 8008580:	9303      	str	r3, [sp, #12]
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	2301      	movs	r3, #1
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	2201      	movs	r2, #1
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fb03 	bl	8008b9e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008598:	2300      	movs	r3, #0

}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b088      	sub	sp, #32
 80085a6:	af04      	add	r7, sp, #16
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	4611      	mov	r1, r2
 80085ae:	461a      	mov	r2, r3
 80085b0:	460b      	mov	r3, r1
 80085b2:	80fb      	strh	r3, [r7, #6]
 80085b4:	4613      	mov	r3, r2
 80085b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085c6:	7979      	ldrb	r1, [r7, #5]
 80085c8:	7e3b      	ldrb	r3, [r7, #24]
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	88fb      	ldrh	r3, [r7, #6]
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	2301      	movs	r3, #1
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2302      	movs	r3, #2
 80085da:	2200      	movs	r2, #0
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fade 	bl	8008b9e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4611      	mov	r1, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	460b      	mov	r3, r1
 80085fc:	80fb      	strh	r3, [r7, #6]
 80085fe:	4613      	mov	r3, r2
 8008600:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008602:	7979      	ldrb	r1, [r7, #5]
 8008604:	2300      	movs	r3, #0
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	9302      	str	r3, [sp, #8]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	2301      	movs	r3, #1
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2302      	movs	r3, #2
 8008616:	2201      	movs	r2, #1
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fac0 	bl	8008b9e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af04      	add	r7, sp, #16
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4603      	mov	r3, r0
 8008638:	70fb      	strb	r3, [r7, #3]
 800863a:	460b      	mov	r3, r1
 800863c:	70bb      	strb	r3, [r7, #2]
 800863e:	4613      	mov	r3, r2
 8008640:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008642:	7878      	ldrb	r0, [r7, #1]
 8008644:	78ba      	ldrb	r2, [r7, #2]
 8008646:	78f9      	ldrb	r1, [r7, #3]
 8008648:	8b3b      	ldrh	r3, [r7, #24]
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	7d3b      	ldrb	r3, [r7, #20]
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	7c3b      	ldrb	r3, [r7, #16]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa53 	bl	8008b02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	460b      	mov	r3, r1
 8008670:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa72 	bl	8008b60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f836 	bl	8008704 <USBH_GetFreePipe>
 8008698:	4603      	mov	r3, r0
 800869a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800869c:	89fb      	ldrh	r3, [r7, #14]
 800869e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00a      	beq.n	80086bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	89fb      	ldrh	r3, [r7, #14]
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	33e0      	adds	r3, #224	; 0xe0
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80086bc:	89fb      	ldrh	r3, [r7, #14]
 80086be:	b2db      	uxtb	r3, r3
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2b0f      	cmp	r3, #15
 80086d8:	d80d      	bhi.n	80086f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	33e0      	adds	r3, #224	; 0xe0
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	33e0      	adds	r3, #224	; 0xe0
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	440b      	add	r3, r1
 80086f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	e00f      	b.n	8008736 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	33e0      	adds	r3, #224	; 0xe0
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	b29b      	uxth	r3, r3
 800872e:	e007      	b.n	8008740 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	3301      	adds	r3, #1
 8008734:	73fb      	strb	r3, [r7, #15]
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	2b0f      	cmp	r3, #15
 800873a:	d9ec      	bls.n	8008716 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800873c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008750:	2201      	movs	r2, #1
 8008752:	490e      	ldr	r1, [pc, #56]	; (800878c <MX_USB_HOST_Init+0x40>)
 8008754:	480e      	ldr	r0, [pc, #56]	; (8008790 <MX_USB_HOST_Init+0x44>)
 8008756:	f7fe fba7 	bl	8006ea8 <USBH_Init>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008760:	f7f8 fdb0 	bl	80012c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008764:	490b      	ldr	r1, [pc, #44]	; (8008794 <MX_USB_HOST_Init+0x48>)
 8008766:	480a      	ldr	r0, [pc, #40]	; (8008790 <MX_USB_HOST_Init+0x44>)
 8008768:	f7fe fc2c 	bl	8006fc4 <USBH_RegisterClass>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008772:	f7f8 fda7 	bl	80012c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008776:	4806      	ldr	r0, [pc, #24]	; (8008790 <MX_USB_HOST_Init+0x44>)
 8008778:	f7fe fcb0 	bl	80070dc <USBH_Start>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008782:	f7f8 fd9f 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	080087ad 	.word	0x080087ad
 8008790:	200001fc 	.word	0x200001fc
 8008794:	2000000c 	.word	0x2000000c

08008798 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800879c:	4802      	ldr	r0, [pc, #8]	; (80087a8 <MX_USB_HOST_Process+0x10>)
 800879e:	f7fe fcad 	bl	80070fc <USBH_Process>
}
 80087a2:	bf00      	nop
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	200001fc 	.word	0x200001fc

080087ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d819      	bhi.n	80087f4 <USBH_UserProcess+0x48>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <USBH_UserProcess+0x1c>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	080087f5 	.word	0x080087f5
 80087cc:	080087e5 	.word	0x080087e5
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	080087dd 	.word	0x080087dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <USBH_UserProcess+0x58>)
 80087de:	2203      	movs	r2, #3
 80087e0:	701a      	strb	r2, [r3, #0]
  break;
 80087e2:	e008      	b.n	80087f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <USBH_UserProcess+0x58>)
 80087e6:	2202      	movs	r2, #2
 80087e8:	701a      	strb	r2, [r3, #0]
  break;
 80087ea:	e004      	b.n	80087f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <USBH_UserProcess+0x58>)
 80087ee:	2201      	movs	r2, #1
 80087f0:	701a      	strb	r2, [r3, #0]
  break;
 80087f2:	e000      	b.n	80087f6 <USBH_UserProcess+0x4a>

  default:
  break;
 80087f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	200005d4 	.word	0x200005d4

08008808 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	609a      	str	r2, [r3, #8]
 800881c:	60da      	str	r2, [r3, #12]
 800881e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008828:	d147      	bne.n	80088ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	4b25      	ldr	r3, [pc, #148]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	4a24      	ldr	r2, [pc, #144]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6313      	str	r3, [r2, #48]	; 0x30
 800883a:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800884a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800884c:	2300      	movs	r3, #0
 800884e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008854:	f107 0314 	add.w	r3, r7, #20
 8008858:	4619      	mov	r1, r3
 800885a:	481b      	ldr	r0, [pc, #108]	; (80088c8 <HAL_HCD_MspInit+0xc0>)
 800885c:	f7f9 fd9a 	bl	8002394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008860:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008866:	2302      	movs	r3, #2
 8008868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800886e:	2300      	movs	r3, #0
 8008870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008872:	230a      	movs	r3, #10
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008876:	f107 0314 	add.w	r3, r7, #20
 800887a:	4619      	mov	r1, r3
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <HAL_HCD_MspInit+0xc0>)
 800887e:	f7f9 fd89 	bl	8002394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 8008888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888c:	6353      	str	r3, [r2, #52]	; 0x34
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	4a0b      	ldr	r2, [pc, #44]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 8008898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800889c:	6453      	str	r3, [r2, #68]	; 0x44
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <HAL_HCD_MspInit+0xbc>)
 80088a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	2043      	movs	r0, #67	; 0x43
 80088b0:	f7f9 fd39 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088b4:	2043      	movs	r0, #67	; 0x43
 80088b6:	f7f9 fd52 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088ba:	bf00      	nop
 80088bc:	3728      	adds	r7, #40	; 0x28
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40023800 	.word	0x40023800
 80088c8:	40020000 	.word	0x40020000

080088cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe ffed 	bl	80078ba <USBH_LL_IncTimer>
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f825 	bl	8007946 <USBH_LL_Connect>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff f82e 	bl	8007974 <USBH_LL_Disconnect>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
 800892c:	4613      	mov	r3, r2
 800892e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe ffdf 	bl	800790e <USBH_LL_PortEnabled>
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe ffdf 	bl	800792a <USBH_LL_PortDisabled>
}
 800896c:	bf00      	nop
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008982:	2b01      	cmp	r3, #1
 8008984:	d12a      	bne.n	80089dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <USBH_LL_Init+0x74>)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <USBH_LL_Init+0x74>)
 8008992:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <USBH_LL_Init+0x74>)
 8008998:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800899c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800899e:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <USBH_LL_Init+0x74>)
 80089a0:	2208      	movs	r2, #8
 80089a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089a4:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <USBH_LL_Init+0x74>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089aa:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <USBH_LL_Init+0x74>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <USBH_LL_Init+0x74>)
 80089b2:	2202      	movs	r2, #2
 80089b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089b6:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <USBH_LL_Init+0x74>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089bc:	480a      	ldr	r0, [pc, #40]	; (80089e8 <USBH_LL_Init+0x74>)
 80089be:	f7f9 feb6 	bl	800272e <HAL_HCD_Init>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089c8:	f7f8 fc7c 	bl	80012c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089cc:	4806      	ldr	r0, [pc, #24]	; (80089e8 <USBH_LL_Init+0x74>)
 80089ce:	f7fa fa9a 	bl	8002f06 <HAL_HCD_GetCurrentFrame>
 80089d2:	4603      	mov	r3, r0
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fe ff60 	bl	800789c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	200005d8 	.word	0x200005d8

080089ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fa fa09 	bl	8002e1a <HAL_HCD_Start>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f95c 	bl	8008ccc <USBH_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fa fa11 	bl	8002e60 <HAL_HCD_Stop>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 f941 	bl	8008ccc <USBH_Get_USB_Status>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fa fa59 	bl	8002f22 <HAL_HCD_GetCurrentSpeed>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d00c      	beq.n	8008a90 <USBH_LL_GetSpeed+0x38>
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d80d      	bhi.n	8008a96 <USBH_LL_GetSpeed+0x3e>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <USBH_LL_GetSpeed+0x2c>
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d003      	beq.n	8008a8a <USBH_LL_GetSpeed+0x32>
 8008a82:	e008      	b.n	8008a96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
    break;
 8008a88:	e008      	b.n	8008a9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8e:	e005      	b.n	8008a9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a90:	2302      	movs	r3, #2
 8008a92:	73fb      	strb	r3, [r7, #15]
    break;
 8008a94:	e002      	b.n	8008a9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a96:	2301      	movs	r3, #1
 8008a98:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9a:	bf00      	nop
  }
  return  speed;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fa f9ec 	bl	8002e9a <HAL_HCD_ResetPort>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f8ff 	bl	8008ccc <USBH_Get_USB_Status>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fa f9f3 	bl	8002ede <HAL_HCD_HC_GetXferCount>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b02:	b590      	push	{r4, r7, lr}
 8008b04:	b089      	sub	sp, #36	; 0x24
 8008b06:	af04      	add	r7, sp, #16
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4603      	mov	r3, r0
 8008b12:	70fb      	strb	r3, [r7, #3]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70bb      	strb	r3, [r7, #2]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b2a:	787c      	ldrb	r4, [r7, #1]
 8008b2c:	78ba      	ldrb	r2, [r7, #2]
 8008b2e:	78f9      	ldrb	r1, [r7, #3]
 8008b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b32:	9302      	str	r3, [sp, #8]
 8008b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4623      	mov	r3, r4
 8008b42:	f7f9 fe56 	bl	80027f2 <HAL_HCD_HC_Init>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f8bd 	bl	8008ccc <USBH_Get_USB_Status>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd90      	pop	{r4, r7, pc}

08008b60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f9 fec6 	bl	8002910 <HAL_HCD_HC_Halt>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f89e 	bl	8008ccc <USBH_Get_USB_Status>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b9e:	b590      	push	{r4, r7, lr}
 8008ba0:	b089      	sub	sp, #36	; 0x24
 8008ba2:	af04      	add	r7, sp, #16
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	461a      	mov	r2, r3
 8008bac:	4603      	mov	r3, r0
 8008bae:	70fb      	strb	r3, [r7, #3]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70bb      	strb	r3, [r7, #2]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bc6:	787c      	ldrb	r4, [r7, #1]
 8008bc8:	78ba      	ldrb	r2, [r7, #2]
 8008bca:	78f9      	ldrb	r1, [r7, #3]
 8008bcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	4623      	mov	r3, r4
 8008be2:	f7f9 feb9 	bl	8002958 <HAL_HCD_HC_SubmitRequest>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f86d 	bl	8008ccc <USBH_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd90      	pop	{r4, r7, pc}

08008c00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	4611      	mov	r1, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fa f94d 	bl	8002eb6 <HAL_HCD_HC_GetURBState>
 8008c1c:	4603      	mov	r3, r0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d103      	bne.n	8008c44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 f870 	bl	8008d24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c44:	20c8      	movs	r0, #200	; 0xc8
 8008c46:	f7f8 fde9 	bl	800181c <HAL_Delay>
  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
 8008c60:	4613      	mov	r3, r2
 8008c62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	212c      	movs	r1, #44	; 0x2c
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	333b      	adds	r3, #59	; 0x3b
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d009      	beq.n	8008c94 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	212c      	movs	r1, #44	; 0x2c
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3354      	adds	r3, #84	; 0x54
 8008c8e:	78ba      	ldrb	r2, [r7, #2]
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e008      	b.n	8008ca6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	212c      	movs	r1, #44	; 0x2c
 8008c9a:	fb01 f303 	mul.w	r3, r1, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3355      	adds	r3, #85	; 0x55
 8008ca2:	78ba      	ldrb	r2, [r7, #2]
 8008ca4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7f8 fdad 	bl	800181c <HAL_Delay>
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d817      	bhi.n	8008d10 <USBH_Get_USB_Status+0x44>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBH_Get_USB_Status+0x1c>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008cff 	.word	0x08008cff
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d0b 	.word	0x08008d0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e00b      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e008      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	e005      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0e:	e002      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d10:	2302      	movs	r3, #2
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	bf00      	nop
  }
  return usb_status;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
 8008d3c:	e001      	b.n	8008d42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	461a      	mov	r2, r3
 8008d46:	2101      	movs	r1, #1
 8008d48:	4803      	ldr	r0, [pc, #12]	; (8008d58 <MX_DriverVbusFS+0x34>)
 8008d4a:	f7f9 fcd7 	bl	80026fc <HAL_GPIO_WritePin>
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40020800 	.word	0x40020800

08008d5c <__errno>:
 8008d5c:	4b01      	ldr	r3, [pc, #4]	; (8008d64 <__errno+0x8>)
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	2000002c 	.word	0x2000002c

08008d68 <__libc_init_array>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4d0d      	ldr	r5, [pc, #52]	; (8008da0 <__libc_init_array+0x38>)
 8008d6c:	4c0d      	ldr	r4, [pc, #52]	; (8008da4 <__libc_init_array+0x3c>)
 8008d6e:	1b64      	subs	r4, r4, r5
 8008d70:	10a4      	asrs	r4, r4, #2
 8008d72:	2600      	movs	r6, #0
 8008d74:	42a6      	cmp	r6, r4
 8008d76:	d109      	bne.n	8008d8c <__libc_init_array+0x24>
 8008d78:	4d0b      	ldr	r5, [pc, #44]	; (8008da8 <__libc_init_array+0x40>)
 8008d7a:	4c0c      	ldr	r4, [pc, #48]	; (8008dac <__libc_init_array+0x44>)
 8008d7c:	f000 f92e 	bl	8008fdc <_init>
 8008d80:	1b64      	subs	r4, r4, r5
 8008d82:	10a4      	asrs	r4, r4, #2
 8008d84:	2600      	movs	r6, #0
 8008d86:	42a6      	cmp	r6, r4
 8008d88:	d105      	bne.n	8008d96 <__libc_init_array+0x2e>
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d90:	4798      	blx	r3
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7ee      	b.n	8008d74 <__libc_init_array+0xc>
 8008d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9a:	4798      	blx	r3
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	e7f2      	b.n	8008d86 <__libc_init_array+0x1e>
 8008da0:	08009018 	.word	0x08009018
 8008da4:	08009018 	.word	0x08009018
 8008da8:	08009018 	.word	0x08009018
 8008dac:	0800901c 	.word	0x0800901c

08008db0 <malloc>:
 8008db0:	4b02      	ldr	r3, [pc, #8]	; (8008dbc <malloc+0xc>)
 8008db2:	4601      	mov	r1, r0
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f000 b87f 	b.w	8008eb8 <_malloc_r>
 8008dba:	bf00      	nop
 8008dbc:	2000002c 	.word	0x2000002c

08008dc0 <free>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <free+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f000 b80b 	b.w	8008de0 <_free_r>
 8008dca:	bf00      	nop
 8008dcc:	2000002c 	.word	0x2000002c

08008dd0 <memset>:
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memset+0xa>
 8008dd8:	4770      	bx	lr
 8008dda:	f803 1b01 	strb.w	r1, [r3], #1
 8008dde:	e7f9      	b.n	8008dd4 <memset+0x4>

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f8e3 	bl	8008fc0 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f000 b8de 	b.w	8008fcc <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	4421      	add	r1, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	200008dc 	.word	0x200008dc

08008e78 <sbrk_aligned>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4e0e      	ldr	r6, [pc, #56]	; (8008eb4 <sbrk_aligned+0x3c>)
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6831      	ldr	r1, [r6, #0]
 8008e80:	4605      	mov	r5, r0
 8008e82:	b911      	cbnz	r1, 8008e8a <sbrk_aligned+0x12>
 8008e84:	f000 f88c 	bl	8008fa0 <_sbrk_r>
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 f887 	bl	8008fa0 <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <sbrk_aligned+0x34>
 8008e96:	1cc4      	adds	r4, r0, #3
 8008e98:	f024 0403 	bic.w	r4, r4, #3
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d007      	beq.n	8008eb0 <sbrk_aligned+0x38>
 8008ea0:	1a21      	subs	r1, r4, r0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f87c 	bl	8008fa0 <_sbrk_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d101      	bne.n	8008eb0 <sbrk_aligned+0x38>
 8008eac:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	200008e0 	.word	0x200008e0

08008eb8 <_malloc_r>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	1ccd      	adds	r5, r1, #3
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db01      	blt.n	8008ed4 <_malloc_r+0x1c>
 8008ed0:	42a9      	cmp	r1, r5
 8008ed2:	d905      	bls.n	8008ee0 <_malloc_r+0x28>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	2600      	movs	r6, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	4e2e      	ldr	r6, [pc, #184]	; (8008f9c <_malloc_r+0xe4>)
 8008ee2:	f000 f86d 	bl	8008fc0 <__malloc_lock>
 8008ee6:	6833      	ldr	r3, [r6, #0]
 8008ee8:	461c      	mov	r4, r3
 8008eea:	bb34      	cbnz	r4, 8008f3a <_malloc_r+0x82>
 8008eec:	4629      	mov	r1, r5
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f7ff ffc2 	bl	8008e78 <sbrk_aligned>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	d14d      	bne.n	8008f96 <_malloc_r+0xde>
 8008efa:	6834      	ldr	r4, [r6, #0]
 8008efc:	4626      	mov	r6, r4
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d140      	bne.n	8008f84 <_malloc_r+0xcc>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4631      	mov	r1, r6
 8008f06:	4638      	mov	r0, r7
 8008f08:	eb04 0803 	add.w	r8, r4, r3
 8008f0c:	f000 f848 	bl	8008fa0 <_sbrk_r>
 8008f10:	4580      	cmp	r8, r0
 8008f12:	d13a      	bne.n	8008f8a <_malloc_r+0xd2>
 8008f14:	6821      	ldr	r1, [r4, #0]
 8008f16:	3503      	adds	r5, #3
 8008f18:	1a6d      	subs	r5, r5, r1
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	4629      	mov	r1, r5
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <sbrk_aligned>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d02b      	beq.n	8008f8a <_malloc_r+0xd2>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	442b      	add	r3, r5
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	e00e      	b.n	8008f58 <_malloc_r+0xa0>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	1b52      	subs	r2, r2, r5
 8008f3e:	d41e      	bmi.n	8008f7e <_malloc_r+0xc6>
 8008f40:	2a0b      	cmp	r2, #11
 8008f42:	d916      	bls.n	8008f72 <_malloc_r+0xba>
 8008f44:	1961      	adds	r1, r4, r5
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6025      	str	r5, [r4, #0]
 8008f4a:	bf18      	it	ne
 8008f4c:	6059      	strne	r1, [r3, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	bf08      	it	eq
 8008f52:	6031      	streq	r1, [r6, #0]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f104 060b 	add.w	r6, r4, #11
 8008f5e:	f000 f835 	bl	8008fcc <__malloc_unlock>
 8008f62:	f026 0607 	bic.w	r6, r6, #7
 8008f66:	1d23      	adds	r3, r4, #4
 8008f68:	1af2      	subs	r2, r6, r3
 8008f6a:	d0b6      	beq.n	8008eda <_malloc_r+0x22>
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	e7b3      	b.n	8008eda <_malloc_r+0x22>
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	bf0c      	ite	eq
 8008f78:	6032      	streq	r2, [r6, #0]
 8008f7a:	605a      	strne	r2, [r3, #4]
 8008f7c:	e7ec      	b.n	8008f58 <_malloc_r+0xa0>
 8008f7e:	4623      	mov	r3, r4
 8008f80:	6864      	ldr	r4, [r4, #4]
 8008f82:	e7b2      	b.n	8008eea <_malloc_r+0x32>
 8008f84:	4634      	mov	r4, r6
 8008f86:	6876      	ldr	r6, [r6, #4]
 8008f88:	e7b9      	b.n	8008efe <_malloc_r+0x46>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f000 f81c 	bl	8008fcc <__malloc_unlock>
 8008f94:	e7a1      	b.n	8008eda <_malloc_r+0x22>
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	e7de      	b.n	8008f58 <_malloc_r+0xa0>
 8008f9a:	bf00      	nop
 8008f9c:	200008dc 	.word	0x200008dc

08008fa0 <_sbrk_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d06      	ldr	r5, [pc, #24]	; (8008fbc <_sbrk_r+0x1c>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	f7f8 fb52 	bl	8001654 <_sbrk>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_sbrk_r+0x1a>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_sbrk_r+0x1a>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	200008e4 	.word	0x200008e4

08008fc0 <__malloc_lock>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	; (8008fc8 <__malloc_lock+0x8>)
 8008fc2:	f000 b809 	b.w	8008fd8 <__retarget_lock_acquire_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	200008e8 	.word	0x200008e8

08008fcc <__malloc_unlock>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	; (8008fd4 <__malloc_unlock+0x8>)
 8008fce:	f000 b804 	b.w	8008fda <__retarget_lock_release_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	200008e8 	.word	0x200008e8

08008fd8 <__retarget_lock_acquire_recursive>:
 8008fd8:	4770      	bx	lr

08008fda <__retarget_lock_release_recursive>:
 8008fda:	4770      	bx	lr

08008fdc <_init>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	bf00      	nop
 8008fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe2:	bc08      	pop	{r3}
 8008fe4:	469e      	mov	lr, r3
 8008fe6:	4770      	bx	lr

08008fe8 <_fini>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr
