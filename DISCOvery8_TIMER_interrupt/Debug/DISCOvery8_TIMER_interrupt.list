
DISCOvery8_TIMER_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000864c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f0  080087f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087f8  080087f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087f8  080087f8  000187f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087fc  080087fc  000187fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008a0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000930  20000930  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aadb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c40  00000000  00000000  0003ab9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f0  00000000  00000000  0003fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cd  00000000  00000000  00041350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dbc7  00000000  00000000  0006591d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ba9  00000000  00000000  000834e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015708d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061a8  00000000  00000000  001570e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087bc 	.word	0x080087bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080087bc 	.word	0x080087bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d109      	bne.n	80004f2 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80004e4:	f001 f877 	bl	80015d6 <HAL_GPIO_TogglePin>
		count1 = HAL_GetTick();
 80004e8:	f000 fd7e 	bl	8000fe8 <HAL_GetTick>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80004f0:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM2){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004fa:	d109      	bne.n	8000510 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80004fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000502:	f001 f868 	bl	80015d6 <HAL_GPIO_TogglePin>
		count2 = HAL_GetTick();
 8000506:	f000 fd6f 	bl	8000fe8 <HAL_GetTick>
 800050a:	4603      	mov	r3, r0
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800050e:	6013      	str	r3, [r2, #0]
	}
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40010000 	.word	0x40010000
 800051c:	40020c00 	.word	0x40020c00
 8000520:	20000230 	.word	0x20000230
 8000524:	20000234 	.word	0x20000234

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fcf6 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f81c 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f9b8 	bl	80008a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000538:	f000 f882 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 800053c:	f000 f8ae 	bl	800069c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000540:	f000 f8dc 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000544:	f007 fcf2 	bl	8007f2c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000548:	f000 f90e 	bl	8000768 <MX_TIM1_Init>
  MX_TIM2_Init();
 800054c:	f000 f95e 	bl	800080c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x3c>)
 8000552:	f004 f8e5 	bl	8004720 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <main+0x40>)
 8000558:	f004 f8e2 	bl	8004720 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800055c:	f007 fd0c 	bl	8007f78 <MX_USB_HOST_Process>
 8000560:	e7fc      	b.n	800055c <main+0x34>
 8000562:	bf00      	nop
 8000564:	200001a0 	.word	0x200001a0
 8000568:	200001e8 	.word	0x200001e8

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 f818 	bl	80085b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f9f8 	bl	80039e8 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f000 fa51 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000614:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fc59 	bl	8003ed8 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 fa3a 	bl	8000aa4 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	; 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f002 fbcf 	bl	8002e20 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 fa0c 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000ac 	.word	0x200000ac
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <MX_I2S3_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <MX_I2S3_Init+0x5c>)
 80006c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006dc:	f002 fce4 	bl	80030a8 <HAL_I2S_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 f9dd 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000100 	.word	0x20000100
 80006f4:	40003c00 	.word	0x40003c00
 80006f8:	00017700 	.word	0x00017700

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f003 ff0f 	bl	8004570 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9a4 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000148 	.word	0x20000148
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_TIM1_Init+0x9c>)
 8000786:	4a20      	ldr	r2, [pc, #128]	; (8000808 <MX_TIM1_Init+0xa0>)
 8000788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20999;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0x9c>)
 800078c:	f245 2207 	movw	r2, #20999	; 0x5207
 8000790:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM1_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM1_Init+0x9c>)
 800079a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007b4:	f003 ff65 	bl	8004682 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007be:	f000 f971 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007d0:	f004 f91e 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 f963 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM1_Init+0x9c>)
 80007ec:	f004 fb3a 	bl	8004e64 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007f6:	f000 f955 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200001a0 	.word	0x200001a0
 8000808:	40010000 	.word	0x40010000

0800080c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM2_Init+0x98>)
 800082a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000832:	f245 2207 	movw	r2, #20999	; 0x5207
 8000836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_TIM2_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000840:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_TIM2_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000854:	f003 ff15 	bl	8004682 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800085e:	f000 f921 	bl	8000aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4619      	mov	r1, r3
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM2_Init+0x98>)
 8000870:	f004 f8ce 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800087a:	f000 f913 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_TIM2_Init+0x98>)
 800088c:	f004 faea 	bl	8004e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000896:	f000 f905 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001e8 	.word	0x200001e8

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b6b      	ldr	r3, [pc, #428]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a6a      	ldr	r2, [pc, #424]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b68      	ldr	r3, [pc, #416]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b64      	ldr	r3, [pc, #400]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a63      	ldr	r2, [pc, #396]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b61      	ldr	r3, [pc, #388]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a5c      	ldr	r2, [pc, #368]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a55      	ldr	r2, [pc, #340]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b53      	ldr	r3, [pc, #332]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b4f      	ldr	r3, [pc, #316]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a4e      	ldr	r2, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <MX_GPIO_Init+0x1e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	4849      	ldr	r0, [pc, #292]	; (8000a90 <MX_GPIO_Init+0x1e8>)
 800096c:	f000 fe1a 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	4847      	ldr	r0, [pc, #284]	; (8000a94 <MX_GPIO_Init+0x1ec>)
 8000976:	f000 fe15 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097a:	2200      	movs	r2, #0
 800097c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000980:	4845      	ldr	r0, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x1f0>)
 8000982:	f000 fe0f 	bl	80015a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	483c      	ldr	r0, [pc, #240]	; (8000a90 <MX_GPIO_Init+0x1e8>)
 800099e:	f000 fc65 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4836      	ldr	r0, [pc, #216]	; (8000a94 <MX_GPIO_Init+0x1ec>)
 80009ba:	f000 fc57 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009be:	2308      	movs	r3, #8
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	482e      	ldr	r0, [pc, #184]	; (8000a94 <MX_GPIO_Init+0x1ec>)
 80009da:	f000 fc47 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	482a      	ldr	r0, [pc, #168]	; (8000a9c <MX_GPIO_Init+0x1f4>)
 80009f4:	f000 fc3a 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f8:	2304      	movs	r3, #4
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x1f8>)
 8000a0c:	f000 fc2e 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a22:	2305      	movs	r3, #5
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <MX_GPIO_Init+0x1f8>)
 8000a2e:	f000 fc1d 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a32:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a36:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <MX_GPIO_Init+0x1f0>)
 8000a4c:	f000 fc0e 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_GPIO_Init+0x1f0>)
 8000a64:	f000 fc02 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0x1e8>)
 8000a7e:	f000 fbf5 	bl	800126c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	; 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aee:	2007      	movs	r0, #7
 8000af0:	f000 fb7a 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12c      	bne.n	8000b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f000 fb86 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_I2S_MspInit+0xf0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d15a      	bne.n	8000c76 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bc4:	23c0      	movs	r3, #192	; 0xc0
 8000bc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 fb8d 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bdc:	f7ff ff62 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c34:	2310      	movs	r3, #16
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c44:	2306      	movs	r3, #6
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <HAL_I2S_MspInit+0xf8>)
 8000c50:	f000 fb0c 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c66:	2306      	movs	r3, #6
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <HAL_I2S_MspInit+0xfc>)
 8000c72:	f000 fafb 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3738      	adds	r7, #56	; 0x38
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40003c00 	.word	0x40003c00
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020800 	.word	0x40020800

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_SPI_MspInit+0x84>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12b      	bne.n	8000d0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cea:	23e0      	movs	r3, #224	; 0xe0
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_SPI_MspInit+0x8c>)
 8000d06:	f000 fab1 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40013000 	.word	0x40013000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_TIM_Base_MspInit+0x80>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d116      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2019      	movs	r0, #25
 8000d54:	f000 fa53 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d58:	2019      	movs	r0, #25
 8000d5a:	f000 fa6c 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d5e:	e01a      	b.n	8000d96 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d68:	d115      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_TIM_Base_MspInit+0x84>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201c      	movs	r0, #28
 8000d8c:	f000 fa37 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d90:	201c      	movs	r0, #28
 8000d92:	f000 fa50 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40023800 	.word	0x40023800

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8e4 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e02:	f003 fcfd 	bl	8004800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001a0 	.word	0x200001a0

08000e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM2_IRQHandler+0x10>)
 8000e16:	f003 fcf3 	bl	8004800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001e8 	.word	0x200001e8

08000e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <OTG_FS_IRQHandler+0x10>)
 8000e2a:	f000 fe59 	bl	8001ae0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000061c 	.word	0x2000061c

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f007 fb68 	bl	800853c <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	20000238 	.word	0x20000238
 8000ea0:	20000930 	.word	0x20000930

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 fb27 	bl	8008548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fb15 	bl	8000528 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f0c:	08008800 	.word	0x08008800
  ldr r2, =_sbss
 8000f10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f14:	20000930 	.word	0x20000930

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f94f 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fdae 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f967 	bl	8001252 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f92f 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	2000023c 	.word	0x2000023c

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000023c 	.word	0x2000023c

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e16b      	b.n	8001560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 815a 	bne.w	800155a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80b4 	beq.w	800155a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_GPIO_Init+0x30c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_GPIO_Init+0x310>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_GPIO_Init+0x314>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a51      	ldr	r2, [pc, #324]	; (8001584 <HAL_GPIO_Init+0x318>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_GPIO_Init+0x31c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x320>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x324>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x328>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_GPIO_Init+0x330>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x20a>
 8001472:	2307      	movs	r3, #7
 8001474:	e00e      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001476:	2308      	movs	r3, #8
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147a:	2306      	movs	r3, #6
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <HAL_GPIO_Init+0x310>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x334>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f ae90 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e8:	887a      	ldrh	r2, [r7, #2]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	400b      	ands	r3, r1
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800160a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160c:	b08f      	sub	sp, #60	; 0x3c
 800160e:	af0a      	add	r7, sp, #40	; 0x28
 8001610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e054      	b.n	80016c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f006 fcd6 	bl	8007fe8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fd04 	bl	8005068 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	687e      	ldr	r6, [r7, #4]
 8001668:	466d      	mov	r5, sp
 800166a:	f106 0410 	add.w	r4, r6, #16
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800167a:	e885 0003 	stmia.w	r5, {r0, r1}
 800167e:	1d33      	adds	r3, r6, #4
 8001680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f003 fc7e 	bl	8004f84 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fcfb 	bl	800508a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	687e      	ldr	r6, [r7, #4]
 800169c:	466d      	mov	r5, sp
 800169e:	f106 0410 	add.w	r4, r6, #16
 80016a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80016b2:	1d33      	adds	r3, r6, #4
 80016b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b6:	6838      	ldr	r0, [r7, #0]
 80016b8:	f003 fe84 	bl	80053c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016ce:	b590      	push	{r4, r7, lr}
 80016d0:	b089      	sub	sp, #36	; 0x24
 80016d2:	af04      	add	r7, sp, #16
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	4608      	mov	r0, r1
 80016d8:	4611      	mov	r1, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	70fb      	strb	r3, [r7, #3]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70bb      	strb	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_HCD_HC_Init+0x28>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e076      	b.n	80017e4 <HAL_HCD_HC_Init+0x116>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	333d      	adds	r3, #61	; 0x3d
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3338      	adds	r3, #56	; 0x38
 800171e:	787a      	ldrb	r2, [r7, #1]
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3340      	adds	r3, #64	; 0x40
 8001730:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001732:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3339      	adds	r3, #57	; 0x39
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	333f      	adds	r3, #63	; 0x3f
 8001754:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001758:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	78ba      	ldrb	r2, [r7, #2]
 800175e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001762:	b2d0      	uxtb	r0, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	333a      	adds	r3, #58	; 0x3a
 8001770:	4602      	mov	r2, r0
 8001772:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001778:	2b00      	cmp	r3, #0
 800177a:	da09      	bge.n	8001790 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	333b      	adds	r3, #59	; 0x3b
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	e008      	b.n	80017a2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	333b      	adds	r3, #59	; 0x3b
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333c      	adds	r3, #60	; 0x3c
 80017b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	787c      	ldrb	r4, [r7, #1]
 80017bc:	78ba      	ldrb	r2, [r7, #2]
 80017be:	78f9      	ldrb	r1, [r7, #3]
 80017c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4623      	mov	r3, r4
 80017d2:	f003 ff7d 	bl	80056d0 <USB_HC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_HCD_HC_Halt+0x1e>
 8001806:	2302      	movs	r3, #2
 8001808:	e00f      	b.n	800182a <HAL_HCD_HC_Halt+0x3e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f004 f9cd 	bl	8005bba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	70fb      	strb	r3, [r7, #3]
 8001846:	460b      	mov	r3, r1
 8001848:	70bb      	strb	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	212c      	movs	r1, #44	; 0x2c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	333b      	adds	r3, #59	; 0x3b
 800185c:	78ba      	ldrb	r2, [r7, #2]
 800185e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	333f      	adds	r3, #63	; 0x3f
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001872:	7c3b      	ldrb	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	333d      	adds	r3, #61	; 0x3d
 8001898:	7f3a      	ldrb	r2, [r7, #28]
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e008      	b.n	80018b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3342      	adds	r3, #66	; 0x42
 80018ac:	2202      	movs	r2, #2
 80018ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	f200 80c6 	bhi.w	8001a44 <HAL_HCD_HC_SubmitRequest+0x210>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	08001a31 	.word	0x08001a31
 80018c8:	08001935 	.word	0x08001935
 80018cc:	080019b3 	.word	0x080019b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018d0:	7c3b      	ldrb	r3, [r7, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f040 80b8 	bne.w	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>
 80018d8:	78bb      	ldrb	r3, [r7, #2]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80b4 	bne.w	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018e0:	8b3b      	ldrh	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d108      	bne.n	80018f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3355      	adds	r3, #85	; 0x55
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3355      	adds	r3, #85	; 0x55
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800191e:	e093      	b.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e089      	b.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001934:	78bb      	ldrb	r3, [r7, #2]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11d      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3355      	adds	r3, #85	; 0x55
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001960:	e073      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3342      	adds	r3, #66	; 0x42
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e069      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3354      	adds	r3, #84	; 0x54
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3342      	adds	r3, #66	; 0x42
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
      break;
 800199c:	e055      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3342      	adds	r3, #66	; 0x42
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e04b      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019b2:	78bb      	ldrb	r3, [r7, #2]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d11d      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3355      	adds	r3, #85	; 0x55
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019de:	e034      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3342      	adds	r3, #66	; 0x42
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
      break;
 80019f2:	e02a      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3354      	adds	r3, #84	; 0x54
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	e016      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
      break;
 8001a2e:	e00c      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a44:	bf00      	nop
 8001a46:	e000      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a48:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3344      	adds	r3, #68	; 0x44
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	8b3a      	ldrh	r2, [r7, #24]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	202c      	movs	r0, #44	; 0x2c
 8001a64:	fb00 f303 	mul.w	r3, r0, r3
 8001a68:	440b      	add	r3, r1
 8001a6a:	334c      	adds	r3, #76	; 0x4c
 8001a6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3360      	adds	r3, #96	; 0x60
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3339      	adds	r3, #57	; 0x39
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3361      	adds	r3, #97	; 0x61
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	222c      	movs	r2, #44	; 0x2c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	3338      	adds	r3, #56	; 0x38
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	18d1      	adds	r1, r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f003 ff20 	bl	8005914 <USB_HC_StartXfer>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop

08001ae0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fc21 	bl	800533e <USB_GetMode>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f040 80f6 	bne.w	8001cf0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fc05 	bl	8005318 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80ec 	beq.w	8001cee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fbfc 	bl	8005318 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b2a:	d104      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fbec 	bl	8005318 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fbdc 	bl	8005318 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fbcc 	bl	8005318 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fbbe 	bl	8005318 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba6:	d11c      	bne.n	8001be2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	6938      	ldr	r0, [r7, #16]
 8001bc6:	f003 faad 	bl	8005124 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bca:	6938      	ldr	r0, [r7, #16]
 8001bcc:	f003 fade 	bl	800518c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fcb4 	bl	8005544 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f006 fa81 	bl	80080e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 fb96 	bl	8005318 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf6:	d102      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f001 f89e 	bl	8002d3a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fb88 	bl	8005318 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d106      	bne.n	8001c20 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f006 fa4a 	bl	80080ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fb77 	bl	8005318 <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d101      	bne.n	8001c38 <HAL_HCD_IRQHandler+0x158>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_HCD_IRQHandler+0x15a>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 ffa1 	bl	8002b96 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0210 	orr.w	r2, r2, #16
 8001c62:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fb55 	bl	8005318 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c78:	d13a      	bne.n	8001cf0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 ff8a 	bl	8005b98 <USB_HC_ReadInterrupt>
 8001c84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e025      	b.n	8001cd8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d018      	beq.n	8001cd2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cb6:	d106      	bne.n	8001cc6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8ab 	bl	8001e1a <HCD_HC_IN_IRQHandler>
 8001cc4:	e005      	b.n	8001cd2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fbf9 	bl	80024c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3d4      	bcc.n	8001c8c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	e000      	b.n	8001cf0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cee:	bf00      	nop
    }
  }
}
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_HCD_Start+0x16>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e013      	b.n	8001d34 <HAL_HCD_Start+0x3e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fc76 	bl	800560c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f98e 	bl	8005046 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_HCD_Stop+0x16>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e00d      	b.n	8001d6e <HAL_HCD_Stop+0x32>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 f864 	bl	8005e2c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fc18 	bl	80055b8 <USB_ResetPort>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	3360      	adds	r3, #96	; 0x60
 8001dac:	781b      	ldrb	r3, [r3, #0]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3350      	adds	r3, #80	; 0x50
 8001dd4:	681b      	ldr	r3, [r3, #0]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fc5c 	bl	80056ac <USB_GetCurrentFrame>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fc37 	bl	800567e <USB_GetHostSpeed>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d11a      	bne.n	8001e80 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	461a      	mov	r2, r3
 8001e58:	2304      	movs	r3, #4
 8001e5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	3361      	adds	r3, #97	; 0x61
 8001e6a:	2206      	movs	r2, #6
 8001e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fe9e 	bl	8005bba <USB_HC_Halt>
 8001e7e:	e0af      	b.n	8001fe0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e96:	d11b      	bne.n	8001ed0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	212c      	movs	r1, #44	; 0x2c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3361      	adds	r3, #97	; 0x61
 8001eba:	2207      	movs	r2, #7
 8001ebc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fe76 	bl	8005bba <USB_HC_Halt>
 8001ece:	e087      	b.n	8001fe0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d109      	bne.n	8001efa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	6093      	str	r3, [r2, #8]
 8001ef8:	e072      	b.n	8001fe0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d11a      	bne.n	8001f46 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2308      	movs	r3, #8
 8001f20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3361      	adds	r3, #97	; 0x61
 8001f30:	2205      	movs	r2, #5
 8001f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fe3b 	bl	8005bba <USB_HC_Halt>
 8001f44:	e04c      	b.n	8001fe0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d11b      	bne.n	8001f96 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3361      	adds	r3, #97	; 0x61
 8001f80:	2208      	movs	r2, #8
 8001f82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fe13 	bl	8005bba <USB_HC_Halt>
 8001f94:	e024      	b.n	8001fe0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d119      	bne.n	8001fe0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3361      	adds	r3, #97	; 0x61
 8001fcc:	2206      	movs	r2, #6
 8001fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fded 	bl	8005bba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff6:	d112      	bne.n	800201e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fdd9 	bl	8005bba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	461a      	mov	r2, r3
 8002016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800201c:	e24e      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 80df 	bne.w	80021f4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d019      	beq.n	8002072 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0159      	lsls	r1, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	440b      	add	r3, r1
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	202c      	movs	r0, #44	; 0x2c
 8002068:	fb00 f303 	mul.w	r3, r0, r3
 800206c:	440b      	add	r3, r1
 800206e:	3350      	adds	r3, #80	; 0x50
 8002070:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3361      	adds	r3, #97	; 0x61
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	335c      	adds	r3, #92	; 0x5c
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	461a      	mov	r2, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	333f      	adds	r3, #63	; 0x3f
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	333f      	adds	r3, #63	; 0x3f
 80020ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d111      	bne.n	80020f4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fd6d 	bl	8005bba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	461a      	mov	r2, r3
 80020ee:	2310      	movs	r3, #16
 80020f0:	6093      	str	r3, [r2, #8]
 80020f2:	e03a      	b.n	800216a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	333f      	adds	r3, #63	; 0x3f
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d009      	beq.n	800211c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	333f      	adds	r3, #63	; 0x3f
 8002116:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002118:	2b01      	cmp	r3, #1
 800211a:	d126      	bne.n	800216a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	0151      	lsls	r1, r2, #5
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	440a      	add	r2, r1
 8002132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800213a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3360      	adds	r3, #96	; 0x60
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	b2d9      	uxtb	r1, r3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	202c      	movs	r0, #44	; 0x2c
 8002158:	fb00 f303 	mul.w	r3, r0, r3
 800215c:	4413      	add	r3, r2
 800215e:	3360      	adds	r3, #96	; 0x60
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f005 ffcb 	bl	8008100 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d12b      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3348      	adds	r3, #72	; 0x48
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	202c      	movs	r0, #44	; 0x2c
 8002188:	fb00 f202 	mul.w	r2, r0, r2
 800218c:	440a      	add	r2, r1
 800218e:	3240      	adds	r2, #64	; 0x40
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	fbb3 f3f2 	udiv	r3, r3, r2
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 818e 	beq.w	80024bc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3354      	adds	r3, #84	; 0x54
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	f083 0301 	eor.w	r3, r3, #1
 80021b4:	b2d8      	uxtb	r0, r3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3354      	adds	r3, #84	; 0x54
 80021c4:	4602      	mov	r2, r0
 80021c6:	701a      	strb	r2, [r3, #0]
}
 80021c8:	e178      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3354      	adds	r3, #84	; 0x54
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f083 0301 	eor.w	r3, r3, #1
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3354      	adds	r3, #84	; 0x54
 80021ee:	4602      	mov	r2, r0
 80021f0:	701a      	strb	r2, [r3, #0]
}
 80021f2:	e163      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	f040 80f6 	bne.w	80023f8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3361      	adds	r3, #97	; 0x61
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d109      	bne.n	8002234 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3360      	adds	r3, #96	; 0x60
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e0c9      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3361      	adds	r3, #97	; 0x61
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d109      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	2205      	movs	r2, #5
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e0b5      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3361      	adds	r3, #97	; 0x61
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b06      	cmp	r3, #6
 800226e:	d009      	beq.n	8002284 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3361      	adds	r3, #97	; 0x61
 800227e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002280:	2b08      	cmp	r3, #8
 8002282:	d150      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	335c      	adds	r3, #92	; 0x5c
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	202c      	movs	r0, #44	; 0x2c
 800229c:	fb00 f303 	mul.w	r3, r0, r3
 80022a0:	440b      	add	r3, r1
 80022a2:	335c      	adds	r3, #92	; 0x5c
 80022a4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	335c      	adds	r3, #92	; 0x5c
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d912      	bls.n	80022e0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	335c      	adds	r3, #92	; 0x5c
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3360      	adds	r3, #96	; 0x60
 80022da:	2204      	movs	r2, #4
 80022dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022de:	e073      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3360      	adds	r3, #96	; 0x60
 80022ee:	2202      	movs	r2, #2
 80022f0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002308:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002310:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002324:	e050      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3361      	adds	r3, #97	; 0x61
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d122      	bne.n	8002380 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002362:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800236a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e023      	b.n	80023c8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3361      	adds	r3, #97	; 0x61
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b07      	cmp	r3, #7
 8002392:	d119      	bne.n	80023c8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	335c      	adds	r3, #92	; 0x5c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	202c      	movs	r0, #44	; 0x2c
 80023ac:	fb00 f303 	mul.w	r3, r0, r3
 80023b0:	440b      	add	r3, r1
 80023b2:	335c      	adds	r3, #92	; 0x5c
 80023b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3360      	adds	r3, #96	; 0x60
 80023c4:	2204      	movs	r2, #4
 80023c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	461a      	mov	r2, r3
 80023d6:	2302      	movs	r3, #2
 80023d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	b2d9      	uxtb	r1, r3
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	202c      	movs	r0, #44	; 0x2c
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3360      	adds	r3, #96	; 0x60
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f005 fe85 	bl	8008100 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023f6:	e061      	b.n	80024bc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b10      	cmp	r3, #16
 800240c:	d156      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	333f      	adds	r3, #63	; 0x3f
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d111      	bne.n	8002446 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	335c      	adds	r3, #92	; 0x5c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fbbb 	bl	8005bba <USB_HC_Halt>
 8002444:	e031      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	333f      	adds	r3, #63	; 0x3f
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	333f      	adds	r3, #63	; 0x3f
 8002468:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800246a:	2b02      	cmp	r3, #2
 800246c:	d11d      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d110      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3361      	adds	r3, #97	; 0x61
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 fb88 	bl	8005bba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2310      	movs	r3, #16
 80024ba:	6093      	str	r3, [r2, #8]
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d11a      	bne.n	800252a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	461a      	mov	r2, r3
 8002502:	2304      	movs	r3, #4
 8002504:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3361      	adds	r3, #97	; 0x61
 8002514:	2206      	movs	r2, #6
 8002516:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fb49 	bl	8005bba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002528:	e331      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d12e      	bne.n	800259e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	2320      	movs	r3, #32
 8002550:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	333d      	adds	r3, #61	; 0x3d
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 8313 	bne.w	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	333d      	adds	r3, #61	; 0x3d
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3360      	adds	r3, #96	; 0x60
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fb0f 	bl	8005bba <USB_HC_Halt>
}
 800259c:	e2f7      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d112      	bne.n	80025dc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 faf0 	bl	8005bba <USB_HC_Halt>
}
 80025da:	e2d8      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d140      	bne.n	8002674 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d111      	bne.n	800263e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	333d      	adds	r3, #61	; 0x3d
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	461a      	mov	r2, r3
 800263a:	2340      	movs	r3, #64	; 0x40
 800263c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	2301      	movs	r3, #1
 800264e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3361      	adds	r3, #97	; 0x61
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 faa4 	bl	8005bba <USB_HC_Halt>
}
 8002672:	e28c      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d12c      	bne.n	80026e4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3361      	adds	r3, #97	; 0x61
 8002698:	2204      	movs	r2, #4
 800269a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	333d      	adds	r3, #61	; 0x3d
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	335c      	adds	r3, #92	; 0x5c
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fa75 	bl	8005bba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	6093      	str	r3, [r2, #8]
}
 80026e2:	e254      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11a      	bne.n	8002730 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2308      	movs	r3, #8
 800270a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3361      	adds	r3, #97	; 0x61
 800271a:	2205      	movs	r2, #5
 800271c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fa46 	bl	8005bba <USB_HC_Halt>
}
 800272e:	e22e      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d140      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	335c      	adds	r3, #92	; 0x5c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3361      	adds	r3, #97	; 0x61
 8002766:	2203      	movs	r2, #3
 8002768:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333d      	adds	r3, #61	; 0x3d
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d112      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333c      	adds	r3, #60	; 0x3c
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d108      	bne.n	80027a4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333d      	adds	r3, #61	; 0x3d
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fa03 	bl	8005bba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2310      	movs	r3, #16
 80027c4:	6093      	str	r3, [r2, #8]
}
 80027c6:	e1e2      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d164      	bne.n	80028a8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d111      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3361      	adds	r3, #97	; 0x61
 80027f4:	2206      	movs	r2, #6
 80027f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f9d9 	bl	8005bba <USB_HC_Halt>
 8002808:	e044      	b.n	8002894 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	202c      	movs	r0, #44	; 0x2c
 8002822:	fb00 f303 	mul.w	r3, r0, r3
 8002826:	440b      	add	r3, r1
 8002828:	335c      	adds	r3, #92	; 0x5c
 800282a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	335c      	adds	r3, #92	; 0x5c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d920      	bls.n	8002882 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	335c      	adds	r3, #92	; 0x5c
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3360      	adds	r3, #96	; 0x60
 8002860:	2204      	movs	r2, #4
 8002862:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	202c      	movs	r0, #44	; 0x2c
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	4413      	add	r3, r2
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f005 fc40 	bl	8008100 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002880:	e008      	b.n	8002894 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	6093      	str	r3, [r2, #8]
}
 80028a6:	e172      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028be:	d11b      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3361      	adds	r3, #97	; 0x61
 80028ce:	2208      	movs	r2, #8
 80028d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f96c 	bl	8005bba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f4:	6093      	str	r3, [r2, #8]
}
 80028f6:	e14a      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	f040 813f 	bne.w	8002b8e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3361      	adds	r3, #97	; 0x61
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d17d      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	333f      	adds	r3, #63	; 0x3f
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d00a      	beq.n	8002960 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333f      	adds	r3, #63	; 0x3f
 8002958:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800295a:	2b03      	cmp	r3, #3
 800295c:	f040 8100 	bne.w	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d113      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3355      	adds	r3, #85	; 0x55
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	f083 0301 	eor.w	r3, r3, #1
 800297c:	b2d8      	uxtb	r0, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3355      	adds	r3, #85	; 0x55
 800298c:	4602      	mov	r2, r0
 800298e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b01      	cmp	r3, #1
 8002996:	f040 80e3 	bne.w	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	334c      	adds	r3, #76	; 0x4c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80d8 	beq.w	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	334c      	adds	r3, #76	; 0x4c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	202c      	movs	r0, #44	; 0x2c
 80029c6:	fb00 f202 	mul.w	r2, r0, r2
 80029ca:	440a      	add	r2, r1
 80029cc:	3240      	adds	r2, #64	; 0x40
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	202c      	movs	r0, #44	; 0x2c
 80029da:	fb00 f202 	mul.w	r2, r0, r2
 80029de:	440a      	add	r2, r1
 80029e0:	3240      	adds	r2, #64	; 0x40
 80029e2:	8812      	ldrh	r2, [r2, #0]
 80029e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80b5 	beq.w	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3355      	adds	r3, #85	; 0x55
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2d8      	uxtb	r0, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3355      	adds	r3, #85	; 0x55
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e09f      	b.n	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3361      	adds	r3, #97	; 0x61
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d109      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e08b      	b.n	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d109      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e077      	b.n	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d109      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3360      	adds	r3, #96	; 0x60
 8002a92:	2205      	movs	r2, #5
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e063      	b.n	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d009      	beq.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d14f      	bne.n	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	335c      	adds	r3, #92	; 0x5c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	440b      	add	r3, r1
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d912      	bls.n	8002b1c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	335c      	adds	r3, #92	; 0x5c
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	2204      	movs	r2, #4
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e021      	b.n	8002b60 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3360      	adds	r3, #96	; 0x60
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b44:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2302      	movs	r3, #2
 8002b70:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	b2d9      	uxtb	r1, r3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	202c      	movs	r0, #44	; 0x2c
 8002b7c:	fb00 f303 	mul.w	r3, r0, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3360      	adds	r3, #96	; 0x60
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f005 fab9 	bl	8008100 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b8e:	bf00      	nop
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b08a      	sub	sp, #40	; 0x28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	0c5b      	lsrs	r3, r3, #17
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d004      	beq.n	8002bdc <HCD_RXQLVL_IRQHandler+0x46>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	f000 80a9 	beq.w	8002d2c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bda:	e0aa      	b.n	8002d32 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80a6 	beq.w	8002d30 <HCD_RXQLVL_IRQHandler+0x19a>
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3344      	adds	r3, #68	; 0x44
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 809b 	beq.w	8002d30 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3350      	adds	r3, #80	; 0x50
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	441a      	add	r2, r3
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	440b      	add	r3, r1
 8002c1a:	334c      	adds	r3, #76	; 0x4c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d87a      	bhi.n	8002d18 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3344      	adds	r3, #68	; 0x44
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f002 fb14 	bl	8005268 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3344      	adds	r3, #68	; 0x44
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	441a      	add	r2, r3
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	202c      	movs	r0, #44	; 0x2c
 8002c5a:	fb00 f303 	mul.w	r3, r0, r3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3350      	adds	r3, #80	; 0x50
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	441a      	add	r2, r3
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	202c      	movs	r0, #44	; 0x2c
 8002c7e:	fb00 f303 	mul.w	r3, r0, r3
 8002c82:	440b      	add	r3, r1
 8002c84:	3350      	adds	r3, #80	; 0x50
 8002c86:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	0cdb      	lsrs	r3, r3, #19
 8002c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c9c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3340      	adds	r3, #64	; 0x40
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d13c      	bne.n	8002d30 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d039      	beq.n	8002d30 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3354      	adds	r3, #84	; 0x54
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2d8      	uxtb	r0, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3354      	adds	r3, #84	; 0x54
 8002d12:	4602      	mov	r2, r0
 8002d14:	701a      	strb	r2, [r3, #0]
      break;
 8002d16:	e00b      	b.n	8002d30 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2204      	movs	r2, #4
 8002d28:	701a      	strb	r2, [r3, #0]
      break;
 8002d2a:	e001      	b.n	8002d30 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d30:	bf00      	nop
  }
}
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d66:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d10b      	bne.n	8002d8a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f005 f9a3 	bl	80080c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d132      	bne.n	8002dfa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d126      	bne.n	8002df4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d113      	bne.n	8002dd6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db8:	d106      	bne.n	8002dc8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fbbf 	bl	8005544 <USB_InitFSLSPClkSel>
 8002dc6:	e011      	b.n	8002dec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 fbb8 	bl	8005544 <USB_InitFSLSPClkSel>
 8002dd4:	e00a      	b.n	8002dec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d106      	bne.n	8002dec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de4:	461a      	mov	r2, r3
 8002de6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f005 f995 	bl	800811c <HAL_HCD_PortEnabled_Callback>
 8002df2:	e002      	b.n	8002dfa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 f99f 	bl	8008138 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d103      	bne.n	8002e0c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f043 0320 	orr.w	r3, r3, #32
 8002e0a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e12b      	b.n	800308a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fe5a 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e84:	f001 fa20 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8002e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a81      	ldr	r2, [pc, #516]	; (8003094 <HAL_I2C_Init+0x274>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d807      	bhi.n	8002ea4 <HAL_I2C_Init+0x84>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a80      	ldr	r2, [pc, #512]	; (8003098 <HAL_I2C_Init+0x278>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	bf94      	ite	ls
 8002e9c:	2301      	movls	r3, #1
 8002e9e:	2300      	movhi	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e006      	b.n	8002eb2 <HAL_I2C_Init+0x92>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a7d      	ldr	r2, [pc, #500]	; (800309c <HAL_I2C_Init+0x27c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bf94      	ite	ls
 8002eac:	2301      	movls	r3, #1
 8002eae:	2300      	movhi	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0e7      	b.n	800308a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a78      	ldr	r2, [pc, #480]	; (80030a0 <HAL_I2C_Init+0x280>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	0c9b      	lsrs	r3, r3, #18
 8002ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_I2C_Init+0x274>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d802      	bhi.n	8002ef4 <HAL_I2C_Init+0xd4>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	e009      	b.n	8002f08 <HAL_I2C_Init+0xe8>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	4a69      	ldr	r2, [pc, #420]	; (80030a4 <HAL_I2C_Init+0x284>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	3301      	adds	r3, #1
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	495c      	ldr	r1, [pc, #368]	; (8003094 <HAL_I2C_Init+0x274>)
 8002f24:	428b      	cmp	r3, r1
 8002f26:	d819      	bhi.n	8002f5c <HAL_I2C_Init+0x13c>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1e59      	subs	r1, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f36:	1c59      	adds	r1, r3, #1
 8002f38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_I2C_Init+0x138>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1e59      	subs	r1, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f56:	e051      	b.n	8002ffc <HAL_I2C_Init+0x1dc>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	e04f      	b.n	8002ffc <HAL_I2C_Init+0x1dc>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d111      	bne.n	8002f88 <HAL_I2C_Init+0x168>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	440b      	add	r3, r1
 8002f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e012      	b.n	8002fae <HAL_I2C_Init+0x18e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Init+0x196>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e022      	b.n	8002ffc <HAL_I2C_Init+0x1dc>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10e      	bne.n	8002fdc <HAL_I2C_Init+0x1bc>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1e58      	subs	r0, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	440b      	add	r3, r1
 8002fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fda:	e00f      	b.n	8002ffc <HAL_I2C_Init+0x1dc>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	0099      	lsls	r1, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	6809      	ldr	r1, [r1, #0]
 8003000:	4313      	orrs	r3, r2
 8003002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800302a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6911      	ldr	r1, [r2, #16]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	430b      	orrs	r3, r1
 800303e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	000186a0 	.word	0x000186a0
 8003098:	001e847f 	.word	0x001e847f
 800309c:	003d08ff 	.word	0x003d08ff
 80030a0:	431bde83 	.word	0x431bde83
 80030a4:	10624dd3 	.word	0x10624dd3

080030a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e128      	b.n	800330c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a90      	ldr	r2, [pc, #576]	; (8003314 <HAL_I2S_Init+0x26c>)
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fd fd5b 	bl	8000b90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2202      	movs	r2, #2
 80030fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d060      	beq.n	80031c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800310e:	2310      	movs	r3, #16
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e001      	b.n	8003118 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b20      	cmp	r3, #32
 800311e:	d802      	bhi.n	8003126 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003126:	2001      	movs	r0, #1
 8003128:	f001 f9c4 	bl	80044b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800312c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003136:	d125      	bne.n	8003184 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	fbb2 f2f3 	udiv	r2, r2, r3
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	3305      	adds	r3, #5
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	e01f      	b.n	80031a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	fbb2 f2f3 	udiv	r2, r2, r3
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	3305      	adds	r3, #5
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	e00e      	b.n	80031a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	3305      	adds	r3, #5
 80031a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4a5c      	ldr	r2, [pc, #368]	; (8003318 <HAL_I2S_Init+0x270>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	e003      	b.n	80031d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031c8:	2302      	movs	r3, #2
 80031ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d902      	bls.n	80031dc <HAL_I2S_Init+0x134>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2bff      	cmp	r3, #255	; 0xff
 80031da:	d907      	bls.n	80031ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f043 0210 	orr.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e08f      	b.n	800330c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	ea42 0103 	orr.w	r1, r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800320a:	f023 030f 	bic.w	r3, r3, #15
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6851      	ldr	r1, [r2, #4]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6892      	ldr	r2, [r2, #8]
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68d2      	ldr	r2, [r2, #12]
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6992      	ldr	r2, [r2, #24]
 8003222:	430a      	orrs	r2, r1
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d161      	bne.n	80032fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a38      	ldr	r2, [pc, #224]	; (800331c <HAL_I2S_Init+0x274>)
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_I2S_Init+0x278>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_I2S_Init+0x1a4>
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_I2S_Init+0x27c>)
 800324a:	e001      	b.n	8003250 <HAL_I2S_Init+0x1a8>
 800324c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4932      	ldr	r1, [pc, #200]	; (8003320 <HAL_I2S_Init+0x278>)
 8003258:	428a      	cmp	r2, r1
 800325a:	d101      	bne.n	8003260 <HAL_I2S_Init+0x1b8>
 800325c:	4a31      	ldr	r2, [pc, #196]	; (8003324 <HAL_I2S_Init+0x27c>)
 800325e:	e001      	b.n	8003264 <HAL_I2S_Init+0x1bc>
 8003260:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003264:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003268:	f023 030f 	bic.w	r3, r3, #15
 800326c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <HAL_I2S_Init+0x278>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_I2S_Init+0x1d4>
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_I2S_Init+0x27c>)
 800327a:	e001      	b.n	8003280 <HAL_I2S_Init+0x1d8>
 800327c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003280:	2202      	movs	r2, #2
 8003282:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_I2S_Init+0x278>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_I2S_Init+0x1ea>
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <HAL_I2S_Init+0x27c>)
 8003290:	e001      	b.n	8003296 <HAL_I2S_Init+0x1ee>
 8003292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a2:	d003      	beq.n	80032ac <HAL_I2S_Init+0x204>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	e001      	b.n	80032b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032d6:	4313      	orrs	r3, r2
 80032d8:	b29a      	uxth	r2, r3
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_I2S_Init+0x278>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <HAL_I2S_Init+0x24c>
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_I2S_Init+0x27c>)
 80032f2:	e001      	b.n	80032f8 <HAL_I2S_Init+0x250>
 80032f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f8:	897a      	ldrh	r2, [r7, #10]
 80032fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0800341f 	.word	0x0800341f
 8003318:	cccccccd 	.word	0xcccccccd
 800331c:	08003535 	.word	0x08003535
 8003320:	40003800 	.word	0x40003800
 8003324:	40003400 	.word	0x40003400

08003328 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c9a      	adds	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10e      	bne.n	80033b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffb8 	bl	8003328 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	b292      	uxth	r2, r2
 80033d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	1c9a      	adds	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10e      	bne.n	8003416 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003406:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ff93 	bl	800333c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b04      	cmp	r3, #4
 8003438:	d13a      	bne.n	80034b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d109      	bne.n	8003458 <I2S_IRQHandler+0x3a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d102      	bne.n	8003458 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffb4 	bl	80033c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d126      	bne.n	80034b0 <I2S_IRQHandler+0x92>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b20      	cmp	r3, #32
 800346e:	d11f      	bne.n	80034b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800347e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f043 0202 	orr.w	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff50 	bl	8003350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d136      	bne.n	800352a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d109      	bne.n	80034da <I2S_IRQHandler+0xbc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d102      	bne.n	80034da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff45 	bl	8003364 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d122      	bne.n	800352a <I2S_IRQHandler+0x10c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d11b      	bne.n	800352a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003500:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff13 	bl	8003350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a92      	ldr	r2, [pc, #584]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800354e:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003550:	e001      	b.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8b      	ldr	r2, [pc, #556]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800356c:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800356e:	e001      	b.n	8003574 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003570:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d004      	beq.n	800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 8099 	bne.w	80036be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d107      	bne.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f925 	bl	80037f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9c8 	bl	8003950 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d13a      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d035      	beq.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035de:	4b6e      	ldr	r3, [pc, #440]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e0:	e001      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4969      	ldr	r1, [pc, #420]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ee:	428b      	cmp	r3, r1
 80035f0:	d101      	bne.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035f2:	4b69      	ldr	r3, [pc, #420]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f4:	e001      	b.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800360e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fe88 	bl	8003350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b08      	cmp	r3, #8
 8003648:	f040 80c3 	bne.w	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80bd 	beq.w	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003666:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a49      	ldr	r2, [pc, #292]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003674:	e001      	b.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4944      	ldr	r1, [pc, #272]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003682:	428b      	cmp	r3, r1
 8003684:	d101      	bne.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003686:	4b44      	ldr	r3, [pc, #272]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003688:	e001      	b.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800368a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003692:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0204 	orr.w	r2, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fe4a 	bl	8003350 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036bc:	e089      	b.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d107      	bne.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8be 	bl	8003854 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8fd 	bl	80038ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d12f      	bne.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02a      	beq.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003714:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003722:	e001      	b.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4919      	ldr	r1, [pc, #100]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d101      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003736:	e001      	b.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003740:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fdfa 	bl	8003350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	d136      	bne.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d031      	beq.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a07      	ldr	r2, [pc, #28]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800377c:	e001      	b.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800377e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4902      	ldr	r1, [pc, #8]	; (8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800378a:	428b      	cmp	r3, r1
 800378c:	d106      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800378e:	4b02      	ldr	r3, [pc, #8]	; (8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003790:	e006      	b.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003792:	bf00      	nop
 8003794:	40003800 	.word	0x40003800
 8003798:	40003400 	.word	0x40003400
 800379c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fdc0 	bl	8003350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d0:	e000      	b.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d2:	bf00      	nop
}
 80037d4:	bf00      	nop
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c99      	adds	r1, r3, #2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6251      	str	r1, [r2, #36]	; 0x24
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003830:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ffc9 	bl	80037dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c99      	adds	r1, r3, #2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6251      	str	r1, [r2, #36]	; 0x24
 8003866:	8819      	ldrh	r1, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <I2SEx_TxISR_I2SExt+0x90>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <I2SEx_TxISR_I2SExt+0x22>
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <I2SEx_TxISR_I2SExt+0x94>)
 8003874:	e001      	b.n	800387a <I2SEx_TxISR_I2SExt+0x26>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	460a      	mov	r2, r1
 800387c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d121      	bne.n	80038da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <I2SEx_TxISR_I2SExt+0x90>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <I2SEx_TxISR_I2SExt+0x50>
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <I2SEx_TxISR_I2SExt+0x94>)
 80038a2:	e001      	b.n	80038a8 <I2SEx_TxISR_I2SExt+0x54>
 80038a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	490d      	ldr	r1, [pc, #52]	; (80038e4 <I2SEx_TxISR_I2SExt+0x90>)
 80038b0:	428b      	cmp	r3, r1
 80038b2:	d101      	bne.n	80038b8 <I2SEx_TxISR_I2SExt+0x64>
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <I2SEx_TxISR_I2SExt+0x94>)
 80038b6:	e001      	b.n	80038bc <I2SEx_TxISR_I2SExt+0x68>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff81 	bl	80037dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40003800 	.word	0x40003800
 80038e8:	40003400 	.word	0x40003400

080038ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68d8      	ldr	r0, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	1c99      	adds	r1, r3, #2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003904:	b282      	uxth	r2, r0
 8003906:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d113      	bne.n	8003948 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff4a 	bl	80037dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <I2SEx_RxISR_I2SExt+0x90>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <I2SEx_RxISR_I2SExt+0x16>
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <I2SEx_RxISR_I2SExt+0x94>)
 8003964:	e001      	b.n	800396a <I2SEx_RxISR_I2SExt+0x1a>
 8003966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396a:	68d8      	ldr	r0, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	1c99      	adds	r1, r3, #2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003976:	b282      	uxth	r2, r0
 8003978:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <I2SEx_RxISR_I2SExt+0x90>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <I2SEx_RxISR_I2SExt+0x50>
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <I2SEx_RxISR_I2SExt+0x94>)
 800399e:	e001      	b.n	80039a4 <I2SEx_RxISR_I2SExt+0x54>
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	490d      	ldr	r1, [pc, #52]	; (80039e0 <I2SEx_RxISR_I2SExt+0x90>)
 80039ac:	428b      	cmp	r3, r1
 80039ae:	d101      	bne.n	80039b4 <I2SEx_RxISR_I2SExt+0x64>
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <I2SEx_RxISR_I2SExt+0x94>)
 80039b2:	e001      	b.n	80039b8 <I2SEx_RxISR_I2SExt+0x68>
 80039b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff03 	bl	80037dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40003800 	.word	0x40003800
 80039e4:	40003400 	.word	0x40003400

080039e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e267      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d075      	beq.n	8003af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a06:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d00c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a12:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d112      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1e:	4b82      	ldr	r3, [pc, #520]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2a:	d10b      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05b      	beq.n	8003af0 <HAL_RCC_OscConfig+0x108>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d157      	bne.n	8003af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e242      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_OscConfig+0x74>
 8003a4e:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a75      	ldr	r2, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e01d      	b.n	8003a98 <HAL_RCC_OscConfig+0xb0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x98>
 8003a66:	4b70      	ldr	r3, [pc, #448]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6f      	ldr	r2, [pc, #444]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6c      	ldr	r2, [pc, #432]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0xb0>
 8003a80:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd faa2 	bl	8000fe8 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fd fa9e 	bl	8000fe8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e207      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xc0>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fa8e 	bl	8000fe8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fa8a 	bl	8000fe8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e1f3      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0xe8>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d063      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afe:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d11c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b16:	4b44      	ldr	r3, [pc, #272]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d116      	bne.n	8003b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_RCC_OscConfig+0x152>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e1c7      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4937      	ldr	r1, [pc, #220]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4e:	e03a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b58:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_RCC_OscConfig+0x244>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fa43 	bl	8000fe8 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b66:	f7fd fa3f 	bl	8000fe8 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1a8      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4925      	ldr	r1, [pc, #148]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]
 8003b98:	e015      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCC_OscConfig+0x244>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fa22 	bl	8000fe8 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba8:	f7fd fa1e 	bl	8000fe8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e187      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d036      	beq.n	8003c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x248>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fa02 	bl	8000fe8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be8:	f7fd f9fe 	bl	8000fe8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e167      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x200>
 8003c06:	e01b      	b.n	8003c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_OscConfig+0x248>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd f9eb 	bl	8000fe8 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c14:	e00e      	b.n	8003c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c16:	f7fd f9e7 	bl	8000fe8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d907      	bls.n	8003c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e150      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470000 	.word	0x42470000
 8003c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ea      	bne.n	8003c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8097 	beq.w	8003d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b7d      	ldr	r3, [pc, #500]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a7c      	ldr	r2, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b7a      	ldr	r3, [pc, #488]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4b77      	ldr	r3, [pc, #476]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d118      	bne.n	8003cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4b74      	ldr	r3, [pc, #464]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a73      	ldr	r2, [pc, #460]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fd f9a7 	bl	8000fe8 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7fd f9a3 	bl	8000fe8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e10c      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x474>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2ea>
 8003cc4:	4b64      	ldr	r3, [pc, #400]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	e01c      	b.n	8003d0c <HAL_RCC_OscConfig+0x324>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x30c>
 8003cda:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a5e      	ldr	r2, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0x324>
 8003cf4:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a54      	ldr	r2, [pc, #336]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d06:	f023 0304 	bic.w	r3, r3, #4
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d015      	beq.n	8003d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fd f968 	bl	8000fe8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7fd f964 	bl	8000fe8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0cb      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d32:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ee      	beq.n	8003d1c <HAL_RCC_OscConfig+0x334>
 8003d3e:	e014      	b.n	8003d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7fd f952 	bl	8000fe8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7fd f94e 	bl	8000fe8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e0b5      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ee      	bne.n	8003d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a1 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d86:	4b34      	ldr	r3, [pc, #208]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d05c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d141      	bne.n	8003e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_OscConfig+0x478>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fd f922 	bl	8000fe8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fd f91e 	bl	8000fe8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e087      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	491b      	ldr	r1, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_OscConfig+0x478>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fd f8f7 	bl	8000fe8 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fd f8f3 	bl	8000fe8 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e05c      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x416>
 8003e1c:	e054      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCC_OscConfig+0x478>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fd f8e0 	bl	8000fe8 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fd f8dc 	bl	8000fe8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e045      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_OscConfig+0x470>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x444>
 8003e4a:	e03d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e038      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x4ec>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d028      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d121      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d11a      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0cc      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b68      	ldr	r3, [pc, #416]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d90c      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d044      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d119      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e06f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e067      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4934      	ldr	r1, [pc, #208]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fd f80e 	bl	8000fe8 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fd f80a 	bl	8000fe8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e04f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 020c 	and.w	r2, r3, #12
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d20c      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e032      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405e:	f000 f821 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004062:	4602      	mov	r2, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	490a      	ldr	r1, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	5ccb      	ldrb	r3, [r1, r3]
 8004072:	fa22 f303 	lsr.w	r3, r2, r3
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc ff6e 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00
 8004094:	40023800 	.word	0x40023800
 8004098:	080087d8 	.word	0x080087d8
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a8:	b094      	sub	sp, #80	; 0x50
 80040aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
 80040b0:	2300      	movs	r3, #0
 80040b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b4:	2300      	movs	r3, #0
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040bc:	4b79      	ldr	r3, [pc, #484]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d00d      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x40>
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	f200 80e1 	bhi.w	8004290 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x34>
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d003      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x3a>
 80040d6:	e0db      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d8:	4b73      	ldr	r3, [pc, #460]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040dc:	e0db      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040de:	4b73      	ldr	r3, [pc, #460]	; (80042ac <HAL_RCC_GetSysClockFreq+0x208>)
 80040e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e2:	e0d8      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e4:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ee:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d063      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fa:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	099b      	lsrs	r3, r3, #6
 8004100:	2200      	movs	r2, #0
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38
 8004104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410c:	633b      	str	r3, [r7, #48]	; 0x30
 800410e:	2300      	movs	r3, #0
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
 8004112:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	f04f 0000 	mov.w	r0, #0
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	0159      	lsls	r1, r3, #5
 8004124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004128:	0150      	lsls	r0, r2, #5
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4621      	mov	r1, r4
 8004130:	1a51      	subs	r1, r2, r1
 8004132:	6139      	str	r1, [r7, #16]
 8004134:	4629      	mov	r1, r5
 8004136:	eb63 0301 	sbc.w	r3, r3, r1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004148:	4659      	mov	r1, fp
 800414a:	018b      	lsls	r3, r1, #6
 800414c:	4651      	mov	r1, sl
 800414e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004152:	4651      	mov	r1, sl
 8004154:	018a      	lsls	r2, r1, #6
 8004156:	4651      	mov	r1, sl
 8004158:	ebb2 0801 	subs.w	r8, r2, r1
 800415c:	4659      	mov	r1, fp
 800415e:	eb63 0901 	sbc.w	r9, r3, r1
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004176:	4690      	mov	r8, r2
 8004178:	4699      	mov	r9, r3
 800417a:	4623      	mov	r3, r4
 800417c:	eb18 0303 	adds.w	r3, r8, r3
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	462b      	mov	r3, r5
 8004184:	eb49 0303 	adc.w	r3, r9, r3
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004196:	4629      	mov	r1, r5
 8004198:	024b      	lsls	r3, r1, #9
 800419a:	4621      	mov	r1, r4
 800419c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a0:	4621      	mov	r1, r4
 80041a2:	024a      	lsls	r2, r1, #9
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041aa:	2200      	movs	r2, #0
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041b4:	f7fc f808 	bl	80001c8 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c0:	e058      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	2200      	movs	r2, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	4611      	mov	r1, r2
 80041ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	f04f 0000 	mov.w	r0, #0
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	0159      	lsls	r1, r3, #5
 80041ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ee:	0150      	lsls	r0, r2, #5
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4641      	mov	r1, r8
 80041f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041fa:	4649      	mov	r1, r9
 80041fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800420c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004210:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004214:	ebb2 040a 	subs.w	r4, r2, sl
 8004218:	eb63 050b 	sbc.w	r5, r3, fp
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	00eb      	lsls	r3, r5, #3
 8004226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422a:	00e2      	lsls	r2, r4, #3
 800422c:	4614      	mov	r4, r2
 800422e:	461d      	mov	r5, r3
 8004230:	4643      	mov	r3, r8
 8004232:	18e3      	adds	r3, r4, r3
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	464b      	mov	r3, r9
 8004238:	eb45 0303 	adc.w	r3, r5, r3
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424a:	4629      	mov	r1, r5
 800424c:	028b      	lsls	r3, r1, #10
 800424e:	4621      	mov	r1, r4
 8004250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004254:	4621      	mov	r1, r4
 8004256:	028a      	lsls	r2, r1, #10
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425e:	2200      	movs	r2, #0
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	61fa      	str	r2, [r7, #28]
 8004264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004268:	f7fb ffae 	bl	80001c8 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4613      	mov	r3, r2
 8004272:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	3301      	adds	r3, #1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004298:	4618      	mov	r0, r3
 800429a:	3750      	adds	r7, #80	; 0x50
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	007a1200 	.word	0x007a1200

080042b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000000 	.word	0x20000000

080042c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042cc:	f7ff fff0 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	080087e8 	.word	0x080087e8

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004314:	2b00      	cmp	r3, #0
 8004316:	d035      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004318:	4b62      	ldr	r3, [pc, #392]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800431e:	f7fc fe63 	bl	8000fe8 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004326:	f7fc fe5f 	bl	8000fe8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0b0      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004338:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	019a      	lsls	r2, r3, #6
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	071b      	lsls	r3, r3, #28
 8004350:	4955      	ldr	r1, [pc, #340]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004358:	4b52      	ldr	r3, [pc, #328]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800435e:	f7fc fe43 	bl	8000fe8 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004366:	f7fc fe3f 	bl	8000fe8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e090      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004378:	4b4b      	ldr	r3, [pc, #300]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8083 	beq.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	4b44      	ldr	r3, [pc, #272]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	4a43      	ldr	r2, [pc, #268]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3e      	ldr	r2, [pc, #248]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ba:	f7fc fe15 	bl	8000fe8 <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fc fe11 	bl	8000fe8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e062      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d4:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02f      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d028      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440e:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004414:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800441a:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d114      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004426:	f7fc fddf 	bl	8000fe8 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	e00a      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fc fddb 	bl	8000fe8 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e02a      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ee      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445c:	d10d      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	490d      	ldr	r1, [pc, #52]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
 8004478:	e005      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004480:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004484:	6093      	str	r3, [r2, #8]
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004492:	4905      	ldr	r1, [pc, #20]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	4313      	orrs	r3, r2
 8004496:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	42470068 	.word	0x42470068
 80044a8:	40023800 	.word	0x40023800
 80044ac:	40007000 	.word	0x40007000
 80044b0:	42470e40 	.word	0x42470e40

080044b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d13e      	bne.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d12f      	bne.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ea:	617b      	str	r3, [r7, #20]
          break;
 80044ec:	e02f      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fa:	d108      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004504:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e007      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	0f1b      	lsrs	r3, r3, #28
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
          break;
 8004546:	e002      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
          break;
 800454c:	bf00      	nop
        }
      }
      break;
 800454e:	bf00      	nop
    }
  }
  return frequency;
 8004550:	697b      	ldr	r3, [r7, #20]
}
 8004552:	4618      	mov	r0, r3
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	00bb8000 	.word	0x00bb8000
 8004568:	007a1200 	.word	0x007a1200
 800456c:	00f42400 	.word	0x00f42400

08004570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07b      	b.n	800467a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d009      	beq.n	80045a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
 800459a:	e005      	b.n	80045a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fb64 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0104 	and.w	r1, r3, #4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 0210 	and.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e041      	b.n	8004718 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fc fb39 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 fa95 	bl	8004bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d001      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e04e      	b.n	80047d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d022      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004762:	d01d      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_TIM_Base_Start_IT+0xdc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d111      	bne.n	80047c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d010      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	e007      	b.n	80047d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40010400 	.word	0x40010400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40001800 	.word	0x40001800

08004800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0202 	mvn.w	r2, #2
 800482c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9b5 	bl	8004bb2 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9a7 	bl	8004b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f9b8 	bl	8004bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0204 	mvn.w	r2, #4
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f98b 	bl	8004bb2 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f97d 	bl	8004b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f98e 	bl	8004bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0208 	mvn.w	r2, #8
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f961 	bl	8004bb2 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f953 	bl	8004b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f964 	bl	8004bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0210 	mvn.w	r2, #16
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2208      	movs	r2, #8
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f937 	bl	8004bb2 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f929 	bl	8004b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f93a 	bl	8004bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10e      	bne.n	8004984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d107      	bne.n	8004984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0201 	mvn.w	r2, #1
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fb fda4 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	d10e      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d107      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fae0 	bl	8004f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8ff 	bl	8004bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0220 	mvn.w	r2, #32
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 faaa 	bl	8004f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIM_ConfigClockSource+0x1c>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0b4      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x186>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a64:	d03e      	beq.n	8004ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	f200 8087 	bhi.w	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	f000 8086 	beq.w	8004b82 <HAL_TIM_ConfigClockSource+0x172>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	d87f      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d01a      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8004a80:	2b70      	cmp	r3, #112	; 0x70
 8004a82:	d87b      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d050      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x11a>
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d877      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d03c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0xfa>
 8004a90:	2b50      	cmp	r3, #80	; 0x50
 8004a92:	d873      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d058      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0x13a>
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d86f      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d064      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004aa0:	2b30      	cmp	r3, #48	; 0x30
 8004aa2:	d86b      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d060      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d867      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05c      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d05a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab4:	e062      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6899      	ldr	r1, [r3, #8]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f000 f9ad 	bl	8004e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	609a      	str	r2, [r3, #8]
      break;
 8004ae2:	e04f      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6899      	ldr	r1, [r3, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f000 f996 	bl	8004e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b06:	609a      	str	r2, [r3, #8]
      break;
 8004b08:	e03c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 f90a 	bl	8004d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2150      	movs	r1, #80	; 0x50
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f963 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004b28:	e02c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6859      	ldr	r1, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f000 f929 	bl	8004d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2160      	movs	r1, #96	; 0x60
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f953 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004b48:	e01c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f000 f8ea 	bl	8004d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2140      	movs	r1, #64	; 0x40
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f943 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004b68:	e00c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f000 f93a 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004b7a:	e003      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e000      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a40      	ldr	r2, [pc, #256]	; (8004d04 <TIM_Base_SetConfig+0x114>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d00f      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <TIM_Base_SetConfig+0x118>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3c      	ldr	r2, [pc, #240]	; (8004d0c <TIM_Base_SetConfig+0x11c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <TIM_Base_SetConfig+0x120>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3a      	ldr	r2, [pc, #232]	; (8004d14 <TIM_Base_SetConfig+0x124>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d108      	bne.n	8004c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <TIM_Base_SetConfig+0x114>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d027      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <TIM_Base_SetConfig+0x118>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d023      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2b      	ldr	r2, [pc, #172]	; (8004d0c <TIM_Base_SetConfig+0x11c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01f      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <TIM_Base_SetConfig+0x120>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d01b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <TIM_Base_SetConfig+0x124>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d017      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <TIM_Base_SetConfig+0x128>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <TIM_Base_SetConfig+0x12c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <TIM_Base_SetConfig+0x130>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <TIM_Base_SetConfig+0x134>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <TIM_Base_SetConfig+0x138>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <TIM_Base_SetConfig+0x13c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <TIM_Base_SetConfig+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_Base_SetConfig+0xf8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <TIM_Base_SetConfig+0x124>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d103      	bne.n	8004cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	615a      	str	r2, [r3, #20]
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800
 8004d24:	40001800 	.word	0x40001800
 8004d28:	40001c00 	.word	0x40001c00
 8004d2c:	40002000 	.word	0x40002000

08004d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f023 0201 	bic.w	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 030a 	bic.w	r3, r3, #10
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0210 	bic.w	r2, r3, #16
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f043 0307 	orr.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e05a      	b.n	8004f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d01d      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10c      	bne.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40001800 	.word	0x40001800

08004f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f84:	b084      	sub	sp, #16
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	f107 001c 	add.w	r0, r7, #28
 8004f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d122      	bne.n	8004fe2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9c0 	bl	800535c <USB_CoreReset>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e01a      	b.n	8005018 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9b4 	bl	800535c <USB_CoreReset>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
 800500a:	e005      	b.n	8005018 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	2b01      	cmp	r3, #1
 800501c:	d10b      	bne.n	8005036 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f043 0206 	orr.w	r2, r3, #6
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f043 0220 	orr.w	r2, r3, #32
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005042:	b004      	add	sp, #16
 8005044:	4770      	bx	lr

08005046 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 0201 	bic.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d115      	bne.n	80050d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fb ffa1 	bl	8001000 <HAL_Delay>
      ms++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f93a 	bl	800533e <USB_GetMode>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d01e      	beq.n	800510e <USB_SetCurrentMode+0x84>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b31      	cmp	r3, #49	; 0x31
 80050d4:	d9f0      	bls.n	80050b8 <USB_SetCurrentMode+0x2e>
 80050d6:	e01a      	b.n	800510e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d115      	bne.n	800510a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fb ff88 	bl	8001000 <HAL_Delay>
      ms++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f921 	bl	800533e <USB_GetMode>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <USB_SetCurrentMode+0x84>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b31      	cmp	r3, #49	; 0x31
 8005106:	d9f0      	bls.n	80050ea <USB_SetCurrentMode+0x60>
 8005108:	e001      	b.n	800510e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e005      	b.n	800511a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b32      	cmp	r3, #50	; 0x32
 8005112:	d101      	bne.n	8005118 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <USB_FlushTxFifo+0x64>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e01b      	b.n	800517c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	daf2      	bge.n	8005132 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	019b      	lsls	r3, r3, #6
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a08      	ldr	r2, [pc, #32]	; (8005188 <USB_FlushTxFifo+0x64>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e006      	b.n	800517c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b20      	cmp	r3, #32
 8005178:	d0f0      	beq.n	800515c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	00030d40 	.word	0x00030d40

0800518c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <USB_FlushRxFifo+0x5c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e018      	b.n	80051dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	daf2      	bge.n	8005198 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2210      	movs	r2, #16
 80051ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3301      	adds	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <USB_FlushRxFifo+0x5c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e006      	b.n	80051dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d0f0      	beq.n	80051bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	00030d40 	.word	0x00030d40

080051ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4611      	mov	r1, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	460b      	mov	r3, r1
 80051fc:	71fb      	strb	r3, [r7, #7]
 80051fe:	4613      	mov	r3, r2
 8005200:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800520a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d123      	bne.n	800525a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005212:	88bb      	ldrh	r3, [r7, #4]
 8005214:	3303      	adds	r3, #3
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e018      	b.n	8005252 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	031a      	lsls	r2, r3, #12
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	461a      	mov	r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3301      	adds	r3, #1
 8005238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	3301      	adds	r3, #1
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3e2      	bcc.n	8005220 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3724      	adds	r7, #36	; 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005268:	b480      	push	{r7}
 800526a:	b08b      	sub	sp, #44	; 0x2c
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	b29b      	uxth	r3, r3
 8005284:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e014      	b.n	80052be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	601a      	str	r2, [r3, #0]
    pDest++;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	3301      	adds	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	3301      	adds	r3, #1
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	3301      	adds	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	3301      	adds	r3, #1
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d3e6      	bcc.n	8005294 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052c6:	8bfb      	ldrh	r3, [r7, #30]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01e      	beq.n	800530a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d6:	461a      	mov	r2, r3
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	701a      	strb	r2, [r3, #0]
      i++;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	3301      	adds	r3, #1
 80052f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	3301      	adds	r3, #1
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	3b01      	subs	r3, #1
 8005302:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005304:	8bfb      	ldrh	r3, [r7, #30]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ea      	bne.n	80052e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800530c:	4618      	mov	r0, r3
 800530e:	372c      	adds	r7, #44	; 0x2c
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0301 	and.w	r3, r3, #1
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <USB_CoreReset+0x64>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e01b      	b.n	80053b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	daf2      	bge.n	8005368 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <USB_CoreReset+0x64>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e006      	b.n	80053b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d0f0      	beq.n	8005392 <USB_CoreReset+0x36>

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	00030d40 	.word	0x00030d40

080053c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053c4:	b084      	sub	sp, #16
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053e4:	461a      	mov	r2, r3
 80053e6:	2300      	movs	r3, #0
 80053e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d018      	beq.n	800544c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d10a      	bne.n	8005436 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800542e:	f043 0304 	orr.w	r3, r3, #4
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	e014      	b.n	8005460 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e009      	b.n	8005460 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800545a:	f023 0304 	bic.w	r3, r3, #4
 800545e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005460:	2110      	movs	r1, #16
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fe5e 	bl	8005124 <USB_FlushTxFifo>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fe8a 	bl	800518c <USB_FlushRxFifo>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e015      	b.n	80054b4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	461a      	mov	r2, r3
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	461a      	mov	r2, r3
 80054aa:	2300      	movs	r3, #0
 80054ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3301      	adds	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3e5      	bcc.n	8005488 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <USB_HostInit+0x16c>)
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a13      	ldr	r2, [pc, #76]	; (8005534 <USB_HostInit+0x170>)
 80054e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80054ec:	e009      	b.n	8005502 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <USB_HostInit+0x174>)
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a0f      	ldr	r2, [pc, #60]	; (800553c <USB_HostInit+0x178>)
 80054fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f043 0210 	orr.w	r2, r3, #16
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	4b09      	ldr	r3, [pc, #36]	; (8005540 <USB_HostInit+0x17c>)
 800551a:	4313      	orrs	r3, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552c:	b004      	add	sp, #16
 800552e:	4770      	bx	lr
 8005530:	01000200 	.word	0x01000200
 8005534:	00e00300 	.word	0x00e00300
 8005538:	00600080 	.word	0x00600080
 800553c:	004000e0 	.word	0x004000e0
 8005540:	a3200008 	.word	0xa3200008

08005544 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d107      	bne.n	8005596 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558c:	461a      	mov	r2, r3
 800558e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005592:	6053      	str	r3, [r2, #4]
 8005594:	e009      	b.n	80055aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d106      	bne.n	80055aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a2:	461a      	mov	r2, r3
 80055a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80055a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055e8:	2064      	movs	r0, #100	; 0x64
 80055ea:	f7fb fd09 	bl	8001000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80055fc:	200a      	movs	r0, #10
 80055fe:	f7fb fcff 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005630:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <USB_DriveVbus+0x44>
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d106      	bne.n	8005650 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800564a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800564e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d109      	bne.n	8005670 <USB_DriveVbus+0x64>
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800566a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800566e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	0c5b      	lsrs	r3, r3, #17
 800569c:	f003 0303 	and.w	r3, r3, #3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	b29b      	uxth	r3, r3
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	4608      	mov	r0, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	70fb      	strb	r3, [r7, #3]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70bb      	strb	r3, [r7, #2]
 80056e6:	4613      	mov	r3, r2
 80056e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005706:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800570a:	2b03      	cmp	r3, #3
 800570c:	d87e      	bhi.n	800580c <USB_HC_Init+0x13c>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <USB_HC_Init+0x44>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005725 	.word	0x08005725
 8005718:	080057cf 	.word	0x080057cf
 800571c:	08005725 	.word	0x08005725
 8005720:	08005791 	.word	0x08005791
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005730:	461a      	mov	r2, r3
 8005732:	f240 439d 	movw	r3, #1181	; 0x49d
 8005736:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005738:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800573c:	2b00      	cmp	r3, #0
 800573e:	da10      	bge.n	8005762 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	440a      	add	r2, r1
 8005756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005760:	e057      	b.n	8005812 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d051      	beq.n	8005812 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	440a      	add	r2, r1
 8005784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005788:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800578c:	60d3      	str	r3, [r2, #12]
      break;
 800578e:	e040      	b.n	8005812 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579c:	461a      	mov	r2, r3
 800579e:	f240 639d 	movw	r3, #1693	; 0x69d
 80057a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da34      	bge.n	8005816 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057cc:	e023      	b.n	8005816 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057da:	461a      	mov	r2, r3
 80057dc:	f240 2325 	movw	r3, #549	; 0x225
 80057e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da17      	bge.n	800581a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005804:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005808:	60d3      	str	r3, [r2, #12]
      }
      break;
 800580a:	e006      	b.n	800581a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	77fb      	strb	r3, [r7, #31]
      break;
 8005810:	e004      	b.n	800581c <USB_HC_Init+0x14c>
      break;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <USB_HC_Init+0x14c>
      break;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <USB_HC_Init+0x14c>
      break;
 800581a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	440a      	add	r2, r1
 8005832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005836:	f043 0302 	orr.w	r3, r3, #2
 800583a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	2101      	movs	r1, #1
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	6939      	ldr	r1, [r7, #16]
 8005852:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005856:	4313      	orrs	r3, r2
 8005858:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005866:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da03      	bge.n	8005876 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	e001      	b.n	800587a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff feff 	bl	800567e <USB_GetHostSpeed>
 8005880:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005886:	2b02      	cmp	r3, #2
 8005888:	d106      	bne.n	8005898 <USB_HC_Init+0x1c8>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d003      	beq.n	8005898 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e001      	b.n	800589c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800589c:	787b      	ldrb	r3, [r7, #1]
 800589e:	059b      	lsls	r3, r3, #22
 80058a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058a4:	78bb      	ldrb	r3, [r7, #2]
 80058a6:	02db      	lsls	r3, r3, #11
 80058a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058b2:	049b      	lsls	r3, r3, #18
 80058b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	0159      	lsls	r1, r3, #5
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	440b      	add	r3, r1
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d003      	beq.n	80058ea <USB_HC_Init+0x21a>
 80058e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d10f      	bne.n	800590a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005904:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005908:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800590a:	7ffb      	ldrb	r3, [r7, #31]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	; 0x30
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800592c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005930:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02d      	beq.n	800599a <USB_HC_StartXfer+0x86>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	791b      	ldrb	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d129      	bne.n	800599a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d117      	bne.n	800597c <USB_HC_StartXfer+0x68>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	79db      	ldrb	r3, [r3, #7]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <USB_HC_StartXfer+0x48>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	79db      	ldrb	r3, [r3, #7]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d10f      	bne.n	800597c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	440a      	add	r2, r1
 8005972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <USB_HC_StartXfer+0x86>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	795b      	ldrb	r3, [r3, #5]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d107      	bne.n	800599a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fa0f 	bl	8005db4 <USB_DoPing>
      return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e0f8      	b.n	8005b8c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	8912      	ldrh	r2, [r2, #8]
 80059aa:	4413      	add	r3, r2
 80059ac:	3b01      	subs	r3, #1
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	8912      	ldrh	r2, [r2, #8]
 80059b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059ba:	8b7b      	ldrh	r3, [r7, #26]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d90b      	bls.n	80059d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059c0:	8b7b      	ldrh	r3, [r7, #26]
 80059c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	8912      	ldrh	r2, [r2, #8]
 80059ca:	fb03 f202 	mul.w	r2, r3, r2
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	e001      	b.n	80059d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80059d4:	2301      	movs	r3, #1
 80059d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	78db      	ldrb	r3, [r3, #3]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	8912      	ldrh	r2, [r2, #8]
 80059e6:	fb03 f202 	mul.w	r2, r3, r2
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	611a      	str	r2, [r3, #16]
 80059ee:	e003      	b.n	80059f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a02:	04d9      	lsls	r1, r3, #19
 8005a04:	4b63      	ldr	r3, [pc, #396]	; (8005b94 <USB_HC_StartXfer+0x280>)
 8005a06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	7a9b      	ldrb	r3, [r3, #10]
 8005a0e:	075b      	lsls	r3, r3, #29
 8005a10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a14:	69f9      	ldr	r1, [r7, #28]
 8005a16:	0148      	lsls	r0, r1, #5
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	4401      	add	r1, r0
 8005a1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68d9      	ldr	r1, [r3, #12]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	7e7b      	ldrb	r3, [r7, #25]
 8005a86:	075b      	lsls	r3, r3, #29
 8005a88:	69f9      	ldr	r1, [r7, #28]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	6a39      	ldr	r1, [r7, #32]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	78db      	ldrb	r3, [r3, #3]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e003      	b.n	8005aca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ac8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	461a      	mov	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e04e      	b.n	8005b8c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	78db      	ldrb	r3, [r3, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d149      	bne.n	8005b8a <USB_HC_StartXfer+0x276>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d045      	beq.n	8005b8a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	79db      	ldrb	r3, [r3, #7]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d830      	bhi.n	8005b68 <USB_HC_StartXfer+0x254>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <USB_HC_StartXfer+0x1f8>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b1d 	.word	0x08005b1d
 8005b18:	08005b41 	.word	0x08005b41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	3303      	adds	r3, #3
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b26:	8afa      	ldrh	r2, [r7, #22]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d91c      	bls.n	8005b6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b3e:	e015      	b.n	8005b6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	3303      	adds	r3, #3
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b4a:	8afa      	ldrh	r2, [r7, #22]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d90a      	bls.n	8005b70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b66:	e003      	b.n	8005b70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <USB_HC_StartXfer+0x25e>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <USB_HC_StartXfer+0x25e>
        break;
 8005b70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68d9      	ldr	r1, [r3, #12]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	785a      	ldrb	r2, [r3, #1]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2000      	movs	r0, #0
 8005b82:	9000      	str	r0, [sp, #0]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff fb31 	bl	80051ec <USB_WritePacket>
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	; 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	1ff80000 	.word	0x1ff80000

08005b98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	b29b      	uxth	r3, r3
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b089      	sub	sp, #36	; 0x24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	0c9b      	lsrs	r3, r3, #18
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	0fdb      	lsrs	r3, r3, #31
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d104      	bne.n	8005c14 <USB_HC_Halt+0x5a>
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e0c8      	b.n	8005da6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <USB_HC_Halt+0x66>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d163      	bne.n	8005ce8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c3e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 80ab 	bne.w	8005da4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d133      	bne.n	8005cc2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca6:	d81d      	bhi.n	8005ce4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cbe:	d0ec      	beq.n	8005c9a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cc0:	e070      	b.n	8005da4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ce2:	e05f      	b.n	8005da4 <USB_HC_Halt+0x1ea>
            break;
 8005ce4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ce6:	e05d      	b.n	8005da4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d133      	bne.n	8005d80 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d56:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d64:	d81d      	bhi.n	8005da2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7c:	d0ec      	beq.n	8005d58 <USB_HC_Halt+0x19e>
 8005d7e:	e011      	b.n	8005da4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e000      	b.n	8005da4 <USB_HC_Halt+0x1ea>
          break;
 8005da2:	bf00      	nop
    }
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3724      	adds	r7, #36	; 0x24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	04da      	lsls	r2, r3, #19
 8005dd0:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <USB_DoPing+0x74>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005de4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dfc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e04:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	1ff80000 	.word	0x1ff80000

08005e2c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff f911 	bl	8005068 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e46:	2110      	movs	r1, #16
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff f96b 	bl	8005124 <USB_FlushTxFifo>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff f997 	bl	800518c <USB_FlushRxFifo>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	e01f      	b.n	8005eae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b0f      	cmp	r3, #15
 8005eb2:	d9dc      	bls.n	8005e6e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e034      	b.n	8005f24 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ee0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	461a      	mov	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f00:	d80c      	bhi.n	8005f1c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f18:	d0ec      	beq.n	8005ef4 <USB_StopHost+0xc8>
 8005f1a:	e000      	b.n	8005f1e <USB_StopHost+0xf2>
        break;
 8005f1c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3301      	adds	r3, #1
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d9c7      	bls.n	8005eba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f30:	461a      	mov	r2, r3
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff f880 	bl	8005046 <USB_EnableGlobalInt>

  return ret;
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b089      	sub	sp, #36	; 0x24
 8005f54:	af04      	add	r7, sp, #16
 8005f56:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f58:	2301      	movs	r3, #1
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fc66 	bl	8006830 <USBH_FindInterface>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2bff      	cmp	r3, #255	; 0xff
 8005f6c:	d002      	beq.n	8005f74 <USBH_CDC_InterfaceInit+0x24>
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d901      	bls.n	8005f78 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f74:	2302      	movs	r3, #2
 8005f76:	e13d      	b.n	80061f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc3b 	bl	80067f8 <USBH_SelectInterface>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e131      	b.n	80061f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f96:	2050      	movs	r0, #80	; 0x50
 8005f98:	f002 fafa 	bl	8008590 <malloc>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e11f      	b.n	80061f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005fb4:	2250      	movs	r2, #80	; 0x50
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	68b8      	ldr	r0, [r7, #8]
 8005fba:	f002 faf9 	bl	80085b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	211a      	movs	r1, #26
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b25b      	sxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da15      	bge.n	8006002 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	211a      	movs	r1, #26
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	211a      	movs	r1, #26
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ffc:	881a      	ldrh	r2, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 ff2c 	bl	8007e66 <USBH_AllocPipe>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	7819      	ldrb	r1, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	7858      	ldrb	r0, [r3, #1]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	8952      	ldrh	r2, [r2, #10]
 800602e:	9202      	str	r2, [sp, #8]
 8006030:	2203      	movs	r2, #3
 8006032:	9201      	str	r2, [sp, #4]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	4623      	mov	r3, r4
 8006038:	4602      	mov	r2, r0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fee4 	bl	8007e08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f002 f9f3 	bl	8008434 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800604e:	2300      	movs	r3, #0
 8006050:	2200      	movs	r2, #0
 8006052:	210a      	movs	r1, #10
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fbeb 	bl	8006830 <USBH_FindInterface>
 800605a:	4603      	mov	r3, r0
 800605c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2bff      	cmp	r3, #255	; 0xff
 8006062:	d002      	beq.n	800606a <USBH_CDC_InterfaceInit+0x11a>
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d901      	bls.n	800606e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800606a:	2302      	movs	r3, #2
 800606c:	e0c2      	b.n	80061f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	211a      	movs	r1, #26
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	4413      	add	r3, r2
 800607a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b25b      	sxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	da16      	bge.n	80060b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	211a      	movs	r1, #26
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	4413      	add	r3, r2
 8006092:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	211a      	movs	r1, #26
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060ac:	881a      	ldrh	r2, [r3, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	835a      	strh	r2, [r3, #26]
 80060b2:	e015      	b.n	80060e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	211a      	movs	r1, #26
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	4413      	add	r3, r2
 80060c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	211a      	movs	r1, #26
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	211a      	movs	r1, #26
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	b25b      	sxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da16      	bge.n	8006126 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	211a      	movs	r1, #26
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	211a      	movs	r1, #26
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	835a      	strh	r2, [r3, #26]
 8006124:	e015      	b.n	8006152 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	211a      	movs	r1, #26
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	4413      	add	r3, r2
 8006132:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	211a      	movs	r1, #26
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	7b9b      	ldrb	r3, [r3, #14]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fe84 	bl	8007e66 <USBH_AllocPipe>
 800615e:	4603      	mov	r3, r0
 8006160:	461a      	mov	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	7bdb      	ldrb	r3, [r3, #15]
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fe7a 	bl	8007e66 <USBH_AllocPipe>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	7b59      	ldrb	r1, [r3, #13]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	7b98      	ldrb	r0, [r3, #14]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	8b12      	ldrh	r2, [r2, #24]
 8006192:	9202      	str	r2, [sp, #8]
 8006194:	2202      	movs	r2, #2
 8006196:	9201      	str	r2, [sp, #4]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	4623      	mov	r3, r4
 800619c:	4602      	mov	r2, r0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fe32 	bl	8007e08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	7b19      	ldrb	r1, [r3, #12]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	7bd8      	ldrb	r0, [r3, #15]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	8b52      	ldrh	r2, [r2, #26]
 80061bc:	9202      	str	r2, [sp, #8]
 80061be:	2202      	movs	r2, #2
 80061c0:	9201      	str	r2, [sp, #4]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	4623      	mov	r3, r4
 80061c6:	4602      	mov	r2, r0
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fe1d 	bl	8007e08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	7b5b      	ldrb	r3, [r3, #13]
 80061da:	2200      	movs	r2, #0
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 f928 	bl	8008434 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	7b1b      	ldrb	r3, [r3, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f002 f921 	bl	8008434 <USBH_LL_SetToggle>

  return USBH_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd90      	pop	{r4, r7, pc}

080061fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fe12 	bl	8007e46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fe3d 	bl	8007ea8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	7b1b      	ldrb	r3, [r3, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	7b1b      	ldrb	r3, [r3, #12]
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fdff 	bl	8007e46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	7b1b      	ldrb	r3, [r3, #12]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fe2a 	bl	8007ea8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	7b5b      	ldrb	r3, [r3, #13]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	7b5b      	ldrb	r3, [r3, #13]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 fdec 	bl	8007e46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	7b5b      	ldrb	r3, [r3, #13]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fe17 	bl	8007ea8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	4618      	mov	r0, r3
 8006296:	f002 f983 	bl	80085a0 <free>
    phost->pActiveClass->pData = 0U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a0:	2200      	movs	r2, #0
 80062a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3340      	adds	r3, #64	; 0x40
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8b1 	bl	800642e <GetLineCoding>
 80062cc:	4603      	mov	r3, r0
 80062ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062dc:	2102      	movs	r1, #2
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062e2:	7afb      	ldrb	r3, [r7, #11]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800630c:	2b04      	cmp	r3, #4
 800630e:	d877      	bhi.n	8006400 <USBH_CDC_Process+0x114>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <USBH_CDC_Process+0x2c>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800632d 	.word	0x0800632d
 800631c:	08006333 	.word	0x08006333
 8006320:	08006363 	.word	0x08006363
 8006324:	080063d7 	.word	0x080063d7
 8006328:	080063e5 	.word	0x080063e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
      break;
 8006330:	e06d      	b.n	800640e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f897 	bl	800646c <SetLineCoding>
 800633e:	4603      	mov	r3, r0
 8006340:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006350:	e058      	b.n	8006404 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d055      	beq.n	8006404 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2204      	movs	r2, #4
 800635c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006360:	e050      	b.n	8006404 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3340      	adds	r3, #64	; 0x40
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f860 	bl	800642e <GetLineCoding>
 800636e:	4603      	mov	r3, r0
 8006370:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d126      	bne.n	80063c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800638a:	791b      	ldrb	r3, [r3, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d13b      	bne.n	8006408 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800639c:	429a      	cmp	r2, r3
 800639e:	d133      	bne.n	8006408 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d12b      	bne.n	8006408 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d124      	bne.n	8006408 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f958 	bl	8006674 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063c4:	e020      	b.n	8006408 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d01d      	beq.n	8006408 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2204      	movs	r2, #4
 80063d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063d4:	e018      	b.n	8006408 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f867 	bl	80064aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8da 	bl	8006596 <CDC_ProcessReception>
      break;
 80063e2:	e014      	b.n	800640e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 ffef 	bl	80073ca <USBH_ClrFeature>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80063fe:	e005      	b.n	800640c <USBH_CDC_Process+0x120>

    default:
      break;
 8006400:	bf00      	nop
 8006402:	e004      	b.n	800640e <USBH_CDC_Process+0x122>
      break;
 8006404:	bf00      	nop
 8006406:	e002      	b.n	800640e <USBH_CDC_Process+0x122>
      break;
 8006408:	bf00      	nop
 800640a:	e000      	b.n	800640e <USBH_CDC_Process+0x122>
      break;
 800640c:	bf00      	nop

  }

  return status;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	22a1      	movs	r2, #161	; 0xa1
 800643c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2221      	movs	r2, #33	; 0x21
 8006442:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2207      	movs	r2, #7
 8006454:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2207      	movs	r2, #7
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fa81 	bl	8007964 <USBH_CtlReq>
 8006462:	4603      	mov	r3, r0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2207      	movs	r2, #7
 8006492:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2207      	movs	r2, #7
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fa62 	bl	8007964 <USBH_CtlReq>
 80064a0:	4603      	mov	r3, r0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af02      	add	r7, sp, #8
 80064b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064bc:	2300      	movs	r3, #0
 80064be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d002      	beq.n	80064d0 <CDC_ProcessTransmission+0x26>
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d023      	beq.n	8006516 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80064ce:	e05e      	b.n	800658e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	8b12      	ldrh	r2, [r2, #24]
 80064d8:	4293      	cmp	r3, r2
 80064da:	d90b      	bls.n	80064f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	69d9      	ldr	r1, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8b1a      	ldrh	r2, [r3, #24]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7b5b      	ldrb	r3, [r3, #13]
 80064e8:	2001      	movs	r0, #1
 80064ea:	9000      	str	r0, [sp, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fc48 	bl	8007d82 <USBH_BulkSendData>
 80064f2:	e00b      	b.n	800650c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	7b5b      	ldrb	r3, [r3, #13]
 8006502:	2001      	movs	r0, #1
 8006504:	9000      	str	r0, [sp, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fc3b 	bl	8007d82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006514:	e03b      	b.n	800658e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	7b5b      	ldrb	r3, [r3, #13]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 ff5f 	bl	80083e0 <USBH_LL_GetURBState>
 8006522:	4603      	mov	r3, r0
 8006524:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d128      	bne.n	800657e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	8b12      	ldrh	r2, [r2, #24]
 8006534:	4293      	cmp	r3, r2
 8006536:	d90e      	bls.n	8006556 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	8b12      	ldrh	r2, [r2, #24]
 8006540:	1a9a      	subs	r2, r3, r2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	8b12      	ldrh	r2, [r2, #24]
 800654e:	441a      	add	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	61da      	str	r2, [r3, #28]
 8006554:	e002      	b.n	800655c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800656c:	e00e      	b.n	800658c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f868 	bl	800664c <USBH_CDC_TransmitCallback>
      break;
 800657c:	e006      	b.n	800658c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d103      	bne.n	800658c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800658c:	bf00      	nop
  }
}
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d002      	beq.n	80065bc <CDC_ProcessReception+0x26>
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d00e      	beq.n	80065d8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80065ba:	e043      	b.n	8006644 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	6a19      	ldr	r1, [r3, #32]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	8b5a      	ldrh	r2, [r3, #26]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	7b1b      	ldrb	r3, [r3, #12]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 fbff 	bl	8007dcc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2204      	movs	r2, #4
 80065d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065d6:	e035      	b.n	8006644 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	7b1b      	ldrb	r3, [r3, #12]
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fefe 	bl	80083e0 <USBH_LL_GetURBState>
 80065e4:	4603      	mov	r3, r0
 80065e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d129      	bne.n	8006642 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	7b1b      	ldrb	r3, [r3, #12]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 fe61 	bl	80082bc <USBH_LL_GetLastXferSize>
 80065fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	429a      	cmp	r2, r3
 8006604:	d016      	beq.n	8006634 <CDC_ProcessReception+0x9e>
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	8b5b      	ldrh	r3, [r3, #26]
 800660a:	461a      	mov	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4293      	cmp	r3, r2
 8006610:	d910      	bls.n	8006634 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad2      	subs	r2, r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6a1a      	ldr	r2, [r3, #32]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	441a      	add	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2203      	movs	r2, #3
 800662e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006632:	e006      	b.n	8006642 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f80f 	bl	8006660 <USBH_CDC_ReceiveCallback>
      break;
 8006642:	bf00      	nop
  }
}
 8006644:	bf00      	nop
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800669c:	2302      	movs	r3, #2
 800669e:	e029      	b.n	80066f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	79fa      	ldrb	r2, [r7, #7]
 80066a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f81f 	bl	80066fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f001 fd31 	bl	8008154 <USBH_LL_Init>

  return USBH_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e009      	b.n	8006722 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	33e0      	adds	r3, #224	; 0xe0
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b0f      	cmp	r3, #15
 8006726:	d9f2      	bls.n	800670e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e009      	b.n	8006742 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006748:	d3f1      	bcc.n	800672e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2240      	movs	r2, #64	; 0x40
 800676e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d016      	beq.n	80067e6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10e      	bne.n	80067e0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067c8:	1c59      	adds	r1, r3, #1
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	33de      	adds	r3, #222	; 0xde
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
 80067de:	e004      	b.n	80067ea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067e0:	2302      	movs	r3, #2
 80067e2:	73fb      	strb	r3, [r7, #15]
 80067e4:	e001      	b.n	80067ea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	429a      	cmp	r2, r3
 8006812:	d204      	bcs.n	800681e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800681c:	e001      	b.n	8006822 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800681e:	2302      	movs	r3, #2
 8006820:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	70fb      	strb	r3, [r7, #3]
 8006842:	460b      	mov	r3, r1
 8006844:	70bb      	strb	r3, [r7, #2]
 8006846:	4613      	mov	r3, r2
 8006848:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006858:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800685a:	e025      	b.n	80068a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	221a      	movs	r2, #26
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	3308      	adds	r3, #8
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	3302      	adds	r3, #2
 800686c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	795b      	ldrb	r3, [r3, #5]
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	429a      	cmp	r2, r3
 8006876:	d002      	beq.n	800687e <USBH_FindInterface+0x4e>
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	2bff      	cmp	r3, #255	; 0xff
 800687c:	d111      	bne.n	80068a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006882:	78ba      	ldrb	r2, [r7, #2]
 8006884:	429a      	cmp	r2, r3
 8006886:	d002      	beq.n	800688e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006888:	78bb      	ldrb	r3, [r7, #2]
 800688a:	2bff      	cmp	r3, #255	; 0xff
 800688c:	d109      	bne.n	80068a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006892:	787a      	ldrb	r2, [r7, #1]
 8006894:	429a      	cmp	r2, r3
 8006896:	d002      	beq.n	800689e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006898:	787b      	ldrb	r3, [r7, #1]
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d101      	bne.n	80068a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	e006      	b.n	80068b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	3301      	adds	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d9d6      	bls.n	800685c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068ae:	23ff      	movs	r3, #255	; 0xff
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fc81 	bl	80081cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80068ca:	2101      	movs	r1, #1
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fd9a 	bl	8008406 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068e4:	2302      	movs	r3, #2
 80068e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d102      	bne.n	80068fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2203      	movs	r2, #3
 80068fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b0b      	cmp	r3, #11
 8006906:	f200 81be 	bhi.w	8006c86 <USBH_Process+0x3aa>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <USBH_Process+0x34>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006941 	.word	0x08006941
 8006914:	08006973 	.word	0x08006973
 8006918:	080069db 	.word	0x080069db
 800691c:	08006c21 	.word	0x08006c21
 8006920:	08006c87 	.word	0x08006c87
 8006924:	08006a7f 	.word	0x08006a7f
 8006928:	08006bc7 	.word	0x08006bc7
 800692c:	08006ab5 	.word	0x08006ab5
 8006930:	08006ad5 	.word	0x08006ad5
 8006934:	08006af5 	.word	0x08006af5
 8006938:	08006b39 	.word	0x08006b39
 800693c:	08006c09 	.word	0x08006c09
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 819e 	beq.w	8006c8a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006954:	20c8      	movs	r0, #200	; 0xc8
 8006956:	f001 fd9d 	bl	8008494 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 fc93 	bl	8008286 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006970:	e18b      	b.n	8006c8a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800698a:	e18d      	b.n	8006ca8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006996:	d914      	bls.n	80069c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800699e:	3301      	adds	r3, #1
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d903      	bls.n	80069ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	220d      	movs	r2, #13
 80069b6:	701a      	strb	r2, [r3, #0]
      break;
 80069b8:	e176      	b.n	8006ca8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
      break;
 80069c0:	e172      	b.n	8006ca8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069c8:	f103 020a 	add.w	r2, r3, #10
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80069d2:	200a      	movs	r0, #10
 80069d4:	f001 fd5e 	bl	8008494 <USBH_Delay>
      break;
 80069d8:	e166      	b.n	8006ca8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ea:	2104      	movs	r1, #4
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069f0:	2064      	movs	r0, #100	; 0x64
 80069f2:	f001 fd4f 	bl	8008494 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fc1e 	bl	8008238 <USBH_LL_GetSpeed>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2205      	movs	r2, #5
 8006a0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fa29 	bl	8007e66 <USBH_AllocPipe>
 8006a14:	4603      	mov	r3, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006a1c:	2180      	movs	r1, #128	; 0x80
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fa21 	bl	8007e66 <USBH_AllocPipe>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	7919      	ldrb	r1, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a40:	b292      	uxth	r2, r2
 8006a42:	9202      	str	r2, [sp, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	9201      	str	r2, [sp, #4]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2280      	movs	r2, #128	; 0x80
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 f9da 	bl	8007e08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	7959      	ldrb	r1, [r3, #5]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a68:	b292      	uxth	r2, r2
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	9201      	str	r2, [sp, #4]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	4603      	mov	r3, r0
 8006a74:	2200      	movs	r2, #0
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 f9c6 	bl	8007e08 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a7c:	e114      	b.n	8006ca8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f918 	bl	8006cb4 <USBH_HandleEnum>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 80fe 	bne.w	8006c8e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d103      	bne.n	8006aac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006aaa:	e0f0      	b.n	8006c8e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2207      	movs	r2, #7
 8006ab0:	701a      	strb	r2, [r3, #0]
      break;
 8006ab2:	e0ec      	b.n	8006c8e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80e9 	beq.w	8006c92 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2208      	movs	r2, #8
 8006ad0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006ad2:	e0de      	b.n	8006c92 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fc2c 	bl	800733c <USBH_SetCfg>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80d5 	bne.w	8006c96 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2209      	movs	r2, #9
 8006af0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006af2:	e0d0      	b.n	8006c96 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d016      	beq.n	8006b30 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006b02:	2101      	movs	r1, #1
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc3c 	bl	8007382 <USBH_SetFeature>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220a      	movs	r2, #10
 8006b1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b1c:	e0bd      	b.n	8006c9a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	f040 80b9 	bne.w	8006c9a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	220a      	movs	r2, #10
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e0b4      	b.n	8006c9a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	220a      	movs	r2, #10
 8006b34:	701a      	strb	r2, [r3, #0]
      break;
 8006b36:	e0b0      	b.n	8006c9a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80ad 	beq.w	8006c9e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	e016      	b.n	8006b80 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b52:	7bfa      	ldrb	r2, [r7, #15]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	32de      	adds	r2, #222	; 0xde
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	791a      	ldrb	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b68:	7bfa      	ldrb	r2, [r7, #15]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32de      	adds	r2, #222	; 0xde
 8006b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b78:	e005      	b.n	8006b86 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0e5      	beq.n	8006b52 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d016      	beq.n	8006bbe <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2206      	movs	r2, #6
 8006ba6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bae:	2103      	movs	r1, #3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bb4:	e073      	b.n	8006c9e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220d      	movs	r2, #13
 8006bba:	701a      	strb	r2, [r3, #0]
      break;
 8006bbc:	e06f      	b.n	8006c9e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	220d      	movs	r2, #13
 8006bc2:	701a      	strb	r2, [r3, #0]
      break;
 8006bc4:	e06b      	b.n	8006c9e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d017      	beq.n	8006c00 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	220b      	movs	r2, #11
 8006bec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bee:	e058      	b.n	8006ca2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d154      	bne.n	8006ca2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	220d      	movs	r2, #13
 8006bfc:	701a      	strb	r2, [r3, #0]
      break;
 8006bfe:	e050      	b.n	8006ca2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	220d      	movs	r2, #13
 8006c04:	701a      	strb	r2, [r3, #0]
      break;
 8006c06:	e04c      	b.n	8006ca2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d049      	beq.n	8006ca6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
      }
      break;
 8006c1e:	e042      	b.n	8006ca6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fd67 	bl	80066fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5c:	2105      	movs	r1, #5
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff fe20 	bl	80068bc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c7c:	e014      	b.n	8006ca8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 faa4 	bl	80081cc <USBH_LL_Start>
      break;
 8006c84:	e010      	b.n	8006ca8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c86:	bf00      	nop
 8006c88:	e00e      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e00c      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e00a      	b.n	8006ca8 <USBH_Process+0x3cc>
    break;
 8006c92:	bf00      	nop
 8006c94:	e008      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006c96:	bf00      	nop
 8006c98:	e006      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e004      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e002      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <USBH_Process+0x3cc>
      break;
 8006ca6:	bf00      	nop
  }
  return USBH_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop

08006cb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	f200 81c1 	bhi.w	8007050 <USBH_HandleEnum+0x39c>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USBH_HandleEnum+0x20>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006db3 	.word	0x08006db3
 8006cdc:	08006e1d 	.word	0x08006e1d
 8006ce0:	08006eab 	.word	0x08006eab
 8006ce4:	08006f15 	.word	0x08006f15
 8006ce8:	08006f85 	.word	0x08006f85
 8006cec:	08006fcb 	.word	0x08006fcb
 8006cf0:	08007011 	.word	0x08007011
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006cf4:	2108      	movs	r1, #8
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa50 	bl	800719c <USBH_Get_DevDesc>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d130      	bne.n	8006d68 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7919      	ldrb	r1, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	9202      	str	r2, [sp, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4603      	mov	r3, r0
 8006d36:	2280      	movs	r2, #128	; 0x80
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f865 	bl	8007e08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7959      	ldrb	r1, [r3, #5]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d52:	b292      	uxth	r2, r2
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	9201      	str	r2, [sp, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f851 	bl	8007e08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d66:	e175      	b.n	8007054 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	f040 8172 	bne.w	8007054 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d903      	bls.n	8006d92 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	220d      	movs	r2, #13
 8006d8e:	701a      	strb	r2, [r3, #0]
      break;
 8006d90:	e160      	b.n	8007054 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	795b      	ldrb	r3, [r3, #5]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f885 	bl	8007ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	791b      	ldrb	r3, [r3, #4]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f87f 	bl	8007ea8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
      break;
 8006db0:	e150      	b.n	8007054 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006db2:	2112      	movs	r1, #18
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f9f1 	bl	800719c <USBH_Get_DevDesc>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dca:	e145      	b.n	8007058 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	f040 8142 	bne.w	8007058 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dda:	3301      	adds	r3, #1
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d903      	bls.n	8006df6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	220d      	movs	r2, #13
 8006df2:	701a      	strb	r2, [r3, #0]
      break;
 8006df4:	e130      	b.n	8007058 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	795b      	ldrb	r3, [r3, #5]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f853 	bl	8007ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	791b      	ldrb	r3, [r3, #4]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f84d 	bl	8007ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
      break;
 8006e1a:	e11d      	b.n	8007058 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa68 	bl	80072f4 <USBH_SetAddress>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d132      	bne.n	8006e94 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e2e:	2002      	movs	r0, #2
 8006e30:	f001 fb30 	bl	8008494 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2203      	movs	r2, #3
 8006e40:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7919      	ldrb	r1, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e56:	b292      	uxth	r2, r2
 8006e58:	9202      	str	r2, [sp, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	9201      	str	r2, [sp, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	4603      	mov	r3, r0
 8006e62:	2280      	movs	r2, #128	; 0x80
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 ffcf 	bl	8007e08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	7959      	ldrb	r1, [r3, #5]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	9202      	str	r2, [sp, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	9201      	str	r2, [sp, #4]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 ffbb 	bl	8007e08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e92:	e0e3      	b.n	800705c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	f040 80e0 	bne.w	800705c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	220d      	movs	r2, #13
 8006ea0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	705a      	strb	r2, [r3, #1]
      break;
 8006ea8:	e0d8      	b.n	800705c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006eaa:	2109      	movs	r1, #9
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f99d 	bl	80071ec <USBH_Get_CfgDesc>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d103      	bne.n	8006ec4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ec2:	e0cd      	b.n	8007060 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	f040 80ca 	bne.w	8007060 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d903      	bls.n	8006eee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	220d      	movs	r2, #13
 8006eea:	701a      	strb	r2, [r3, #0]
      break;
 8006eec:	e0b8      	b.n	8007060 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	795b      	ldrb	r3, [r3, #5]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 ffd7 	bl	8007ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	791b      	ldrb	r3, [r3, #4]
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 ffd1 	bl	8007ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
      break;
 8006f12:	e0a5      	b.n	8007060 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f965 	bl	80071ec <USBH_Get_CfgDesc>
 8006f22:	4603      	mov	r3, r0
 8006f24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2205      	movs	r2, #5
 8006f30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f32:	e097      	b.n	8007064 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	f040 8094 	bne.w	8007064 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f42:	3301      	adds	r3, #1
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d903      	bls.n	8006f5e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	220d      	movs	r2, #13
 8006f5a:	701a      	strb	r2, [r3, #0]
      break;
 8006f5c:	e082      	b.n	8007064 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	795b      	ldrb	r3, [r3, #5]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 ff9f 	bl	8007ea8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 ff99 	bl	8007ea8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
      break;
 8006f82:	e06f      	b.n	8007064 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d019      	beq.n	8006fc2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f9a:	23ff      	movs	r3, #255	; 0xff
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f949 	bl	8007234 <USBH_Get_StringDesc>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2206      	movs	r2, #6
 8006fb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fb2:	e059      	b.n	8007068 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d156      	bne.n	8007068 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2206      	movs	r2, #6
 8006fbe:	705a      	strb	r2, [r3, #1]
      break;
 8006fc0:	e052      	b.n	8007068 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2206      	movs	r2, #6
 8006fc6:	705a      	strb	r2, [r3, #1]
      break;
 8006fc8:	e04e      	b.n	8007068 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d019      	beq.n	8007008 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fe0:	23ff      	movs	r3, #255	; 0xff
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f926 	bl	8007234 <USBH_Get_StringDesc>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ff8:	e038      	b.n	800706c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d135      	bne.n	800706c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2207      	movs	r2, #7
 8007004:	705a      	strb	r2, [r3, #1]
      break;
 8007006:	e031      	b.n	800706c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2207      	movs	r2, #7
 800700c:	705a      	strb	r2, [r3, #1]
      break;
 800700e:	e02d      	b.n	800706c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007016:	2b00      	cmp	r3, #0
 8007018:	d017      	beq.n	800704a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007026:	23ff      	movs	r3, #255	; 0xff
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f903 	bl	8007234 <USBH_Get_StringDesc>
 800702e:	4603      	mov	r3, r0
 8007030:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800703c:	e018      	b.n	8007070 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d115      	bne.n	8007070 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e012      	b.n	8007070 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
      break;
 800704e:	e00f      	b.n	8007070 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007050:	bf00      	nop
 8007052:	e00e      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 8007054:	bf00      	nop
 8007056:	e00c      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 8007058:	bf00      	nop
 800705a:	e00a      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 800705c:	bf00      	nop
 800705e:	e008      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 8007060:	bf00      	nop
 8007062:	e006      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 8007064:	bf00      	nop
 8007066:	e004      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 8007068:	bf00      	nop
 800706a:	e002      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 800706c:	bf00      	nop
 800706e:	e000      	b.n	8007072 <USBH_HandleEnum+0x3be>
      break;
 8007070:	bf00      	nop
  }
  return Status;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f804 	bl	80070be <USBH_HandleSof>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b0b      	cmp	r3, #11
 80070ce:	d10a      	bne.n	80070e6 <USBH_HandleSof+0x28>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
  }
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80070fe:	bf00      	nop
}
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800711a:	bf00      	nop
}
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f844 	bl	8008202 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	791b      	ldrb	r3, [r3, #4]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fe91 	bl	8007ea8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	795b      	ldrb	r3, [r3, #5]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fe8b 	bl	8007ea8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ba:	2100      	movs	r1, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f864 	bl	800728a <USBH_GetDescriptor>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	b292      	uxth	r2, r2
 80071dc:	4619      	mov	r1, r3
 80071de:	f000 f918 	bl	8007412 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	331c      	adds	r3, #28
 80071fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071fe:	887b      	ldrh	r3, [r7, #2]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007208:	2100      	movs	r1, #0
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f83d 	bl	800728a <USBH_GetDescriptor>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d107      	bne.n	800722a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800721a:	887b      	ldrh	r3, [r7, #2]
 800721c:	461a      	mov	r2, r3
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f987 	bl	8007534 <USBH_ParseCfgDesc>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	461a      	mov	r2, r3
 8007240:	460b      	mov	r3, r1
 8007242:	72fb      	strb	r3, [r7, #11]
 8007244:	4613      	mov	r3, r2
 8007246:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007250:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007258:	893b      	ldrh	r3, [r7, #8]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	460b      	mov	r3, r1
 800725e:	2100      	movs	r1, #0
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f812 	bl	800728a <USBH_GetDescriptor>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d107      	bne.n	8007280 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007276:	893a      	ldrh	r2, [r7, #8]
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fb24 	bl	80078c8 <USBH_ParseStringDesc>
  }

  return status;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	607b      	str	r3, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	72fb      	strb	r3, [r7, #11]
 8007298:	4613      	mov	r3, r2
 800729a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	789b      	ldrb	r3, [r3, #2]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d11c      	bne.n	80072de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2206      	movs	r2, #6
 80072b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	893a      	ldrh	r2, [r7, #8]
 80072ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80072bc:	893b      	ldrh	r3, [r7, #8]
 80072be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c6:	d104      	bne.n	80072d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f240 4209 	movw	r2, #1033	; 0x409
 80072ce:	829a      	strh	r2, [r3, #20]
 80072d0:	e002      	b.n	80072d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8b3a      	ldrh	r2, [r7, #24]
 80072dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80072de:	8b3b      	ldrh	r3, [r7, #24]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fb3d 	bl	8007964 <USBH_CtlReq>
 80072ea:	4603      	mov	r3, r0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	789b      	ldrb	r3, [r3, #2]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10f      	bne.n	8007328 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2205      	movs	r2, #5
 8007312:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	b29a      	uxth	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fb19 	bl	8007964 <USBH_CtlReq>
 8007332:	4603      	mov	r3, r0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	789b      	ldrb	r3, [r3, #2]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10e      	bne.n	800736e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2209      	movs	r2, #9
 800735a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	887a      	ldrh	r2, [r7, #2]
 8007360:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 faf6 	bl	8007964 <USBH_CtlReq>
 8007378:	4603      	mov	r3, r0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	789b      	ldrb	r3, [r3, #2]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d10f      	bne.n	80073b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2203      	movs	r2, #3
 80073a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80073b6:	2200      	movs	r2, #0
 80073b8:	2100      	movs	r1, #0
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fad2 	bl	8007964 <USBH_CtlReq>
 80073c0:	4603      	mov	r3, r0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	789b      	ldrb	r3, [r3, #2]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d10f      	bne.n	80073fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80073fe:	2200      	movs	r2, #0
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 faae 	bl	8007964 <USBH_CtlReq>
 8007408:	4603      	mov	r3, r0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	4613      	mov	r3, r2
 800741e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	785a      	ldrb	r2, [r3, #1]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	3302      	adds	r3, #2
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	3303      	adds	r3, #3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	b29b      	uxth	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	791a      	ldrb	r2, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	795a      	ldrb	r2, [r3, #5]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	799a      	ldrb	r2, [r3, #6]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	79da      	ldrb	r2, [r3, #7]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	79db      	ldrb	r3, [r3, #7]
 8007470:	2b20      	cmp	r3, #32
 8007472:	dc11      	bgt.n	8007498 <USBH_ParseDevDesc+0x86>
 8007474:	2b08      	cmp	r3, #8
 8007476:	db16      	blt.n	80074a6 <USBH_ParseDevDesc+0x94>
 8007478:	3b08      	subs	r3, #8
 800747a:	2201      	movs	r2, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007488:	2b00      	cmp	r3, #0
 800748a:	bf14      	ite	ne
 800748c:	2301      	movne	r3, #1
 800748e:	2300      	moveq	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <USBH_ParseDevDesc+0x8a>
 8007496:	e006      	b.n	80074a6 <USBH_ParseDevDesc+0x94>
 8007498:	2b40      	cmp	r3, #64	; 0x40
 800749a:	d104      	bne.n	80074a6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	79da      	ldrb	r2, [r3, #7]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	71da      	strb	r2, [r3, #7]
      break;
 80074a4:	e003      	b.n	80074ae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	71da      	strb	r2, [r3, #7]
      break;
 80074ac:	bf00      	nop
  }

  if (length > 8U)
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d939      	bls.n	8007528 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3308      	adds	r3, #8
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	3309      	adds	r3, #9
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	330a      	adds	r3, #10
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	330b      	adds	r3, #11
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	330c      	adds	r3, #12
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	330d      	adds	r3, #13
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	b29b      	uxth	r3, r3
 8007500:	4313      	orrs	r3, r2
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	7b9a      	ldrb	r2, [r3, #14]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	7bda      	ldrb	r2, [r3, #15]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	7c1a      	ldrb	r2, [r3, #16]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	7c5a      	ldrb	r2, [r3, #17]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	745a      	strb	r2, [r3, #17]
  }
}
 8007528:	bf00      	nop
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08c      	sub	sp, #48	; 0x30
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007548:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	785a      	ldrb	r2, [r3, #1]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	3302      	adds	r3, #2
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	3303      	adds	r3, #3
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	b29b      	uxth	r3, r3
 8007588:	4313      	orrs	r3, r2
 800758a:	b29b      	uxth	r3, r3
 800758c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007590:	bf28      	it	cs
 8007592:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007596:	b29a      	uxth	r2, r3
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	791a      	ldrb	r2, [r3, #4]
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	795a      	ldrb	r2, [r3, #5]
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	799a      	ldrb	r2, [r3, #6]
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	79da      	ldrb	r2, [r3, #7]
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	7a1a      	ldrb	r2, [r3, #8]
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b09      	cmp	r3, #9
 80075ca:	d002      	beq.n	80075d2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	2209      	movs	r2, #9
 80075d0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	f240 809d 	bls.w	8007714 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80075da:	2309      	movs	r3, #9
 80075dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075e2:	e081      	b.n	80076e8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075e4:	f107 0316 	add.w	r3, r7, #22
 80075e8:	4619      	mov	r1, r3
 80075ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ec:	f000 f99f 	bl	800792e <USBH_GetNextDesc>
 80075f0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d176      	bne.n	80076e8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b09      	cmp	r3, #9
 8007600:	d002      	beq.n	8007608 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	2209      	movs	r2, #9
 8007606:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800760c:	221a      	movs	r2, #26
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	3308      	adds	r3, #8
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	4413      	add	r3, r2
 8007618:	3302      	adds	r3, #2
 800761a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800761c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761e:	69f8      	ldr	r0, [r7, #28]
 8007620:	f000 f87e 	bl	8007720 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800762e:	e043      	b.n	80076b8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007630:	f107 0316 	add.w	r3, r7, #22
 8007634:	4619      	mov	r1, r3
 8007636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007638:	f000 f979 	bl	800792e <USBH_GetNextDesc>
 800763c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d138      	bne.n	80076b8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	795b      	ldrb	r3, [r3, #5]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d10f      	bne.n	800766e <USBH_ParseCfgDesc+0x13a>
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	799b      	ldrb	r3, [r3, #6]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d10b      	bne.n	800766e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	79db      	ldrb	r3, [r3, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10f      	bne.n	800767e <USBH_ParseCfgDesc+0x14a>
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b09      	cmp	r3, #9
 8007664:	d00b      	beq.n	800767e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	2209      	movs	r2, #9
 800766a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800766c:	e007      	b.n	800767e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b07      	cmp	r3, #7
 8007674:	d004      	beq.n	8007680 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	2207      	movs	r2, #7
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	e000      	b.n	8007680 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800767e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007684:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007688:	3201      	adds	r2, #1
 800768a:	00d2      	lsls	r2, r2, #3
 800768c:	211a      	movs	r1, #26
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	4413      	add	r3, r2
 8007694:	3308      	adds	r3, #8
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	4413      	add	r3, r2
 800769a:	3304      	adds	r3, #4
 800769c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800769e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f86b 	bl	800777e <USBH_ParseEPDesc>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80076ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076b2:	3301      	adds	r3, #1
 80076b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	791b      	ldrb	r3, [r3, #4]
 80076bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d204      	bcs.n	80076ce <USBH_ParseCfgDesc+0x19a>
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	885a      	ldrh	r2, [r3, #2]
 80076c8:	8afb      	ldrh	r3, [r7, #22]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d8b0      	bhi.n	8007630 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d201      	bcs.n	80076de <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80076da:	2303      	movs	r3, #3
 80076dc:	e01c      	b.n	8007718 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80076de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076e2:	3301      	adds	r3, #1
 80076e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d805      	bhi.n	80076fc <USBH_ParseCfgDesc+0x1c8>
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	885a      	ldrh	r2, [r3, #2]
 80076f4:	8afb      	ldrh	r3, [r7, #22]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	f63f af74 	bhi.w	80075e4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	791b      	ldrb	r3, [r3, #4]
 8007700:	2b02      	cmp	r3, #2
 8007702:	bf28      	it	cs
 8007704:	2302      	movcs	r3, #2
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800770c:	429a      	cmp	r2, r3
 800770e:	d201      	bcs.n	8007714 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007710:	2303      	movs	r3, #3
 8007712:	e001      	b.n	8007718 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007718:	4618      	mov	r0, r3
 800771a:	3730      	adds	r7, #48	; 0x30
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	785a      	ldrb	r2, [r3, #1]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	789a      	ldrb	r2, [r3, #2]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	78da      	ldrb	r2, [r3, #3]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	791a      	ldrb	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	795a      	ldrb	r2, [r3, #5]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	799a      	ldrb	r2, [r3, #6]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	79da      	ldrb	r2, [r3, #7]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	7a1a      	ldrb	r2, [r3, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	721a      	strb	r2, [r3, #8]
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	785a      	ldrb	r2, [r3, #1]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	789a      	ldrb	r2, [r3, #2]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	78da      	ldrb	r2, [r3, #3]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3305      	adds	r3, #5
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	799a      	ldrb	r2, [r3, #6]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	889b      	ldrh	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80077da:	2303      	movs	r3, #3
 80077dc:	75fb      	strb	r3, [r7, #23]
 80077de:	e033      	b.n	8007848 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	889b      	ldrh	r3, [r3, #4]
 80077e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077e8:	f023 0307 	bic.w	r3, r3, #7
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	b21a      	sxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3304      	adds	r3, #4
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b299      	uxth	r1, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3305      	adds	r3, #5
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	b29b      	uxth	r3, r3
 800780c:	430b      	orrs	r3, r1
 800780e:	b29b      	uxth	r3, r3
 8007810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007814:	2b00      	cmp	r3, #0
 8007816:	d110      	bne.n	800783a <USBH_ParseEPDesc+0xbc>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b299      	uxth	r1, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3305      	adds	r3, #5
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	b29b      	uxth	r3, r3
 800782c:	430b      	orrs	r3, r1
 800782e:	b29b      	uxth	r3, r3
 8007830:	b21b      	sxth	r3, r3
 8007832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007836:	b21b      	sxth	r3, r3
 8007838:	e001      	b.n	800783e <USBH_ParseEPDesc+0xc0>
 800783a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783e:	4313      	orrs	r3, r2
 8007840:	b21b      	sxth	r3, r3
 8007842:	b29a      	uxth	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800784e:	2b00      	cmp	r3, #0
 8007850:	d116      	bne.n	8007880 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	78db      	ldrb	r3, [r3, #3]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b01      	cmp	r3, #1
 800785c:	d005      	beq.n	800786a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	78db      	ldrb	r3, [r3, #3]
 8007862:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007866:	2b03      	cmp	r3, #3
 8007868:	d127      	bne.n	80078ba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	799b      	ldrb	r3, [r3, #6]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <USBH_ParseEPDesc+0xfc>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	799b      	ldrb	r3, [r3, #6]
 8007876:	2b10      	cmp	r3, #16
 8007878:	d91f      	bls.n	80078ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800787a:	2303      	movs	r3, #3
 800787c:	75fb      	strb	r3, [r7, #23]
 800787e:	e01c      	b.n	80078ba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	78db      	ldrb	r3, [r3, #3]
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	2b01      	cmp	r3, #1
 800788a:	d10a      	bne.n	80078a2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	799b      	ldrb	r3, [r3, #6]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <USBH_ParseEPDesc+0x11e>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	799b      	ldrb	r3, [r3, #6]
 8007898:	2b10      	cmp	r3, #16
 800789a:	d90e      	bls.n	80078ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800789c:	2303      	movs	r3, #3
 800789e:	75fb      	strb	r3, [r7, #23]
 80078a0:	e00b      	b.n	80078ba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	78db      	ldrb	r3, [r3, #3]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d105      	bne.n	80078ba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	799b      	ldrb	r3, [r3, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80078b6:	2303      	movs	r3, #3
 80078b8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3301      	adds	r3, #1
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d120      	bne.n	8007922 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	1e9a      	subs	r2, r3, #2
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	4293      	cmp	r3, r2
 80078ea:	bf28      	it	cs
 80078ec:	4613      	movcs	r3, r2
 80078ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3302      	adds	r3, #2
 80078f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80078f6:	2300      	movs	r3, #0
 80078f8:	82fb      	strh	r3, [r7, #22]
 80078fa:	e00b      	b.n	8007914 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80078fc:	8afb      	ldrh	r3, [r7, #22]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	781a      	ldrb	r2, [r3, #0]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	3301      	adds	r3, #1
 800790c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800790e:	8afb      	ldrh	r3, [r7, #22]
 8007910:	3302      	adds	r3, #2
 8007912:	82fb      	strh	r3, [r7, #22]
 8007914:	8afa      	ldrh	r2, [r7, #22]
 8007916:	8abb      	ldrh	r3, [r7, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	d3ef      	bcc.n	80078fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]
  }
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800792e:	b480      	push	{r7}
 8007930:	b085      	sub	sp, #20
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	881a      	ldrh	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	4413      	add	r3, r2
 8007944:	b29a      	uxth	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4413      	add	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007956:	68fb      	ldr	r3, [r7, #12]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007972:	2301      	movs	r3, #1
 8007974:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	789b      	ldrb	r3, [r3, #2]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d002      	beq.n	8007984 <USBH_CtlReq+0x20>
 800797e:	2b02      	cmp	r3, #2
 8007980:	d00f      	beq.n	80079a2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007982:	e027      	b.n	80079d4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2202      	movs	r2, #2
 800799a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800799c:	2301      	movs	r3, #1
 800799e:	75fb      	strb	r3, [r7, #23]
      break;
 80079a0:	e018      	b.n	80079d4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f81c 	bl	80079e0 <USBH_HandleControl>
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <USBH_CtlReq+0x54>
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d106      	bne.n	80079c6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e005      	b.n	80079d2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d102      	bne.n	80079d2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	709a      	strb	r2, [r3, #2]
      break;
 80079d2:	bf00      	nop
  }
  return status;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7e1b      	ldrb	r3, [r3, #24]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	2b0a      	cmp	r3, #10
 80079f8:	f200 8156 	bhi.w	8007ca8 <USBH_HandleControl+0x2c8>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <USBH_HandleControl+0x24>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a31 	.word	0x08007a31
 8007a08:	08007a4b 	.word	0x08007a4b
 8007a0c:	08007ab5 	.word	0x08007ab5
 8007a10:	08007adb 	.word	0x08007adb
 8007a14:	08007b13 	.word	0x08007b13
 8007a18:	08007b3d 	.word	0x08007b3d
 8007a1c:	08007b8f 	.word	0x08007b8f
 8007a20:	08007bb1 	.word	0x08007bb1
 8007a24:	08007bed 	.word	0x08007bed
 8007a28:	08007c13 	.word	0x08007c13
 8007a2c:	08007c51 	.word	0x08007c51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f103 0110 	add.w	r1, r3, #16
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f943 	bl	8007cc8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	761a      	strb	r2, [r3, #24]
      break;
 8007a48:	e139      	b.n	8007cbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	795b      	ldrb	r3, [r3, #5]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fcc5 	bl	80083e0 <USBH_LL_GetURBState>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d11e      	bne.n	8007a9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
 8007a64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8adb      	ldrh	r3, [r3, #22]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007a72:	7b7b      	ldrb	r3, [r7, #13]
 8007a74:	2b80      	cmp	r3, #128	; 0x80
 8007a76:	d103      	bne.n	8007a80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2203      	movs	r2, #3
 8007a7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a7e:	e115      	b.n	8007cac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2205      	movs	r2, #5
 8007a84:	761a      	strb	r2, [r3, #24]
      break;
 8007a86:	e111      	b.n	8007cac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007a88:	7b7b      	ldrb	r3, [r7, #13]
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d103      	bne.n	8007a96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2209      	movs	r2, #9
 8007a92:	761a      	strb	r2, [r3, #24]
      break;
 8007a94:	e10a      	b.n	8007cac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2207      	movs	r2, #7
 8007a9a:	761a      	strb	r2, [r3, #24]
      break;
 8007a9c:	e106      	b.n	8007cac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d003      	beq.n	8007aac <USBH_HandleControl+0xcc>
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	f040 8100 	bne.w	8007cac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	220b      	movs	r2, #11
 8007ab0:	761a      	strb	r2, [r3, #24]
      break;
 8007ab2:	e0fb      	b.n	8007cac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6899      	ldr	r1, [r3, #8]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	899a      	ldrh	r2, [r3, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	791b      	ldrb	r3, [r3, #4]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f93a 	bl	8007d46 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	761a      	strb	r2, [r3, #24]
      break;
 8007ad8:	e0f1      	b.n	8007cbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	791b      	ldrb	r3, [r3, #4]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc7d 	bl	80083e0 <USBH_LL_GetURBState>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d102      	bne.n	8007af6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2209      	movs	r2, #9
 8007af4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d102      	bne.n	8007b02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007afc:	2303      	movs	r3, #3
 8007afe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b00:	e0d6      	b.n	8007cb0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	f040 80d3 	bne.w	8007cb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	220b      	movs	r2, #11
 8007b0e:	761a      	strb	r2, [r3, #24]
      break;
 8007b10:	e0ce      	b.n	8007cb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6899      	ldr	r1, [r3, #8]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	899a      	ldrh	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	795b      	ldrb	r3, [r3, #5]
 8007b1e:	2001      	movs	r0, #1
 8007b20:	9000      	str	r0, [sp, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f8ea 	bl	8007cfc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2206      	movs	r2, #6
 8007b38:	761a      	strb	r2, [r3, #24]
      break;
 8007b3a:	e0c0      	b.n	8007cbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	795b      	ldrb	r3, [r3, #5]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc4c 	bl	80083e0 <USBH_LL_GetURBState>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d103      	bne.n	8007b5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2207      	movs	r2, #7
 8007b56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b58:	e0ac      	b.n	8007cb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d105      	bne.n	8007b6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	220c      	movs	r2, #12
 8007b64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b66:	2303      	movs	r3, #3
 8007b68:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6a:	e0a3      	b.n	8007cb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d103      	bne.n	8007b7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2205      	movs	r2, #5
 8007b76:	761a      	strb	r2, [r3, #24]
      break;
 8007b78:	e09c      	b.n	8007cb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	f040 8099 	bne.w	8007cb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	220b      	movs	r2, #11
 8007b86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8c:	e092      	b.n	8007cb4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8d5 	bl	8007d46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2208      	movs	r2, #8
 8007bac:	761a      	strb	r2, [r3, #24]

      break;
 8007bae:	e086      	b.n	8007cbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	791b      	ldrb	r3, [r3, #4]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fc12 	bl	80083e0 <USBH_LL_GetURBState>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d105      	bne.n	8007bd2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	220d      	movs	r2, #13
 8007bca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007bd0:	e072      	b.n	8007cb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d103      	bne.n	8007be0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	220b      	movs	r2, #11
 8007bdc:	761a      	strb	r2, [r3, #24]
      break;
 8007bde:	e06b      	b.n	8007cb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d168      	bne.n	8007cb8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007be6:	2303      	movs	r3, #3
 8007be8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bea:	e065      	b.n	8007cb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	795b      	ldrb	r3, [r3, #5]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	9200      	str	r2, [sp, #0]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f87f 	bl	8007cfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	761a      	strb	r2, [r3, #24]
      break;
 8007c10:	e055      	b.n	8007cbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	795b      	ldrb	r3, [r3, #5]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fbe1 	bl	80083e0 <USBH_LL_GetURBState>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d105      	bne.n	8007c34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	220d      	movs	r2, #13
 8007c30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c32:	e043      	b.n	8007cbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d103      	bne.n	8007c42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2209      	movs	r2, #9
 8007c3e:	761a      	strb	r2, [r3, #24]
      break;
 8007c40:	e03c      	b.n	8007cbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d139      	bne.n	8007cbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	220b      	movs	r2, #11
 8007c4c:	761a      	strb	r2, [r3, #24]
      break;
 8007c4e:	e035      	b.n	8007cbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7e5b      	ldrb	r3, [r3, #25]
 8007c54:	3301      	adds	r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	765a      	strb	r2, [r3, #25]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7e5b      	ldrb	r3, [r3, #25]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d806      	bhi.n	8007c72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007c70:	e025      	b.n	8007cbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c78:	2106      	movs	r1, #6
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	795b      	ldrb	r3, [r3, #5]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f90c 	bl	8007ea8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	791b      	ldrb	r3, [r3, #4]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f906 	bl	8007ea8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca6:	e00a      	b.n	8007cbe <USBH_HandleControl+0x2de>

    default:
      break;
 8007ca8:	bf00      	nop
 8007caa:	e008      	b.n	8007cbe <USBH_HandleControl+0x2de>
      break;
 8007cac:	bf00      	nop
 8007cae:	e006      	b.n	8007cbe <USBH_HandleControl+0x2de>
      break;
 8007cb0:	bf00      	nop
 8007cb2:	e004      	b.n	8007cbe <USBH_HandleControl+0x2de>
      break;
 8007cb4:	bf00      	nop
 8007cb6:	e002      	b.n	8007cbe <USBH_HandleControl+0x2de>
      break;
 8007cb8:	bf00      	nop
 8007cba:	e000      	b.n	8007cbe <USBH_HandleControl+0x2de>
      break;
 8007cbc:	bf00      	nop
  }

  return status;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af04      	add	r7, sp, #16
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cd6:	79f9      	ldrb	r1, [r7, #7]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	2308      	movs	r3, #8
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2200      	movs	r2, #0
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fb46 	bl	800837e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af04      	add	r7, sp, #16
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4611      	mov	r1, r2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	80fb      	strh	r3, [r7, #6]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d20:	7979      	ldrb	r1, [r7, #5]
 8007d22:	7e3b      	ldrb	r3, [r7, #24]
 8007d24:	9303      	str	r3, [sp, #12]
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	2300      	movs	r3, #0
 8007d34:	2200      	movs	r2, #0
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fb21 	bl	800837e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b088      	sub	sp, #32
 8007d4a:	af04      	add	r7, sp, #16
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	4611      	mov	r1, r2
 8007d52:	461a      	mov	r2, r3
 8007d54:	460b      	mov	r3, r1
 8007d56:	80fb      	strh	r3, [r7, #6]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d5c:	7979      	ldrb	r1, [r7, #5]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9303      	str	r3, [sp, #12]
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	9302      	str	r3, [sp, #8]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2201      	movs	r2, #1
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 fb03 	bl	800837e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007d78:	2300      	movs	r3, #0

}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b088      	sub	sp, #32
 8007d86:	af04      	add	r7, sp, #16
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	461a      	mov	r2, r3
 8007d90:	460b      	mov	r3, r1
 8007d92:	80fb      	strh	r3, [r7, #6]
 8007d94:	4613      	mov	r3, r2
 8007d96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007da6:	7979      	ldrb	r1, [r7, #5]
 8007da8:	7e3b      	ldrb	r3, [r7, #24]
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	9302      	str	r3, [sp, #8]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	2301      	movs	r3, #1
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	2302      	movs	r3, #2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 fade 	bl	800837e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af04      	add	r7, sp, #16
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	80fb      	strh	r3, [r7, #6]
 8007dde:	4613      	mov	r3, r2
 8007de0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007de2:	7979      	ldrb	r1, [r7, #5]
 8007de4:	2300      	movs	r3, #0
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	9302      	str	r3, [sp, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2301      	movs	r3, #1
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2302      	movs	r3, #2
 8007df6:	2201      	movs	r2, #1
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fac0 	bl	800837e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	4608      	mov	r0, r1
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	70fb      	strb	r3, [r7, #3]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70bb      	strb	r3, [r7, #2]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007e22:	7878      	ldrb	r0, [r7, #1]
 8007e24:	78ba      	ldrb	r2, [r7, #2]
 8007e26:	78f9      	ldrb	r1, [r7, #3]
 8007e28:	8b3b      	ldrh	r3, [r7, #24]
 8007e2a:	9302      	str	r3, [sp, #8]
 8007e2c:	7d3b      	ldrb	r3, [r7, #20]
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	7c3b      	ldrb	r3, [r7, #16]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4603      	mov	r3, r0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa53 	bl	80082e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa72 	bl	8008340 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f836 	bl	8007ee4 <USBH_GetFreePipe>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e7c:	89fb      	ldrh	r3, [r7, #14]
 8007e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00a      	beq.n	8007e9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	33e0      	adds	r3, #224	; 0xe0
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e9c:	89fb      	ldrh	r3, [r7, #14]
 8007e9e:	b2db      	uxtb	r3, r3
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d80d      	bhi.n	8007ed6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	33e0      	adds	r3, #224	; 0xe0
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	33e0      	adds	r3, #224	; 0xe0
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	e00f      	b.n	8007f16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	33e0      	adds	r3, #224	; 0xe0
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	e007      	b.n	8007f20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	3301      	adds	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b0f      	cmp	r3, #15
 8007f1a:	d9ec      	bls.n	8007ef6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f30:	2201      	movs	r2, #1
 8007f32:	490e      	ldr	r1, [pc, #56]	; (8007f6c <MX_USB_HOST_Init+0x40>)
 8007f34:	480e      	ldr	r0, [pc, #56]	; (8007f70 <MX_USB_HOST_Init+0x44>)
 8007f36:	f7fe fba7 	bl	8006688 <USBH_Init>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f40:	f7f8 fdb0 	bl	8000aa4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f44:	490b      	ldr	r1, [pc, #44]	; (8007f74 <MX_USB_HOST_Init+0x48>)
 8007f46:	480a      	ldr	r0, [pc, #40]	; (8007f70 <MX_USB_HOST_Init+0x44>)
 8007f48:	f7fe fc2c 	bl	80067a4 <USBH_RegisterClass>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f52:	f7f8 fda7 	bl	8000aa4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f56:	4806      	ldr	r0, [pc, #24]	; (8007f70 <MX_USB_HOST_Init+0x44>)
 8007f58:	f7fe fcb0 	bl	80068bc <USBH_Start>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f62:	f7f8 fd9f 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08007f8d 	.word	0x08007f8d
 8007f70:	20000240 	.word	0x20000240
 8007f74:	2000000c 	.word	0x2000000c

08007f78 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007f7c:	4802      	ldr	r0, [pc, #8]	; (8007f88 <MX_USB_HOST_Process+0x10>)
 8007f7e:	f7fe fcad 	bl	80068dc <USBH_Process>
}
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000240 	.word	0x20000240

08007f8c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d819      	bhi.n	8007fd4 <USBH_UserProcess+0x48>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <USBH_UserProcess+0x1c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fd5 	.word	0x08007fd5
 8007fac:	08007fc5 	.word	0x08007fc5
 8007fb0:	08007fd5 	.word	0x08007fd5
 8007fb4:	08007fcd 	.word	0x08007fcd
 8007fb8:	08007fbd 	.word	0x08007fbd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <USBH_UserProcess+0x58>)
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	701a      	strb	r2, [r3, #0]
  break;
 8007fc2:	e008      	b.n	8007fd6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007fc4:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <USBH_UserProcess+0x58>)
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	701a      	strb	r2, [r3, #0]
  break;
 8007fca:	e004      	b.n	8007fd6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <USBH_UserProcess+0x58>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	701a      	strb	r2, [r3, #0]
  break;
 8007fd2:	e000      	b.n	8007fd6 <USBH_UserProcess+0x4a>

  default:
  break;
 8007fd4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000618 	.word	0x20000618

08007fe8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008008:	d147      	bne.n	800809a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	4b25      	ldr	r3, [pc, #148]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	4a24      	ldr	r2, [pc, #144]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	6313      	str	r3, [r2, #48]	; 0x30
 800801a:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800802a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008034:	f107 0314 	add.w	r3, r7, #20
 8008038:	4619      	mov	r1, r3
 800803a:	481b      	ldr	r0, [pc, #108]	; (80080a8 <HAL_HCD_MspInit+0xc0>)
 800803c:	f7f9 f916 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008040:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008046:	2302      	movs	r3, #2
 8008048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800804e:	2300      	movs	r3, #0
 8008050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008052:	230a      	movs	r3, #10
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008056:	f107 0314 	add.w	r3, r7, #20
 800805a:	4619      	mov	r1, r3
 800805c:	4812      	ldr	r0, [pc, #72]	; (80080a8 <HAL_HCD_MspInit+0xc0>)
 800805e:	f7f9 f905 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008062:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008066:	4a0f      	ldr	r2, [pc, #60]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806c:	6353      	str	r3, [r2, #52]	; 0x34
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800807c:	6453      	str	r3, [r2, #68]	; 0x44
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <HAL_HCD_MspInit+0xbc>)
 8008080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	2043      	movs	r0, #67	; 0x43
 8008090:	f7f9 f8b5 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008094:	2043      	movs	r0, #67	; 0x43
 8008096:	f7f9 f8ce 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800809a:	bf00      	nop
 800809c:	3728      	adds	r7, #40	; 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40023800 	.word	0x40023800
 80080a8:	40020000 	.word	0x40020000

080080ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe ffed 	bl	800709a <USBH_LL_IncTimer>
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff f825 	bl	8007126 <USBH_LL_Connect>
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff f82e 	bl	8007154 <USBH_LL_Disconnect>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
 800810c:	4613      	mov	r3, r2
 800810e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe ffdf 	bl	80070ee <USBH_LL_PortEnabled>
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe ffdf 	bl	800710a <USBH_LL_PortDisabled>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008162:	2b01      	cmp	r3, #1
 8008164:	d12a      	bne.n	80081bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008166:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <USBH_LL_Init+0x74>)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <USBH_LL_Init+0x74>)
 8008172:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <USBH_LL_Init+0x74>)
 8008178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800817c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <USBH_LL_Init+0x74>)
 8008180:	2208      	movs	r2, #8
 8008182:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008184:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <USBH_LL_Init+0x74>)
 8008186:	2201      	movs	r2, #1
 8008188:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <USBH_LL_Init+0x74>)
 800818c:	2200      	movs	r2, #0
 800818e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008190:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <USBH_LL_Init+0x74>)
 8008192:	2202      	movs	r2, #2
 8008194:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008196:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <USBH_LL_Init+0x74>)
 8008198:	2200      	movs	r2, #0
 800819a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800819c:	480a      	ldr	r0, [pc, #40]	; (80081c8 <USBH_LL_Init+0x74>)
 800819e:	f7f9 fa34 	bl	800160a <HAL_HCD_Init>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80081a8:	f7f8 fc7c 	bl	8000aa4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80081ac:	4806      	ldr	r0, [pc, #24]	; (80081c8 <USBH_LL_Init+0x74>)
 80081ae:	f7f9 fe18 	bl	8001de2 <HAL_HCD_GetCurrentFrame>
 80081b2:	4603      	mov	r3, r0
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7fe ff60 	bl	800707c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	2000061c 	.word	0x2000061c

080081cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f9 fd87 	bl	8001cf6 <HAL_HCD_Start>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 f95c 	bl	80084ac <USBH_Get_USB_Status>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008218:	4618      	mov	r0, r3
 800821a:	f7f9 fd8f 	bl	8001d3c <HAL_HCD_Stop>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f941 	bl	80084ac <USBH_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824a:	4618      	mov	r0, r3
 800824c:	f7f9 fdd7 	bl	8001dfe <HAL_HCD_GetCurrentSpeed>
 8008250:	4603      	mov	r3, r0
 8008252:	2b02      	cmp	r3, #2
 8008254:	d00c      	beq.n	8008270 <USBH_LL_GetSpeed+0x38>
 8008256:	2b02      	cmp	r3, #2
 8008258:	d80d      	bhi.n	8008276 <USBH_LL_GetSpeed+0x3e>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <USBH_LL_GetSpeed+0x2c>
 800825e:	2b01      	cmp	r3, #1
 8008260:	d003      	beq.n	800826a <USBH_LL_GetSpeed+0x32>
 8008262:	e008      	b.n	8008276 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
    break;
 8008268:	e008      	b.n	800827c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800826a:	2301      	movs	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
    break;
 800826e:	e005      	b.n	800827c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008270:	2302      	movs	r3, #2
 8008272:	73fb      	strb	r3, [r7, #15]
    break;
 8008274:	e002      	b.n	800827c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008276:	2301      	movs	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
    break;
 800827a:	bf00      	nop
  }
  return  speed;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800829c:	4618      	mov	r0, r3
 800829e:	f7f9 fd6a 	bl	8001d76 <HAL_HCD_ResetPort>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 f8ff 	bl	80084ac <USBH_Get_USB_Status>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f9 fd71 	bl	8001dba <HAL_HCD_HC_GetXferCount>
 80082d8:	4603      	mov	r3, r0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082e2:	b590      	push	{r4, r7, lr}
 80082e4:	b089      	sub	sp, #36	; 0x24
 80082e6:	af04      	add	r7, sp, #16
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	4608      	mov	r0, r1
 80082ec:	4611      	mov	r1, r2
 80082ee:	461a      	mov	r2, r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70bb      	strb	r3, [r7, #2]
 80082f8:	4613      	mov	r3, r2
 80082fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800830a:	787c      	ldrb	r4, [r7, #1]
 800830c:	78ba      	ldrb	r2, [r7, #2]
 800830e:	78f9      	ldrb	r1, [r7, #3]
 8008310:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008312:	9302      	str	r3, [sp, #8]
 8008314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	4623      	mov	r3, r4
 8008322:	f7f9 f9d4 	bl	80016ce <HAL_HCD_HC_Init>
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	4618      	mov	r0, r3
 800832e:	f000 f8bd 	bl	80084ac <USBH_Get_USB_Status>
 8008332:	4603      	mov	r3, r0
 8008334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008336:	7bbb      	ldrb	r3, [r7, #14]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bd90      	pop	{r4, r7, pc}

08008340 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	4611      	mov	r1, r2
 800835e:	4618      	mov	r0, r3
 8008360:	f7f9 fa44 	bl	80017ec <HAL_HCD_HC_Halt>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f89e 	bl	80084ac <USBH_Get_USB_Status>
 8008370:	4603      	mov	r3, r0
 8008372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008374:	7bbb      	ldrb	r3, [r7, #14]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800837e:	b590      	push	{r4, r7, lr}
 8008380:	b089      	sub	sp, #36	; 0x24
 8008382:	af04      	add	r7, sp, #16
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	461a      	mov	r2, r3
 800838c:	4603      	mov	r3, r0
 800838e:	70fb      	strb	r3, [r7, #3]
 8008390:	460b      	mov	r3, r1
 8008392:	70bb      	strb	r3, [r7, #2]
 8008394:	4613      	mov	r3, r2
 8008396:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80083a6:	787c      	ldrb	r4, [r7, #1]
 80083a8:	78ba      	ldrb	r2, [r7, #2]
 80083aa:	78f9      	ldrb	r1, [r7, #3]
 80083ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083b4:	9302      	str	r3, [sp, #8]
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	4623      	mov	r3, r4
 80083c2:	f7f9 fa37 	bl	8001834 <HAL_HCD_HC_SubmitRequest>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 f86d 	bl	80084ac <USBH_Get_USB_Status>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd90      	pop	{r4, r7, pc}

080083e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7f9 fccb 	bl	8001d92 <HAL_HCD_HC_GetURBState>
 80083fc:	4603      	mov	r3, r0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008418:	2b01      	cmp	r3, #1
 800841a:	d103      	bne.n	8008424 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f870 	bl	8008504 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008424:	20c8      	movs	r0, #200	; 0xc8
 8008426:	f7f8 fdeb 	bl	8001000 <HAL_Delay>
  return USBH_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
 8008440:	4613      	mov	r3, r2
 8008442:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800844a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	212c      	movs	r1, #44	; 0x2c
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	4413      	add	r3, r2
 8008458:	333b      	adds	r3, #59	; 0x3b
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	212c      	movs	r1, #44	; 0x2c
 8008466:	fb01 f303 	mul.w	r3, r1, r3
 800846a:	4413      	add	r3, r2
 800846c:	3354      	adds	r3, #84	; 0x54
 800846e:	78ba      	ldrb	r2, [r7, #2]
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e008      	b.n	8008486 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	212c      	movs	r1, #44	; 0x2c
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	4413      	add	r3, r2
 8008480:	3355      	adds	r3, #85	; 0x55
 8008482:	78ba      	ldrb	r2, [r7, #2]
 8008484:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7f8 fdaf 	bl	8001000 <HAL_Delay>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d817      	bhi.n	80084f0 <USBH_Get_USB_Status+0x44>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USBH_Get_USB_Status+0x1c>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	080084df 	.word	0x080084df
 80084d0:	080084e5 	.word	0x080084e5
 80084d4:	080084eb 	.word	0x080084eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
    break;
 80084dc:	e00b      	b.n	80084f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084de:	2302      	movs	r3, #2
 80084e0:	73fb      	strb	r3, [r7, #15]
    break;
 80084e2:	e008      	b.n	80084f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
    break;
 80084e8:	e005      	b.n	80084f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	73fb      	strb	r3, [r7, #15]
    break;
 80084ee:	e002      	b.n	80084f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80084f0:	2302      	movs	r3, #2
 80084f2:	73fb      	strb	r3, [r7, #15]
    break;
 80084f4:	bf00      	nop
  }
  return usb_status;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
 800851c:	e001      	b.n	8008522 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800851e:	2301      	movs	r3, #1
 8008520:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	461a      	mov	r2, r3
 8008526:	2101      	movs	r1, #1
 8008528:	4803      	ldr	r0, [pc, #12]	; (8008538 <MX_DriverVbusFS+0x34>)
 800852a:	f7f9 f83b 	bl	80015a4 <HAL_GPIO_WritePin>
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40020800 	.word	0x40020800

0800853c <__errno>:
 800853c:	4b01      	ldr	r3, [pc, #4]	; (8008544 <__errno+0x8>)
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	2000002c 	.word	0x2000002c

08008548 <__libc_init_array>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4d0d      	ldr	r5, [pc, #52]	; (8008580 <__libc_init_array+0x38>)
 800854c:	4c0d      	ldr	r4, [pc, #52]	; (8008584 <__libc_init_array+0x3c>)
 800854e:	1b64      	subs	r4, r4, r5
 8008550:	10a4      	asrs	r4, r4, #2
 8008552:	2600      	movs	r6, #0
 8008554:	42a6      	cmp	r6, r4
 8008556:	d109      	bne.n	800856c <__libc_init_array+0x24>
 8008558:	4d0b      	ldr	r5, [pc, #44]	; (8008588 <__libc_init_array+0x40>)
 800855a:	4c0c      	ldr	r4, [pc, #48]	; (800858c <__libc_init_array+0x44>)
 800855c:	f000 f92e 	bl	80087bc <_init>
 8008560:	1b64      	subs	r4, r4, r5
 8008562:	10a4      	asrs	r4, r4, #2
 8008564:	2600      	movs	r6, #0
 8008566:	42a6      	cmp	r6, r4
 8008568:	d105      	bne.n	8008576 <__libc_init_array+0x2e>
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008570:	4798      	blx	r3
 8008572:	3601      	adds	r6, #1
 8008574:	e7ee      	b.n	8008554 <__libc_init_array+0xc>
 8008576:	f855 3b04 	ldr.w	r3, [r5], #4
 800857a:	4798      	blx	r3
 800857c:	3601      	adds	r6, #1
 800857e:	e7f2      	b.n	8008566 <__libc_init_array+0x1e>
 8008580:	080087f8 	.word	0x080087f8
 8008584:	080087f8 	.word	0x080087f8
 8008588:	080087f8 	.word	0x080087f8
 800858c:	080087fc 	.word	0x080087fc

08008590 <malloc>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <malloc+0xc>)
 8008592:	4601      	mov	r1, r0
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	f000 b87f 	b.w	8008698 <_malloc_r>
 800859a:	bf00      	nop
 800859c:	2000002c 	.word	0x2000002c

080085a0 <free>:
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <free+0xc>)
 80085a2:	4601      	mov	r1, r0
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	f000 b80b 	b.w	80085c0 <_free_r>
 80085aa:	bf00      	nop
 80085ac:	2000002c 	.word	0x2000002c

080085b0 <memset>:
 80085b0:	4402      	add	r2, r0
 80085b2:	4603      	mov	r3, r0
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d100      	bne.n	80085ba <memset+0xa>
 80085b8:	4770      	bx	lr
 80085ba:	f803 1b01 	strb.w	r1, [r3], #1
 80085be:	e7f9      	b.n	80085b4 <memset+0x4>

080085c0 <_free_r>:
 80085c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c2:	2900      	cmp	r1, #0
 80085c4:	d044      	beq.n	8008650 <_free_r+0x90>
 80085c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f1a1 0404 	sub.w	r4, r1, #4
 80085d2:	bfb8      	it	lt
 80085d4:	18e4      	addlt	r4, r4, r3
 80085d6:	f000 f8e3 	bl	80087a0 <__malloc_lock>
 80085da:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <_free_r+0x94>)
 80085dc:	9801      	ldr	r0, [sp, #4]
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	b933      	cbnz	r3, 80085f0 <_free_r+0x30>
 80085e2:	6063      	str	r3, [r4, #4]
 80085e4:	6014      	str	r4, [r2, #0]
 80085e6:	b003      	add	sp, #12
 80085e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ec:	f000 b8de 	b.w	80087ac <__malloc_unlock>
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d908      	bls.n	8008606 <_free_r+0x46>
 80085f4:	6825      	ldr	r5, [r4, #0]
 80085f6:	1961      	adds	r1, r4, r5
 80085f8:	428b      	cmp	r3, r1
 80085fa:	bf01      	itttt	eq
 80085fc:	6819      	ldreq	r1, [r3, #0]
 80085fe:	685b      	ldreq	r3, [r3, #4]
 8008600:	1949      	addeq	r1, r1, r5
 8008602:	6021      	streq	r1, [r4, #0]
 8008604:	e7ed      	b.n	80085e2 <_free_r+0x22>
 8008606:	461a      	mov	r2, r3
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	b10b      	cbz	r3, 8008610 <_free_r+0x50>
 800860c:	42a3      	cmp	r3, r4
 800860e:	d9fa      	bls.n	8008606 <_free_r+0x46>
 8008610:	6811      	ldr	r1, [r2, #0]
 8008612:	1855      	adds	r5, r2, r1
 8008614:	42a5      	cmp	r5, r4
 8008616:	d10b      	bne.n	8008630 <_free_r+0x70>
 8008618:	6824      	ldr	r4, [r4, #0]
 800861a:	4421      	add	r1, r4
 800861c:	1854      	adds	r4, r2, r1
 800861e:	42a3      	cmp	r3, r4
 8008620:	6011      	str	r1, [r2, #0]
 8008622:	d1e0      	bne.n	80085e6 <_free_r+0x26>
 8008624:	681c      	ldr	r4, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	6053      	str	r3, [r2, #4]
 800862a:	4421      	add	r1, r4
 800862c:	6011      	str	r1, [r2, #0]
 800862e:	e7da      	b.n	80085e6 <_free_r+0x26>
 8008630:	d902      	bls.n	8008638 <_free_r+0x78>
 8008632:	230c      	movs	r3, #12
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	e7d6      	b.n	80085e6 <_free_r+0x26>
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	1961      	adds	r1, r4, r5
 800863c:	428b      	cmp	r3, r1
 800863e:	bf04      	itt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	6063      	str	r3, [r4, #4]
 8008646:	bf04      	itt	eq
 8008648:	1949      	addeq	r1, r1, r5
 800864a:	6021      	streq	r1, [r4, #0]
 800864c:	6054      	str	r4, [r2, #4]
 800864e:	e7ca      	b.n	80085e6 <_free_r+0x26>
 8008650:	b003      	add	sp, #12
 8008652:	bd30      	pop	{r4, r5, pc}
 8008654:	20000920 	.word	0x20000920

08008658 <sbrk_aligned>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4e0e      	ldr	r6, [pc, #56]	; (8008694 <sbrk_aligned+0x3c>)
 800865c:	460c      	mov	r4, r1
 800865e:	6831      	ldr	r1, [r6, #0]
 8008660:	4605      	mov	r5, r0
 8008662:	b911      	cbnz	r1, 800866a <sbrk_aligned+0x12>
 8008664:	f000 f88c 	bl	8008780 <_sbrk_r>
 8008668:	6030      	str	r0, [r6, #0]
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f887 	bl	8008780 <_sbrk_r>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d00a      	beq.n	800868c <sbrk_aligned+0x34>
 8008676:	1cc4      	adds	r4, r0, #3
 8008678:	f024 0403 	bic.w	r4, r4, #3
 800867c:	42a0      	cmp	r0, r4
 800867e:	d007      	beq.n	8008690 <sbrk_aligned+0x38>
 8008680:	1a21      	subs	r1, r4, r0
 8008682:	4628      	mov	r0, r5
 8008684:	f000 f87c 	bl	8008780 <_sbrk_r>
 8008688:	3001      	adds	r0, #1
 800868a:	d101      	bne.n	8008690 <sbrk_aligned+0x38>
 800868c:	f04f 34ff 	mov.w	r4, #4294967295
 8008690:	4620      	mov	r0, r4
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	20000924 	.word	0x20000924

08008698 <_malloc_r>:
 8008698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869c:	1ccd      	adds	r5, r1, #3
 800869e:	f025 0503 	bic.w	r5, r5, #3
 80086a2:	3508      	adds	r5, #8
 80086a4:	2d0c      	cmp	r5, #12
 80086a6:	bf38      	it	cc
 80086a8:	250c      	movcc	r5, #12
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	4607      	mov	r7, r0
 80086ae:	db01      	blt.n	80086b4 <_malloc_r+0x1c>
 80086b0:	42a9      	cmp	r1, r5
 80086b2:	d905      	bls.n	80086c0 <_malloc_r+0x28>
 80086b4:	230c      	movs	r3, #12
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	2600      	movs	r6, #0
 80086ba:	4630      	mov	r0, r6
 80086bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c0:	4e2e      	ldr	r6, [pc, #184]	; (800877c <_malloc_r+0xe4>)
 80086c2:	f000 f86d 	bl	80087a0 <__malloc_lock>
 80086c6:	6833      	ldr	r3, [r6, #0]
 80086c8:	461c      	mov	r4, r3
 80086ca:	bb34      	cbnz	r4, 800871a <_malloc_r+0x82>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4638      	mov	r0, r7
 80086d0:	f7ff ffc2 	bl	8008658 <sbrk_aligned>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	4604      	mov	r4, r0
 80086d8:	d14d      	bne.n	8008776 <_malloc_r+0xde>
 80086da:	6834      	ldr	r4, [r6, #0]
 80086dc:	4626      	mov	r6, r4
 80086de:	2e00      	cmp	r6, #0
 80086e0:	d140      	bne.n	8008764 <_malloc_r+0xcc>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	4631      	mov	r1, r6
 80086e6:	4638      	mov	r0, r7
 80086e8:	eb04 0803 	add.w	r8, r4, r3
 80086ec:	f000 f848 	bl	8008780 <_sbrk_r>
 80086f0:	4580      	cmp	r8, r0
 80086f2:	d13a      	bne.n	800876a <_malloc_r+0xd2>
 80086f4:	6821      	ldr	r1, [r4, #0]
 80086f6:	3503      	adds	r5, #3
 80086f8:	1a6d      	subs	r5, r5, r1
 80086fa:	f025 0503 	bic.w	r5, r5, #3
 80086fe:	3508      	adds	r5, #8
 8008700:	2d0c      	cmp	r5, #12
 8008702:	bf38      	it	cc
 8008704:	250c      	movcc	r5, #12
 8008706:	4629      	mov	r1, r5
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff ffa5 	bl	8008658 <sbrk_aligned>
 800870e:	3001      	adds	r0, #1
 8008710:	d02b      	beq.n	800876a <_malloc_r+0xd2>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	442b      	add	r3, r5
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	e00e      	b.n	8008738 <_malloc_r+0xa0>
 800871a:	6822      	ldr	r2, [r4, #0]
 800871c:	1b52      	subs	r2, r2, r5
 800871e:	d41e      	bmi.n	800875e <_malloc_r+0xc6>
 8008720:	2a0b      	cmp	r2, #11
 8008722:	d916      	bls.n	8008752 <_malloc_r+0xba>
 8008724:	1961      	adds	r1, r4, r5
 8008726:	42a3      	cmp	r3, r4
 8008728:	6025      	str	r5, [r4, #0]
 800872a:	bf18      	it	ne
 800872c:	6059      	strne	r1, [r3, #4]
 800872e:	6863      	ldr	r3, [r4, #4]
 8008730:	bf08      	it	eq
 8008732:	6031      	streq	r1, [r6, #0]
 8008734:	5162      	str	r2, [r4, r5]
 8008736:	604b      	str	r3, [r1, #4]
 8008738:	4638      	mov	r0, r7
 800873a:	f104 060b 	add.w	r6, r4, #11
 800873e:	f000 f835 	bl	80087ac <__malloc_unlock>
 8008742:	f026 0607 	bic.w	r6, r6, #7
 8008746:	1d23      	adds	r3, r4, #4
 8008748:	1af2      	subs	r2, r6, r3
 800874a:	d0b6      	beq.n	80086ba <_malloc_r+0x22>
 800874c:	1b9b      	subs	r3, r3, r6
 800874e:	50a3      	str	r3, [r4, r2]
 8008750:	e7b3      	b.n	80086ba <_malloc_r+0x22>
 8008752:	6862      	ldr	r2, [r4, #4]
 8008754:	42a3      	cmp	r3, r4
 8008756:	bf0c      	ite	eq
 8008758:	6032      	streq	r2, [r6, #0]
 800875a:	605a      	strne	r2, [r3, #4]
 800875c:	e7ec      	b.n	8008738 <_malloc_r+0xa0>
 800875e:	4623      	mov	r3, r4
 8008760:	6864      	ldr	r4, [r4, #4]
 8008762:	e7b2      	b.n	80086ca <_malloc_r+0x32>
 8008764:	4634      	mov	r4, r6
 8008766:	6876      	ldr	r6, [r6, #4]
 8008768:	e7b9      	b.n	80086de <_malloc_r+0x46>
 800876a:	230c      	movs	r3, #12
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4638      	mov	r0, r7
 8008770:	f000 f81c 	bl	80087ac <__malloc_unlock>
 8008774:	e7a1      	b.n	80086ba <_malloc_r+0x22>
 8008776:	6025      	str	r5, [r4, #0]
 8008778:	e7de      	b.n	8008738 <_malloc_r+0xa0>
 800877a:	bf00      	nop
 800877c:	20000920 	.word	0x20000920

08008780 <_sbrk_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d06      	ldr	r5, [pc, #24]	; (800879c <_sbrk_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	f7f8 fb54 	bl	8000e38 <_sbrk>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_sbrk_r+0x1a>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_sbrk_r+0x1a>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20000928 	.word	0x20000928

080087a0 <__malloc_lock>:
 80087a0:	4801      	ldr	r0, [pc, #4]	; (80087a8 <__malloc_lock+0x8>)
 80087a2:	f000 b809 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 80087a6:	bf00      	nop
 80087a8:	2000092c 	.word	0x2000092c

080087ac <__malloc_unlock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_unlock+0x8>)
 80087ae:	f000 b804 	b.w	80087ba <__retarget_lock_release_recursive>
 80087b2:	bf00      	nop
 80087b4:	2000092c 	.word	0x2000092c

080087b8 <__retarget_lock_acquire_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_release_recursive>:
 80087ba:	4770      	bx	lr

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr
