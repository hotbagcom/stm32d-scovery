
NUCleo_DAC_pwm_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00005338  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005348  20005348  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022413  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040ff  00000000  00000000  00042453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00046558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a58  00000000  00000000  00048128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b4b  00000000  00000000  00049b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f35d  00000000  00000000  0004e6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa80f  00000000  00000000  0006da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168237  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077a4  00000000  00000000  00168288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ba0 	.word	0x08008ba0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008ba0 	.word	0x08008ba0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	ADCbuff_disc[0] =  ADCbuff_contio[0];//dac led
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_ADC_ConvCpltCallback+0x30>)
 8000502:	6013      	str	r3, [r2, #0]
	ADCbuff_disc[1] =  ADCbuff_contio[1];//pwm led
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_ADC_ConvCpltCallback+0x30>)
 800050a:	6053      	str	r3, [r2, #4]
	ADCbuff_disc[2] =  ADCbuff_contio[2];//pwm servo
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_ADC_ConvCpltCallback+0x2c>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_ADC_ConvCpltCallback+0x30>)
 8000512:	6093      	str	r3, [r2, #8]

}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000974 	.word	0x20000974
 8000524:	20000980 	.word	0x20000980

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fff9 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f86d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 fad5 	bl	8000ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 800053a:	f000 fa95 	bl	8000a68 <MX_DMA_Init>
  MX_ETH_Init();
 800053e:	f000 f96d 	bl	800081c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000542:	f000 fa39 	bl	80009b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000546:	f000 fa61 	bl	8000a0c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800054a:	f000 f8cd 	bl	80006e8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800054e:	f000 f9b3 	bl	80008b8 <MX_TIM2_Init>
  MX_DAC_Init();
 8000552:	f000 f939 	bl	80007c8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCbuff_contio , hadc1.Init.NbrOfConversion);
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <main+0xac>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	461a      	mov	r2, r3
 800055c:	491e      	ldr	r1, [pc, #120]	; (80005d8 <main+0xb0>)
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <main+0xac>)
 8000560:	f001 f88a 	bl	8001678 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint16_t *)ADCbuff_product1 ,1 ,DAC_ALIGN_12B_R);
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint16_t *)ADCbuff_product2[0],1);//first led  , second servo
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint16_t *)ADCbuff_product2[1],1);
  */

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t *)ADCbuff_product1[0] ,sizeof(ADCbuff_product1[0])/sizeof(ADCbuff_product1[0]),DAC_ALIGN_12B_R);
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <main+0xb4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	2300      	movs	r3, #0
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2301      	movs	r3, #1
 8000570:	2110      	movs	r1, #16
 8000572:	481b      	ldr	r0, [pc, #108]	; (80005e0 <main+0xb8>)
 8000574:	f001 fd58 	bl	8002028 <HAL_DAC_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)ADCbuff_product2[0],1);//first led  , second servo
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <main+0xbc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	2301      	movs	r3, #1
 8000580:	2100      	movs	r1, #0
 8000582:	4819      	ldr	r0, [pc, #100]	; (80005e8 <main+0xc0>)
 8000584:	f003 fe74 	bl	8004270 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)ADCbuff_product2[1],1);
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <main+0xbc>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	461a      	mov	r2, r3
 800058e:	2301      	movs	r3, #1
 8000590:	2104      	movs	r1, #4
 8000592:	4815      	ldr	r0, [pc, #84]	; (80005e8 <main+0xc0>)
 8000594:	f003 fe6c 	bl	8004270 <HAL_TIM_PWM_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f005 fd78 	bl	800608c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1_LcnfigDAC */
  Task1_LcnfigDACHandle = osThreadNew(StartTask01, NULL, &Task1_LcnfigDAC_attributes);
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0xc4>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0xc8>)
 80005a2:	f005 fdbd 	bl	8006120 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <main+0xcc>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of Task2_LcnfigPWM */
  Task2_LcnfigPWMHandle = osThreadNew(StartTask02, NULL, &Task2_LcnfigPWM_attributes);
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0xd0>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <main+0xd4>)
 80005b2:	f005 fdb5 	bl	8006120 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <main+0xd8>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of Task3_ScnfigPWM */
  Task3_ScnfigPWMHandle = osThreadNew(StartTask03, NULL, &Task3_ScnfigPWM_attributes);
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0xdc>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0xe0>)
 80005c2:	f005 fdad 	bl	8006120 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a10      	ldr	r2, [pc, #64]	; (800060c <main+0xe4>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f005 fd82 	bl	80060d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0xa8>
 80005d2:	bf00      	nop
 80005d4:	200001a4 	.word	0x200001a4
 80005d8:	20000974 	.word	0x20000974
 80005dc:	2000098c 	.word	0x2000098c
 80005e0:	2000024c 	.word	0x2000024c
 80005e4:	20000998 	.word	0x20000998
 80005e8:	20000370 	.word	0x20000370
 80005ec:	08008c00 	.word	0x08008c00
 80005f0:	08000c41 	.word	0x08000c41
 80005f4:	20000968 	.word	0x20000968
 80005f8:	08008c24 	.word	0x08008c24
 80005fc:	08000c61 	.word	0x08000c61
 8000600:	2000096c 	.word	0x2000096c
 8000604:	08008c48 	.word	0x08008c48
 8000608:	08000c81 	.word	0x08000c81
 800060c:	20000970 	.word	0x20000970

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f008 fab6 	bl	8008b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800068c:	2306      	movs	r3, #6
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f003 f805 	bl	80036a8 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fb10 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fa66 	bl	8003b98 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d2:	f000 faf9 	bl	8000cc8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_ADC1_Init+0xd4>)
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <MX_ADC1_Init+0xd8>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_ADC1_Init+0xd4>)
 800070e:	2201      	movs	r2, #1
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000714:	2201      	movs	r2, #1
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_ADC1_Init+0xd4>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <MX_ADC1_Init+0xdc>)
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_ADC1_Init+0xd4>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000734:	2203      	movs	r2, #3
 8000736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ADC1_Init+0xd4>)
 800073a:	2201      	movs	r2, #1
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	481d      	ldr	r0, [pc, #116]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000748:	f000 ff52 	bl	80015f0 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 fab9 	bl	8000cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000756:	2303      	movs	r3, #3
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800075e:	2305      	movs	r3, #5
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4815      	ldr	r0, [pc, #84]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000768:	f001 f8aa 	bl	80018c0 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000772:	f000 faa9 	bl	8000cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000776:	2304      	movs	r3, #4
 8000778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <MX_ADC1_Init+0xd4>)
 8000784:	f001 f89c 	bl	80018c0 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800078e:	f000 fa9b 	bl	8000cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000792:	2306      	movs	r3, #6
 8000794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000796:	2303      	movs	r3, #3
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800079a:	2303      	movs	r3, #3
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC1_Init+0xd4>)
 80007a4:	f001 f88c 	bl	80018c0 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80007ae:	f000 fa8b 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001a4 	.word	0x200001a4
 80007c0:	40012000 	.word	0x40012000
 80007c4:	0f000001 	.word	0x0f000001

080007c8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_DAC_Init+0x4c>)
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_DAC_Init+0x50>)
 80007da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_DAC_Init+0x4c>)
 80007de:	f001 fc01 	bl	8001fe4 <HAL_DAC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e8:	f000 fa6e 	bl	8000cc8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	2210      	movs	r2, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_DAC_Init+0x4c>)
 80007fc:	f001 fd00 	bl	8002200 <HAL_DAC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000806:	f000 fa5f 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000024c 	.word	0x2000024c
 8000818:	40007400 	.word	0x40007400

0800081c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ETH_Init+0x84>)
 8000822:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <MX_ETH_Init+0x88>)
 8000824:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ETH_Init+0x8c>)
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000834:	22e1      	movs	r2, #225	; 0xe1
 8000836:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ETH_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_ETH_Init+0x8c>)
 8000846:	2200      	movs	r2, #0
 8000848:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_ETH_Init+0x84>)
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <MX_ETH_Init+0x8c>)
 800084e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_ETH_Init+0x84>)
 8000852:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000856:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_ETH_Init+0x84>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_ETH_Init+0x90>)
 800085c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_ETH_Init+0x84>)
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_ETH_Init+0x94>)
 8000862:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_ETH_Init+0x84>)
 8000866:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800086a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_ETH_Init+0x84>)
 800086e:	f002 f911 	bl	8002a94 <HAL_ETH_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000878:	f000 fa26 	bl	8000cc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800087c:	2238      	movs	r2, #56	; 0x38
 800087e:	2100      	movs	r1, #0
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_ETH_Init+0x98>)
 8000882:	f008 f985 	bl	8008b90 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_ETH_Init+0x98>)
 8000888:	2221      	movs	r2, #33	; 0x21
 800088a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_ETH_Init+0x98>)
 800088e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000892:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_ETH_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200002c0 	.word	0x200002c0
 80008a4:	40028000 	.word	0x40028000
 80008a8:	200009a4 	.word	0x200009a4
 80008ac:	20000104 	.word	0x20000104
 80008b0:	20000064 	.word	0x20000064
 80008b4:	2000002c 	.word	0x2000002c

080008b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <MX_TIM2_Init+0xfc>)
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_TIM2_Init+0xfc>)
 80008f2:	2213      	movs	r2, #19
 80008f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_TIM2_Init+0xfc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_TIM2_Init+0xfc>)
 80008fe:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_TIM2_Init+0xfc>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_TIM2_Init+0xfc>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000910:	4828      	ldr	r0, [pc, #160]	; (80009b4 <MX_TIM2_Init+0xfc>)
 8000912:	f003 fb93 	bl	800403c <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800091c:	f000 f9d4 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	4619      	mov	r1, r3
 800092c:	4821      	ldr	r0, [pc, #132]	; (80009b4 <MX_TIM2_Init+0xfc>)
 800092e:	f004 f831 	bl	8004994 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000938:	f000 f9c6 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <MX_TIM2_Init+0xfc>)
 800093e:	f003 fc3d 	bl	80041bc <HAL_TIM_PWM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000948:	f000 f9be 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	4619      	mov	r1, r3
 800095a:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_TIM2_Init+0xfc>)
 800095c:	f004 fcfe 	bl	800535c <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000966:	f000 f9af 	bl	8000cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM2_Init+0xfc>)
 8000982:	f003 ff45 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800098c:	f000 f99c 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2204      	movs	r2, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_TIM2_Init+0xfc>)
 8000998:	f003 ff3a 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009a2:	f000 f991 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009a6:	4803      	ldr	r0, [pc, #12]	; (80009b4 <MX_TIM2_Init+0xfc>)
 80009a8:	f000 fbcc 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80009ac:	bf00      	nop
 80009ae:	3738      	adds	r7, #56	; 0x38
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000370 	.word	0x20000370

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART3_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009f0:	f004 fd44 	bl	800547c <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f965 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000418 	.word	0x20000418
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	f002 fd0d 	bl	800346e <HAL_PCD_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f935 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000045c 	.word	0x2000045c

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_DMA_Init+0x78>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <MX_DMA_Init+0x78>)
 8000a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_DMA_Init+0x78>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_DMA_Init+0x78>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_DMA_Init+0x78>)
 8000a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_DMA_Init+0x78>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	2010      	movs	r0, #16
 8000aac:	f001 fa70 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ab0:	2010      	movs	r0, #16
 8000ab2:	f001 fa89 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2105      	movs	r1, #5
 8000aba:	2011      	movs	r0, #17
 8000abc:	f001 fa68 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ac0:	2011      	movs	r0, #17
 8000ac2:	f001 fa81 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2038      	movs	r0, #56	; 0x38
 8000acc:	f001 fa60 	bl	8001f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ad0:	2038      	movs	r0, #56	; 0x38
 8000ad2:	f001 fa79 	bl	8001fc8 <HAL_NVIC_EnableIRQ>

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a4b      	ldr	r2, [pc, #300]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a44      	ldr	r2, [pc, #272]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ba8:	4822      	ldr	r0, [pc, #136]	; (8000c34 <MX_GPIO_Init+0x150>)
 8000baa:	f002 fc47 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	4821      	ldr	r0, [pc, #132]	; (8000c38 <MX_GPIO_Init+0x154>)
 8000bb4:	f002 fc42 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481b      	ldr	r0, [pc, #108]	; (8000c3c <MX_GPIO_Init+0x158>)
 8000bd0:	f002 fa88 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bd4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_GPIO_Init+0x150>)
 8000bee:	f002 fa79 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf2:	2340      	movs	r3, #64	; 0x40
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <MX_GPIO_Init+0x154>)
 8000c0a:	f002 fa6b 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_GPIO_Init+0x154>)
 8000c22:	f002 fa5f 	bl	80030e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40020800 	.word	0x40020800

08000c40 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  ADCbuff_product1[0]=ADCbuff_disc[0];
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <StartTask01+0x18>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <StartTask01+0x1c>)
 8000c4e:	6013      	str	r3, [r2, #0]
    osDelay(80);
 8000c50:	2050      	movs	r0, #80	; 0x50
 8000c52:	f005 faf7 	bl	8006244 <osDelay>
	  ADCbuff_product1[0]=ADCbuff_disc[0];
 8000c56:	e7f7      	b.n	8000c48 <StartTask01+0x8>
 8000c58:	20000980 	.word	0x20000980
 8000c5c:	2000098c 	.word	0x2000098c

08000c60 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  ADCbuff_product2[0]=ADCbuff_disc[1];
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <StartTask02+0x18>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <StartTask02+0x1c>)
 8000c6e:	6013      	str	r3, [r2, #0]
    osDelay(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f005 fae7 	bl	8006244 <osDelay>
	  ADCbuff_product2[0]=ADCbuff_disc[1];
 8000c76:	e7f7      	b.n	8000c68 <StartTask02+0x8>
 8000c78:	20000980 	.word	0x20000980
 8000c7c:	20000998 	.word	0x20000998

08000c80 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  ADCbuff_product2[1]=((8000-640)/4096)*ADCbuff_disc[1]+640 ;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <StartTask03+0x1c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c90:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <StartTask03+0x20>)
 8000c92:	6053      	str	r3, [r2, #4]
    osDelay(120);
 8000c94:	2078      	movs	r0, #120	; 0x78
 8000c96:	f005 fad5 	bl	8006244 <osDelay>
	  ADCbuff_product2[1]=((8000-640)/4096)*ADCbuff_disc[1]+640 ;
 8000c9a:	e7f5      	b.n	8000c88 <StartTask03+0x8>
 8000c9c:	20000980 	.word	0x20000980
 8000ca0:	20000998 	.word	0x20000998

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb6:	f000 fc57 	bl	8001568 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40001400 	.word	0x40001400

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_MspInit+0x54>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_MspInit+0x54>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x54>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_MspInit+0x54>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_MspInit+0x54>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_MspInit+0x54>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
 8000d1a:	f001 f939 	bl	8001f90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <HAL_ADC_MspInit+0xdc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d158      	bne.n	8000e00 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_ADC_MspInit+0xe0>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <HAL_ADC_MspInit+0xe0>)
 8000d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <HAL_ADC_MspInit+0xe0>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_ADC_MspInit+0xe0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_ADC_MspInit+0xe0>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_ADC_MspInit+0xe0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000d86:	2358      	movs	r3, #88	; 0x58
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	481d      	ldr	r0, [pc, #116]	; (8000e10 <HAL_ADC_MspInit+0xe4>)
 8000d9a:	f002 f9a3 	bl	80030e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_ADC_MspInit+0xec>)
 8000da2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000dc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000dd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ddc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000de6:	f001 fae5 	bl	80023b4 <HAL_DMA_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000df0:	f7ff ff6a 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000df8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012000 	.word	0x40012000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	200001ec 	.word	0x200001ec
 8000e18:	40026410 	.word	0x40026410

08000e1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a30      	ldr	r2, [pc, #192]	; (8000efc <HAL_DAC_MspInit+0xe0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d159      	bne.n	8000ef2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_DAC_MspInit+0xe4>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_DAC_MspInit+0xe4>)
 8000e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <HAL_DAC_MspInit+0xe4>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_DAC_MspInit+0xe4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_DAC_MspInit+0xe4>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_DAC_MspInit+0xe4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e76:	2320      	movs	r3, #32
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	481e      	ldr	r0, [pc, #120]	; (8000f04 <HAL_DAC_MspInit+0xe8>)
 8000e8a:	f002 f92b 	bl	80030e4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_DAC_MspInit+0xf0>)
 8000e92:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000e96:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000e9a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eae:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000eb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ebe:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000eca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ece:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000ed6:	480c      	ldr	r0, [pc, #48]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000ed8:	f001 fa6c 	bl	80023b4 <HAL_DMA_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000ee2:	f7ff fef1 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_DAC_MspInit+0xec>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40007400 	.word	0x40007400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	20000260 	.word	0x20000260
 8000f0c:	400260a0 	.word	0x400260a0

08000f10 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a55      	ldr	r2, [pc, #340]	; (8001084 <HAL_ETH_MspInit+0x174>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	f040 80a4 	bne.w	800107c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	4b53      	ldr	r3, [pc, #332]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b50      	ldr	r3, [pc, #320]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4c:	623b      	str	r3, [r7, #32]
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a4b      	ldr	r2, [pc, #300]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b49      	ldr	r3, [pc, #292]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a36      	ldr	r2, [pc, #216]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <HAL_ETH_MspInit+0x178>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff8:	2332      	movs	r3, #50	; 0x32
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <HAL_ETH_MspInit+0x17c>)
 8001014:	f002 f866 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001018:	2386      	movs	r3, #134	; 0x86
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <HAL_ETH_MspInit+0x180>)
 8001034:	f002 f856 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104a:	230b      	movs	r3, #11
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <HAL_ETH_MspInit+0x184>)
 8001056:	f002 f845 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800105a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106c:	230b      	movs	r3, #11
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <HAL_ETH_MspInit+0x188>)
 8001078:	f002 f834 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3738      	adds	r7, #56	; 0x38
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40028000 	.word	0x40028000
 8001088:	40023800 	.word	0x40023800
 800108c:	40020800 	.word	0x40020800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40021800 	.word	0x40021800

0800109c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ac:	d13f      	bne.n	800112e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_TIM_Base_MspInit+0x9c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a20      	ldr	r2, [pc, #128]	; (8001138 <HAL_TIM_Base_MspInit+0x9c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_TIM_Base_MspInit+0x9c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_TIM_Base_MspInit+0xa4>)
 80010ce:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010d2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010d6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 80010fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001102:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 8001106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800110a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 8001114:	f001 f94e 	bl	80023b4 <HAL_DMA_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 800111e:	f7ff fdd3 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a05      	ldr	r2, [pc, #20]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_TIM_Base_MspInit+0xa0>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	200003b8 	.word	0x200003b8
 8001140:	40026088 	.word	0x40026088

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d13b      	bne.n	80011de <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_TIM_MspPostInit+0xa4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_TIM_MspPostInit+0xa4>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_TIM_MspPostInit+0xa4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_TIM_MspPostInit+0xa4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_TIM_MspPostInit+0xa4>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_TIM_MspPostInit+0xa4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_TIM_MspPostInit+0xa8>)
 80011ba:	f001 ff93 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011be:	2308      	movs	r3, #8
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ce:	2301      	movs	r3, #1
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_TIM_MspPostInit+0xac>)
 80011da:	f001 ff83 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_UART_MspInit+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12c      	bne.n	8001270 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_UART_MspInit+0x88>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_UART_MspInit+0x88>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_UART_MspInit+0x88>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_UART_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_UART_MspInit+0x88>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_UART_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800124e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_UART_MspInit+0x8c>)
 800126c:	f001 ff3a 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	; 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004800 	.word	0x40004800
 800127c:	40023800 	.word	0x40023800
 8001280:	40020c00 	.word	0x40020c00

08001284 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a4:	d13f      	bne.n	8001326 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_PCD_MspInit+0xac>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_PCD_MspInit+0xac>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_PCD_MspInit+0xac>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012d4:	230a      	movs	r3, #10
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4815      	ldr	r0, [pc, #84]	; (8001334 <HAL_PCD_MspInit+0xb0>)
 80012e0:	f001 ff00 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <HAL_PCD_MspInit+0xb0>)
 80012fa:	f001 fef3 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_PCD_MspInit+0xac>)
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_PCD_MspInit+0xac>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	6353      	str	r3, [r2, #52]	; 0x34
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_PCD_MspInit+0xac>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_PCD_MspInit+0xac>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_PCD_MspInit+0xac>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_InitTick+0xe4>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_InitTick+0xe4>)
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_InitTick+0xe4>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001364:	f107 0210 	add.w	r2, r7, #16
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fe32 	bl	8003fd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137e:	f002 fe03 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8001382:	6378      	str	r0, [r7, #52]	; 0x34
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001386:	f002 fdff 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	4a23      	ldr	r2, [pc, #140]	; (8001420 <HAL_InitTick+0xe8>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3b01      	subs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_InitTick+0xec>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <HAL_InitTick+0xf0>)
 80013a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_InitTick+0xec>)
 80013a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_InitTick+0xec>)
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_InitTick+0xec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_InitTick+0xec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_InitTick+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80013c4:	4817      	ldr	r0, [pc, #92]	; (8001424 <HAL_InitTick+0xec>)
 80013c6:	f002 fe39 	bl	800403c <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11b      	bne.n	8001410 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <HAL_InitTick+0xec>)
 80013da:	f002 fe7f 	bl	80040dc <HAL_TIM_Base_Start_IT>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d111      	bne.n	8001410 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013ec:	2037      	movs	r0, #55	; 0x37
 80013ee:	f000 fdeb 	bl	8001fc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d808      	bhi.n	800140a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2037      	movs	r0, #55	; 0x37
 80013fe:	f000 fdc7 	bl	8001f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_InitTick+0xf4>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e002      	b.n	8001410 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001414:	4618      	mov	r0, r3
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	431bde83 	.word	0x431bde83
 8001424:	200009ac 	.word	0x200009ac
 8001428:	40001400 	.word	0x40001400
 800142c:	20000004 	.word	0x20000004

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA1_Stream5_IRQHandler+0x10>)
 8001462:	f001 f8ad 	bl	80025c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003b8 	.word	0x200003b8

08001470 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Stream6_IRQHandler+0x10>)
 8001476:	f001 f8a3 	bl	80025c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000260 	.word	0x20000260

08001484 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM7_IRQHandler+0x10>)
 800148a:	f003 f8b9 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200009ac 	.word	0x200009ac

08001498 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <DMA2_Stream0_IRQHandler+0x10>)
 800149e:	f001 f88f 	bl	80025c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001ec 	.word	0x200001ec

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ffd7 	bl	80014ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f007 fb15 	bl	8008b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff f811 	bl	8000528 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001508:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001514:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 8001518:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800151c:	20005348 	.word	0x20005348

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 fd14 	bl	8001f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	200f      	movs	r0, #15
 8001554:	f7ff fef0 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fbbc 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	200009f4 	.word	0x200009f4

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200009f4 	.word	0x200009f4

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_Delay+0x44>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e033      	b.n	800166e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fb8c 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001636:	f023 0302 	bic.w	r3, r3, #2
 800163a:	f043 0202 	orr.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fa6e 	bl	8001b24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
 800165e:	e001      	b.n	8001664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_ADC_Start_DMA+0x1e>
 8001692:	2302      	movs	r3, #2
 8001694:	e0e9      	b.n	800186a <HAL_ADC_Start_DMA+0x1f2>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d018      	beq.n	80016de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016bc:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_ADC_Start_DMA+0x1fc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a6d      	ldr	r2, [pc, #436]	; (8001878 <HAL_ADC_Start_DMA+0x200>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9a      	lsrs	r2, r3, #18
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ec:	d107      	bne.n	80016fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	f040 80a1 	bne.w	8001850 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001738:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174c:	d106      	bne.n	800175c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f023 0206 	bic.w	r2, r3, #6
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
 800175a:	e002      	b.n	8001762 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <HAL_ADC_Start_DMA+0x204>)
 800176c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_ADC_Start_DMA+0x208>)
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177a:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_ADC_Start_DMA+0x20c>)
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	4a41      	ldr	r2, [pc, #260]	; (8001888 <HAL_ADC_Start_DMA+0x210>)
 8001784:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800178e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800179e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	334c      	adds	r3, #76	; 0x4c
 80017ba:	4619      	mov	r1, r3
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f000 fea6 	bl	8002510 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d12a      	bne.n	8001826 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2d      	ldr	r2, [pc, #180]	; (800188c <HAL_ADC_Start_DMA+0x214>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d015      	beq.n	8001806 <HAL_ADC_Start_DMA+0x18e>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <HAL_ADC_Start_DMA+0x218>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_Start_DMA+0x178>
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_ADC_Start_DMA+0x204>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00a      	beq.n	8001806 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <HAL_ADC_Start_DMA+0x21c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d136      	bne.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_ADC_Start_DMA+0x204>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d130      	bne.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d129      	bne.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e020      	b.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a18      	ldr	r2, [pc, #96]	; (800188c <HAL_ADC_Start_DMA+0x214>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d11b      	bne.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d114      	bne.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	e00b      	b.n	8001868 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83
 800187c:	40012300 	.word	0x40012300
 8001880:	08001d1d 	.word	0x08001d1d
 8001884:	08001dd7 	.word	0x08001dd7
 8001888:	08001df3 	.word	0x08001df3
 800188c:	40012000 	.word	0x40012000
 8001890:	40012100 	.word	0x40012100
 8001894:	40012200 	.word	0x40012200

08001898 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x1c>
 80018d8:	2302      	movs	r3, #2
 80018da:	e113      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x244>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d925      	bls.n	8001938 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68d9      	ldr	r1, [r3, #12]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	3b1e      	subs	r3, #30
 8001902:	2207      	movs	r2, #7
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43da      	mvns	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	400a      	ands	r2, r1
 8001910:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68d9      	ldr	r1, [r3, #12]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	4603      	mov	r3, r0
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4403      	add	r3, r0
 800192a:	3b1e      	subs	r3, #30
 800192c:	409a      	lsls	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	e022      	b.n	800197e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6919      	ldr	r1, [r3, #16]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	2207      	movs	r2, #7
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	400a      	ands	r2, r1
 800195a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6919      	ldr	r1, [r3, #16]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	4603      	mov	r3, r0
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4403      	add	r3, r0
 8001974:	409a      	lsls	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d824      	bhi.n	80019d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	3b05      	subs	r3, #5
 8001998:	221f      	movs	r2, #31
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b05      	subs	r3, #5
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
 80019ce:	e04c      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d824      	bhi.n	8001a22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b23      	subs	r3, #35	; 0x23
 80019ea:	221f      	movs	r2, #31
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43da      	mvns	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	400a      	ands	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	3b23      	subs	r3, #35	; 0x23
 8001a14:	fa00 f203 	lsl.w	r2, r0, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a20:	e023      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	3b41      	subs	r3, #65	; 0x41
 8001a34:	221f      	movs	r2, #31
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	400a      	ands	r2, r1
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b41      	subs	r3, #65	; 0x41
 8001a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <HAL_ADC_ConfigChannel+0x250>)
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a28      	ldr	r2, [pc, #160]	; (8001b14 <HAL_ADC_ConfigChannel+0x254>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d10f      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1d8>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d10b      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_ADC_ConfigChannel+0x254>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12b      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x23a>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_ADC_ConfigChannel+0x258>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d003      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x1f4>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b11      	cmp	r3, #17
 8001ab2:	d122      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_ADC_ConfigChannel+0x258>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d111      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_ADC_ConfigChannel+0x25c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_ADC_ConfigChannel+0x260>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	0c9a      	lsrs	r2, r3, #18
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f9      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40012300 	.word	0x40012300
 8001b14:	40012000 	.word	0x40012000
 8001b18:	10000012 	.word	0x10000012
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	431bde83 	.word	0x431bde83

08001b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b2c:	4b79      	ldr	r3, [pc, #484]	; (8001d14 <ADC_Init+0x1f0>)
 8001b2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	021a      	lsls	r2, r3, #8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <ADC_Init+0x1f4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d022      	beq.n	8001c02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e00f      	b.n	8001c22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0202 	bic.w	r2, r2, #2
 8001c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e1b      	ldrb	r3, [r3, #24]
 8001c3c:	005a      	lsls	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	035a      	lsls	r2, r3, #13
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	e007      	b.n	8001c98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	051a      	lsls	r2, r3, #20
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cda:	025a      	lsls	r2, r3, #9
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	029a      	lsls	r2, r3, #10
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40012300 	.word	0x40012300
 8001d18:	0f000001 	.word	0x0f000001

08001d1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13c      	bne.n	8001db0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d127      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0220 	bic.w	r2, r2, #32
 8001d82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7fe fba3 	bl	80004f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dae:	e00e      	b.n	8001dce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff fd75 	bl	80018ac <HAL_ADC_ErrorCallback>
}
 8001dc2:	e004      	b.n	8001dce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fd57 	bl	8001898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fd4a 	bl	80018ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff4c 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa2:	f7ff ff61 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f7ff ffb1 	bl	8001f14 <NVIC_EncodePriority>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff80 	bl	8001ec0 <__NVIC_SetPriority>
}
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff54 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e014      	b.n	8002020 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	791b      	ldrb	r3, [r3, #4]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe ff08 	bl	8000e1c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	795b      	ldrb	r3, [r3, #5]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_DAC_Start_DMA+0x22>
 8002046:	2302      	movs	r3, #2
 8002048:	e0ab      	b.n	80021a2 <HAL_DAC_Start_DMA+0x17a>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2202      	movs	r2, #2
 8002054:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d12f      	bne.n	80020bc <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_DAC_Start_DMA+0x184>)
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <HAL_DAC_Start_DMA+0x188>)
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a50      	ldr	r2, [pc, #320]	; (80021b4 <HAL_DAC_Start_DMA+0x18c>)
 8002072:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002082:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d013      	beq.n	80020b2 <HAL_DAC_Start_DMA+0x8a>
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d845      	bhi.n	800211c <HAL_DAC_Start_DMA+0xf4>
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_DAC_Start_DMA+0x76>
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d005      	beq.n	80020a8 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800209c:	e03e      	b.n	800211c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3308      	adds	r3, #8
 80020a4:	613b      	str	r3, [r7, #16]
        break;
 80020a6:	e03c      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	330c      	adds	r3, #12
 80020ae:	613b      	str	r3, [r7, #16]
        break;
 80020b0:	e037      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3310      	adds	r3, #16
 80020b8:	613b      	str	r3, [r7, #16]
        break;
 80020ba:	e032      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a3d      	ldr	r2, [pc, #244]	; (80021b8 <HAL_DAC_Start_DMA+0x190>)
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a3c      	ldr	r2, [pc, #240]	; (80021bc <HAL_DAC_Start_DMA+0x194>)
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a3b      	ldr	r2, [pc, #236]	; (80021c0 <HAL_DAC_Start_DMA+0x198>)
 80020d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d013      	beq.n	8002112 <HAL_DAC_Start_DMA+0xea>
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d817      	bhi.n	8002120 <HAL_DAC_Start_DMA+0xf8>
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_DAC_Start_DMA+0xd6>
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d005      	beq.n	8002108 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80020fc:	e010      	b.n	8002120 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3314      	adds	r3, #20
 8002104:	613b      	str	r3, [r7, #16]
        break;
 8002106:	e00c      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3318      	adds	r3, #24
 800210e:	613b      	str	r3, [r7, #16]
        break;
 8002110:	e007      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	331c      	adds	r3, #28
 8002118:	613b      	str	r3, [r7, #16]
        break;
 800211a:	e002      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
        break;
 800211c:	bf00      	nop
 800211e:	e000      	b.n	8002122 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002120:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002136:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6898      	ldr	r0, [r3, #8]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	f000 f9e5 	bl	8002510 <HAL_DMA_Start_IT>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
 800214a:	e010      	b.n	800216e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800215a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68d8      	ldr	r0, [r3, #12]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	f000 f9d3 	bl	8002510 <HAL_DMA_Start_IT>
 800216a:	4603      	mov	r3, r0
 800216c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2201      	movs	r2, #1
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e005      	b.n	80021a0 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	0800229f 	.word	0x0800229f
 80021b0:	080022c1 	.word	0x080022c1
 80021b4:	080022dd 	.word	0x080022dd
 80021b8:	08002347 	.word	0x08002347
 80021bc:	08002369 	.word	0x08002369
 80021c0:	08002385 	.word	0x08002385

080021c4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	795b      	ldrb	r3, [r3, #5]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_DAC_ConfigChannel+0x18>
 8002214:	2302      	movs	r3, #2
 8002216:	e03c      	b.n	8002292 <HAL_DAC_ConfigChannel+0x92>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2202      	movs	r2, #2
 8002222:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4013      	ands	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	22c0      	movs	r2, #192	; 0xc0
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff89 	bl	80021c4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	711a      	strb	r2, [r3, #4]
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff ff82 	bl	80021d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff ff78 	bl	80021ec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	711a      	strb	r2, [r3, #4]
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ffd8 	bl	800230a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	711a      	strb	r2, [r3, #4]
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff ffd1 	bl	800231e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f043 0204 	orr.w	r2, r3, #4
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ffc7 	bl	8002332 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	711a      	strb	r2, [r3, #4]
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff f8e6 	bl	8001590 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e099      	b.n	8002504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f0:	e00f      	b.n	8002412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f2:	f7ff f8cd 	bl	8001590 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d908      	bls.n	8002412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e078      	b.n	8002504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e8      	bne.n	80023f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_DMA_Init+0x158>)
 800242c:	4013      	ands	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2b04      	cmp	r3, #4
 800246a:	d107      	bne.n	800247c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4313      	orrs	r3, r2
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0307 	bic.w	r3, r3, #7
 8002492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d117      	bne.n	80024d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fa6f 	bl	800299c <DMA_CheckFifoParam>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024d2:	2301      	movs	r3, #1
 80024d4:	e016      	b.n	8002504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa26 	bl	8002930 <DMA_CalcBaseAndBitshift>
 80024e4:	4603      	mov	r3, r0
 80024e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	223f      	movs	r2, #63	; 0x3f
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	f010803f 	.word	0xf010803f

08002510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_DMA_Start_IT+0x26>
 8002532:	2302      	movs	r3, #2
 8002534:	e040      	b.n	80025b8 <HAL_DMA_Start_IT+0xa8>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d12f      	bne.n	80025aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2202      	movs	r2, #2
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f9b8 	bl	80028d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	223f      	movs	r2, #63	; 0x3f
 800256a:	409a      	lsls	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0216 	orr.w	r2, r2, #22
 800257e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0208 	orr.w	r2, r2, #8
 8002596:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e005      	b.n	80025b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
 80025b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025cc:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_DMA_IRQHandler+0x248>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a8e      	ldr	r2, [pc, #568]	; (800280c <HAL_DMA_IRQHandler+0x24c>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0a9b      	lsrs	r3, r3, #10
 80025d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	2208      	movs	r2, #8
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01a      	beq.n	800262c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	2208      	movs	r2, #8
 800261a:	409a      	lsls	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2201      	movs	r2, #1
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2201      	movs	r2, #1
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	2204      	movs	r2, #4
 8002668:	409a      	lsls	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2204      	movs	r2, #4
 8002686:	409a      	lsls	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2210      	movs	r2, #16
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d043      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03c      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2210      	movs	r2, #16
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d108      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d024      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
 80026ee:	e01f      	b.n	8002730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
 8002700:	e016      	b.n	8002730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0208 	bic.w	r2, r2, #8
 800271e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2220      	movs	r2, #32
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 808f 	beq.w	8002860 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8087 	beq.w	8002860 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2220      	movs	r2, #32
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b05      	cmp	r3, #5
 8002768:	d136      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0216 	bic.w	r2, r2, #22
 8002778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <HAL_DMA_IRQHandler+0x1da>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0208 	bic.w	r2, r2, #8
 80027a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	223f      	movs	r2, #63	; 0x3f
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d07e      	beq.n	80028cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
        }
        return;
 80027d6:	e079      	b.n	80028cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01d      	beq.n	8002822 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e02c      	b.n	8002860 <HAL_DMA_IRQHandler+0x2a0>
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000
 800280c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d023      	beq.n	8002860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e01e      	b.n	8002860 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10f      	bne.n	8002850 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0210 	bic.w	r2, r2, #16
 800283e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	2b00      	cmp	r3, #0
 8002866:	d032      	beq.n	80028ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d022      	beq.n	80028ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2205      	movs	r2, #5
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	d307      	bcc.n	80028a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f2      	bne.n	800288c <HAL_DMA_IRQHandler+0x2cc>
 80028a6:	e000      	b.n	80028aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
 80028ca:	e000      	b.n	80028ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80028cc:	bf00      	nop
    }
  }
}
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d108      	bne.n	8002914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002912:	e007      	b.n	8002924 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3b10      	subs	r3, #16
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <DMA_CalcBaseAndBitshift+0x64>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <DMA_CalcBaseAndBitshift+0x68>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d909      	bls.n	8002972 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	659a      	str	r2, [r3, #88]	; 0x58
 8002970:	e007      	b.n	8002982 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	aaaaaaab 	.word	0xaaaaaaab
 8002998:	08008c84 	.word	0x08008c84

0800299c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11f      	bne.n	80029f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d856      	bhi.n	8002a6a <DMA_CheckFifoParam+0xce>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <DMA_CheckFifoParam+0x28>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029e7 	.word	0x080029e7
 80029cc:	080029d5 	.word	0x080029d5
 80029d0:	08002a6b 	.word	0x08002a6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d046      	beq.n	8002a6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e4:	e043      	b.n	8002a6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ee:	d140      	bne.n	8002a72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f4:	e03d      	b.n	8002a72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fe:	d121      	bne.n	8002a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d837      	bhi.n	8002a76 <DMA_CheckFifoParam+0xda>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <DMA_CheckFifoParam+0x70>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a23 	.word	0x08002a23
 8002a14:	08002a1d 	.word	0x08002a1d
 8002a18:	08002a35 	.word	0x08002a35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e030      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d025      	beq.n	8002a7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a32:	e022      	b.n	8002a7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a3c:	d11f      	bne.n	8002a7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a42:	e01c      	b.n	8002a7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d903      	bls.n	8002a52 <DMA_CheckFifoParam+0xb6>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d003      	beq.n	8002a58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a50:	e018      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      break;
 8002a56:	e015      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00e      	beq.n	8002a82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e00b      	b.n	8002a82 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e00a      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e008      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e006      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e004      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e002      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <DMA_CheckFifoParam+0xe8>
      break;
 8002a82:	bf00      	nop
    }
  } 
  
  return status; 
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop

08002a94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06c      	b.n	8002b80 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2223      	movs	r2, #35	; 0x23
 8002ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fe fa29 	bl	8000f10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_ETH_Init+0xf4>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a30      	ldr	r2, [pc, #192]	; (8002b88 <HAL_ETH_Init+0xf4>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_ETH_Init+0xf4>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_ETH_Init+0xf8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_ETH_Init+0xf8>)
 8002ae0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ae4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_ETH_Init+0xf8>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4927      	ldr	r1, [pc, #156]	; (8002b8c <HAL_ETH_Init+0xf8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_ETH_Init+0xf8>)
 8002af6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b10:	f7fe fd3e 	bl	8001590 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b16:	e011      	b.n	8002b3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b18:	f7fe fd3a 	bl	8001590 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b26:	d909      	bls.n	8002b3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	22e0      	movs	r2, #224	; 0xe0
 8002b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e021      	b.n	8002b80 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e4      	bne.n	8002b18 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f958 	bl	8002e04 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f9ff 	bl	8002f58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa55 	bl	800300a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	461a      	mov	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f9bd 	bl	8002ee8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800

08002b90 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <ETH_SetMACConfig+0x15c>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	7c1b      	ldrb	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <ETH_SetMACConfig+0x28>
 8002bb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bb6:	e000      	b.n	8002bba <ETH_SetMACConfig+0x2a>
 8002bb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	7c5b      	ldrb	r3, [r3, #17]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <ETH_SetMACConfig+0x38>
 8002bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bc6:	e000      	b.n	8002bca <ETH_SetMACConfig+0x3a>
 8002bc8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	7fdb      	ldrb	r3, [r3, #31]
 8002bd6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002bd8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	7f92      	ldrb	r2, [r2, #30]
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d102      	bne.n	8002bee <ETH_SetMACConfig+0x5e>
 8002be8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bec:	e000      	b.n	8002bf0 <ETH_SetMACConfig+0x60>
 8002bee:	2200      	movs	r2, #0
                        macconf->Speed |
 8002bf0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7f1b      	ldrb	r3, [r3, #28]
 8002bf6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bf8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bfe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d102      	bne.n	8002c18 <ETH_SetMACConfig+0x88>
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	e000      	b.n	8002c1a <ETH_SetMACConfig+0x8a>
 8002c18:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7bdb      	ldrb	r3, [r3, #15]
 8002c20:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c22:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c30:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c32:	4313      	orrs	r3, r2
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f7fe fcac 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c66:	4013      	ands	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d101      	bne.n	8002c7e <ETH_SetMACConfig+0xee>
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	e000      	b.n	8002c80 <ETH_SetMACConfig+0xf0>
 8002c7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c80:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002c8e:	2a01      	cmp	r2, #1
 8002c90:	d101      	bne.n	8002c96 <ETH_SetMACConfig+0x106>
 8002c92:	2208      	movs	r2, #8
 8002c94:	e000      	b.n	8002c98 <ETH_SetMACConfig+0x108>
 8002c96:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ca0:	2a01      	cmp	r2, #1
 8002ca2:	d101      	bne.n	8002ca8 <ETH_SetMACConfig+0x118>
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	e000      	b.n	8002caa <ETH_SetMACConfig+0x11a>
 8002ca8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002caa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002cb2:	2a01      	cmp	r2, #1
 8002cb4:	d101      	bne.n	8002cba <ETH_SetMACConfig+0x12a>
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	e000      	b.n	8002cbc <ETH_SetMACConfig+0x12c>
 8002cba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7fe fc67 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	ff20810f 	.word	0xff20810f

08002cf0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <ETH_SetDMAConfig+0x110>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	7b1b      	ldrb	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <ETH_SetDMAConfig+0x2c>
 8002d16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d1a:	e000      	b.n	8002d1e <ETH_SetDMAConfig+0x2e>
 8002d1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	7b5b      	ldrb	r3, [r3, #13]
 8002d22:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d24:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	7f52      	ldrb	r2, [r2, #29]
 8002d2a:	2a00      	cmp	r2, #0
 8002d2c:	d102      	bne.n	8002d34 <ETH_SetDMAConfig+0x44>
 8002d2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d32:	e000      	b.n	8002d36 <ETH_SetDMAConfig+0x46>
 8002d34:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d36:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	7b9b      	ldrb	r3, [r3, #14]
 8002d3c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d3e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7f1b      	ldrb	r3, [r3, #28]
 8002d4a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d4c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	7f9b      	ldrb	r3, [r3, #30]
 8002d52:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d54:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d62:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d64:	4313      	orrs	r3, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d74:	461a      	mov	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d86:	2001      	movs	r0, #1
 8002d88:	f7fe fc0e 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	791b      	ldrb	r3, [r3, #4]
 8002d9e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002da4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002daa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002db0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002db8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002dba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002dc2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002dc8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dd6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fe fbdf 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	f8de3f23 	.word	0xf8de3f23

08002e04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b0a6      	sub	sp, #152	; 0x98
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e40:	2300      	movs	r3, #0
 8002e42:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fe86 	bl	8002b90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ebe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ed4:	f107 0308 	add.w	r3, r7, #8
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff08 	bl	8002cf0 <ETH_SetDMAConfig>
}
 8002ee0:	bf00      	nop
 8002ee2:	3798      	adds	r7, #152	; 0x98
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3305      	adds	r3, #5
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	3204      	adds	r2, #4
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <ETH_MACAddressConfig+0x68>)
 8002f0a:	4413      	add	r3, r2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3303      	adds	r3, #3
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3301      	adds	r3, #1
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <ETH_MACAddressConfig+0x6c>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40028040 	.word	0x40028040
 8002f54:	40028044 	.word	0x40028044

08002f58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e03e      	b.n	8002fe4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	3206      	adds	r2, #6
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d80c      	bhi.n	8002fc8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68d9      	ldr	r1, [r3, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	e004      	b.n	8002fd2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d9bd      	bls.n	8002f66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffc:	611a      	str	r2, [r3, #16]
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e046      	b.n	80030a6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6919      	ldr	r1, [r3, #16]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003054:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800305c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	3212      	adds	r2, #18
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d80c      	bhi.n	8003096 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6919      	ldr	r1, [r3, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	e004      	b.n	80030a0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d9b5      	bls.n	8003018 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d6:	60da      	str	r2, [r3, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e177      	b.n	80033f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 8166 	bne.w	80033ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80c0 	beq.w	80033ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_GPIO_Init+0x324>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a65      	ldr	r2, [pc, #404]	; (8003408 <HAL_GPIO_Init+0x324>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_GPIO_Init+0x324>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_GPIO_Init+0x328>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d037      	beq.n	8003322 <HAL_GPIO_Init+0x23e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_GPIO_Init+0x23a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a56      	ldr	r2, [pc, #344]	; (8003418 <HAL_GPIO_Init+0x334>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02b      	beq.n	800331a <HAL_GPIO_Init+0x236>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a55      	ldr	r2, [pc, #340]	; (800341c <HAL_GPIO_Init+0x338>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x232>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a54      	ldr	r2, [pc, #336]	; (8003420 <HAL_GPIO_Init+0x33c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x22e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a53      	ldr	r2, [pc, #332]	; (8003424 <HAL_GPIO_Init+0x340>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x22a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x344>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a51      	ldr	r2, [pc, #324]	; (800342c <HAL_GPIO_Init+0x348>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_GPIO_Init+0x34c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <HAL_GPIO_Init+0x350>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x21a>
 80032fa:	2309      	movs	r3, #9
 80032fc:	e012      	b.n	8003324 <HAL_GPIO_Init+0x240>
 80032fe:	230a      	movs	r3, #10
 8003300:	e010      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003302:	2308      	movs	r3, #8
 8003304:	e00e      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003306:	2307      	movs	r3, #7
 8003308:	e00c      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330a:	2306      	movs	r3, #6
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003312:	2304      	movs	r3, #4
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003322:	2300      	movs	r3, #0
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f002 0203 	and.w	r2, r2, #3
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	; (800340c <HAL_GPIO_Init+0x328>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336c:	4b32      	ldr	r3, [pc, #200]	; (8003438 <HAL_GPIO_Init+0x354>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003396:	4b28      	ldr	r3, [pc, #160]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e4:	4a14      	ldr	r2, [pc, #80]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f ae84 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40013800 	.word	0x40013800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40022000 	.word	0x40022000
 8003434:	40022400 	.word	0x40022400
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003458:	e003      	b.n	8003462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800346e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003470:	b08f      	sub	sp, #60	; 0x3c
 8003472:	af0a      	add	r7, sp, #40	; 0x28
 8003474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e10f      	b.n	80036a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fef2 	bl	8001284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2203      	movs	r2, #3
 80034a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f002 faff 	bl	8005ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	687e      	ldr	r6, [r7, #4]
 80034cc:	466d      	mov	r5, sp
 80034ce:	f106 0410 	add.w	r4, r6, #16
 80034d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034de:	e885 0003 	stmia.w	r5, {r0, r1}
 80034e2:	1d33      	adds	r3, r6, #4
 80034e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	f002 fa8a 	bl	8005a00 <USB_CoreInit>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0d0      	b.n	80036a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f002 faed 	bl	8005ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e04a      	b.n	80035a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	333d      	adds	r3, #61	; 0x3d
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	333c      	adds	r3, #60	; 0x3c
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	b298      	uxth	r0, r3
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3344      	adds	r3, #68	; 0x44
 800354c:	4602      	mov	r2, r0
 800354e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3340      	adds	r3, #64	; 0x40
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3348      	adds	r3, #72	; 0x48
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334c      	adds	r3, #76	; 0x4c
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3354      	adds	r3, #84	; 0x54
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	3301      	adds	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d3af      	bcc.n	8003510 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e044      	b.n	8003640 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3301      	adds	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d3b5      	bcc.n	80035b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	687e      	ldr	r6, [r7, #4]
 8003652:	466d      	mov	r5, sp
 8003654:	f106 0410 	add.w	r4, r6, #16
 8003658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003664:	e885 0003 	stmia.w	r5, {r0, r1}
 8003668:	1d33      	adds	r3, r6, #4
 800366a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800366c:	6838      	ldr	r0, [r7, #0]
 800366e:	f002 fa85 	bl	8005b7c <USB_DevInit>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e00d      	b.n	80036a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f002 fc50 	bl	8005f3e <USB_DevDisconnect>

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e267      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d075      	beq.n	80037b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c6:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d00c      	beq.n	80036ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d2:	4b85      	ldr	r3, [pc, #532]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d112      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036de:	4b82      	ldr	r3, [pc, #520]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d10b      	bne.n	8003704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x108>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d157      	bne.n	80037b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e242      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d106      	bne.n	800371c <HAL_RCC_OscConfig+0x74>
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a75      	ldr	r2, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xb0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x98>
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6f      	ldr	r2, [pc, #444]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6c      	ldr	r2, [pc, #432]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xb0>
 8003740:	4b69      	ldr	r3, [pc, #420]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a68      	ldr	r2, [pc, #416]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd ff16 	bl	8001590 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fd ff12 	bl	8001590 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e207      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b5b      	ldr	r3, [pc, #364]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xc0>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd ff02 	bl	8001590 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd fefe 	bl	8001590 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1f3      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	4b51      	ldr	r3, [pc, #324]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0xe8>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d063      	beq.n	8003886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d6:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x152>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1c7      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4937      	ldr	r1, [pc, #220]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	e03a      	b.n	8003886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <HAL_RCC_OscConfig+0x244>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd feb7 	bl	8001590 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003826:	f7fd feb3 	bl	8001590 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1a8      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4925      	ldr	r1, [pc, #148]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_OscConfig+0x244>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd fe96 	bl	8001590 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003868:	f7fd fe92 	bl	8001590 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e187      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d036      	beq.n	8003900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d016      	beq.n	80038c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_RCC_OscConfig+0x248>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd fe76 	bl	8001590 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fd fe72 	bl	8001590 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e167      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_OscConfig+0x240>)
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x200>
 80038c6:	e01b      	b.n	8003900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_OscConfig+0x248>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fd fe5f 	bl	8001590 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	e00e      	b.n	80038f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fd fe5b 	bl	8001590 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d907      	bls.n	80038f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e150      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	42470000 	.word	0x42470000
 80038f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f4:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80038f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ea      	bne.n	80038d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8097 	beq.w	8003a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	4b7d      	ldr	r3, [pc, #500]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a7c      	ldr	r2, [pc, #496]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b7a      	ldr	r3, [pc, #488]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b77      	ldr	r3, [pc, #476]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d118      	bne.n	800397c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394a:	4b74      	ldr	r3, [pc, #464]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a73      	ldr	r2, [pc, #460]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 8003950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003956:	f7fd fe1b 	bl	8001590 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395e:	f7fd fe17 	bl	8001590 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e10c      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <HAL_RCC_OscConfig+0x474>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x2ea>
 8003984:	4b64      	ldr	r3, [pc, #400]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6713      	str	r3, [r2, #112]	; 0x70
 8003990:	e01c      	b.n	80039cc <HAL_RCC_OscConfig+0x324>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x30c>
 800399a:	4b5f      	ldr	r3, [pc, #380]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a5e      	ldr	r2, [pc, #376]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	4b5c      	ldr	r3, [pc, #368]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a5b      	ldr	r2, [pc, #364]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
 80039b2:	e00b      	b.n	80039cc <HAL_RCC_OscConfig+0x324>
 80039b4:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a57      	ldr	r2, [pc, #348]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a54      	ldr	r2, [pc, #336]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f023 0304 	bic.w	r3, r3, #4
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d015      	beq.n	8003a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd fddc 	bl	8001590 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd fdd8 	bl	8001590 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0cb      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ee      	beq.n	80039dc <HAL_RCC_OscConfig+0x334>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a00:	f7fd fdc6 	bl	8001590 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fd fdc2 	bl	8001590 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0b5      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ee      	bne.n	8003a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a38      	ldr	r2, [pc, #224]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80a1 	beq.w	8003b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a46:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d05c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d141      	bne.n	8003ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_RCC_OscConfig+0x478>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fd fd96 	bl	8001590 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fd92 	bl	8001590 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e087      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	491b      	ldr	r1, [pc, #108]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x478>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fd6b 	bl	8001590 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd fd67 	bl	8001590 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e05c      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x416>
 8003adc:	e054      	b.n	8003b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fd54 	bl	8001590 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd fd50 	bl	8001590 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e045      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x444>
 8003b0a:	e03d      	b.n	8003b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e038      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x4ec>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d028      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d121      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d11a      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b54:	4013      	ands	r3, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d111      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800

08003b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0cc      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d044      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d119      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e067      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fd fc82 	bl	8001590 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fd fc7e 	bl	8001590 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e04f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d20c      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f821 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fafa 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08008c6c 	.word	0x08008c6c
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000004 	.word	0x20000004

08003d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d68:	b094      	sub	sp, #80	; 0x50
 8003d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	2300      	movs	r3, #0
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d74:	2300      	movs	r3, #0
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d7c:	4b79      	ldr	r3, [pc, #484]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d00d      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x40>
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	f200 80e1 	bhi.w	8003f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x34>
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d96:	e0db      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d9c:	e0db      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8003da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003da2:	e0d8      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da4:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dae:	4b6d      	ldr	r3, [pc, #436]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d063      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dba:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dce:	2300      	movs	r3, #0
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	f04f 0000 	mov.w	r0, #0
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	0159      	lsls	r1, r3, #5
 8003de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de8:	0150      	lsls	r0, r2, #5
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4621      	mov	r1, r4
 8003df0:	1a51      	subs	r1, r2, r1
 8003df2:	6139      	str	r1, [r7, #16]
 8003df4:	4629      	mov	r1, r5
 8003df6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e08:	4659      	mov	r1, fp
 8003e0a:	018b      	lsls	r3, r1, #6
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e12:	4651      	mov	r1, sl
 8003e14:	018a      	lsls	r2, r1, #6
 8003e16:	4651      	mov	r1, sl
 8003e18:	ebb2 0801 	subs.w	r8, r2, r1
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e36:	4690      	mov	r8, r2
 8003e38:	4699      	mov	r9, r3
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	eb18 0303 	adds.w	r3, r8, r3
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	462b      	mov	r3, r5
 8003e44:	eb49 0303 	adc.w	r3, r9, r3
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e56:	4629      	mov	r1, r5
 8003e58:	024b      	lsls	r3, r1, #9
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e60:	4621      	mov	r1, r4
 8003e62:	024a      	lsls	r2, r1, #9
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e74:	f7fc f9bc 	bl	80001f0 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e80:	e058      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e92:	623b      	str	r3, [r7, #32]
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
 8003e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0159      	lsls	r1, r3, #5
 8003eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eae:	0150      	lsls	r0, r2, #5
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eba:	4649      	mov	r1, r9
 8003ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	00eb      	lsls	r3, r5, #3
 8003ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eea:	00e2      	lsls	r2, r4, #3
 8003eec:	4614      	mov	r4, r2
 8003eee:	461d      	mov	r5, r3
 8003ef0:	4643      	mov	r3, r8
 8003ef2:	18e3      	adds	r3, r4, r3
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	eb45 0303 	adc.w	r3, r5, r3
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	028b      	lsls	r3, r1, #10
 8003f0e:	4621      	mov	r1, r4
 8003f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f14:	4621      	mov	r1, r4
 8003f16:	028a      	lsls	r2, r1, #10
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	61fa      	str	r2, [r7, #28]
 8003f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f28:	f7fc f962 	bl	80001f0 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4613      	mov	r3, r2
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3750      	adds	r7, #80	; 0x50
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200

08003f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000000 	.word	0x20000000

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f8c:	f7ff fff0 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4903      	ldr	r1, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08008c7c 	.word	0x08008c7c

08003fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb4:	f7ff ffdc 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0b5b      	lsrs	r3, r3, #13
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	08008c7c 	.word	0x08008c7c

08003fd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_GetClockConfig+0x5c>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCC_GetClockConfig+0x60>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800
 8004038:	40023c00 	.word	0x40023c00

0800403c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e041      	b.n	80040d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd f81a 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 fe5e 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e04e      	b.n	8004192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	; (80041a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411e:	d01d      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_TIM_Base_Start_IT+0xd0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d111      	bne.n	8004180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b06      	cmp	r3, #6
 800416c:	d010      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	e007      	b.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40001800 	.word	0x40001800

080041bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e041      	b.n	8004252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f839 	bl	800425a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 fd9e 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e022      	b.n	80042e2 <HAL_TIM_PWM_Start_DMA+0x72>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d109      	bne.n	80042b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e015      	b.n	80042e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d109      	bne.n	80042d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e008      	b.n	80042e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	e171      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_TIM_PWM_Start_DMA+0x94>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e022      	b.n	800434a <HAL_TIM_PWM_Start_DMA+0xda>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b04      	cmp	r3, #4
 8004308:	d109      	bne.n	800431e <HAL_TIM_PWM_Start_DMA+0xae>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	e015      	b.n	800434a <HAL_TIM_PWM_Start_DMA+0xda>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d109      	bne.n	8004338 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e008      	b.n	800434a <HAL_TIM_PWM_Start_DMA+0xda>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d024      	beq.n	8004398 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <HAL_TIM_PWM_Start_DMA+0xee>
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e137      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	e016      	b.n	800439c <HAL_TIM_PWM_Start_DMA+0x12c>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d104      	bne.n	800437e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437c:	e00e      	b.n	800439c <HAL_TIM_PWM_Start_DMA+0x12c>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	e006      	b.n	800439c <HAL_TIM_PWM_Start_DMA+0x12c>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004396:	e001      	b.n	800439c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e118      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	f200 80ae 	bhi.w	8004500 <HAL_TIM_PWM_Start_DMA+0x290>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <HAL_TIM_PWM_Start_DMA+0x13c>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	08004501 	.word	0x08004501
 80043b4:	08004501 	.word	0x08004501
 80043b8:	08004501 	.word	0x08004501
 80043bc:	08004429 	.word	0x08004429
 80043c0:	08004501 	.word	0x08004501
 80043c4:	08004501 	.word	0x08004501
 80043c8:	08004501 	.word	0x08004501
 80043cc:	08004471 	.word	0x08004471
 80043d0:	08004501 	.word	0x08004501
 80043d4:	08004501 	.word	0x08004501
 80043d8:	08004501 	.word	0x08004501
 80043dc:	080044b9 	.word	0x080044b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	4a7c      	ldr	r2, [pc, #496]	; (80045d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80043e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	4a7b      	ldr	r2, [pc, #492]	; (80045dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	4a7a      	ldr	r2, [pc, #488]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80043f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3334      	adds	r3, #52	; 0x34
 8004404:	461a      	mov	r2, r3
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	f7fe f882 	bl	8002510 <HAL_DMA_Start_IT>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0db      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	60da      	str	r2, [r3, #12]
      break;
 8004426:	e06e      	b.n	8004506 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	4a69      	ldr	r2, [pc, #420]	; (80045dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	4a68      	ldr	r2, [pc, #416]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 800443e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3338      	adds	r3, #56	; 0x38
 800444c:	461a      	mov	r2, r3
 800444e:	887b      	ldrh	r3, [r7, #2]
 8004450:	f7fe f85e 	bl	8002510 <HAL_DMA_Start_IT>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0b7      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800446c:	60da      	str	r2, [r3, #12]
      break;
 800446e:	e04a      	b.n	8004506 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a57      	ldr	r2, [pc, #348]	; (80045dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	4a56      	ldr	r2, [pc, #344]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004486:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	333c      	adds	r3, #60	; 0x3c
 8004494:	461a      	mov	r2, r3
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	f7fe f83a 	bl	8002510 <HAL_DMA_Start_IT>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e093      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b4:	60da      	str	r2, [r3, #12]
      break;
 80044b6:	e026      	b.n	8004506 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4a46      	ldr	r2, [pc, #280]	; (80045d8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80044be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4a45      	ldr	r2, [pc, #276]	; (80045dc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80044ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3340      	adds	r3, #64	; 0x40
 80044dc:	461a      	mov	r2, r3
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	f7fe f816 	bl	8002510 <HAL_DMA_Start_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e06f      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044fc:	60da      	str	r2, [r3, #12]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
      break;
 8004504:	bf00      	nop
  }

  if (status == HAL_OK)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d15f      	bne.n	80045cc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fefb 	bl	8005310 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a31      	ldr	r2, [pc, #196]	; (80045e4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIM_PWM_Start_DMA+0x2be>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2f      	ldr	r2, [pc, #188]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x378>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004546:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <HAL_TIM_PWM_Start_DMA+0x374>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d022      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d01d      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <HAL_TIM_PWM_Start_DMA+0x380>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_TIM_PWM_Start_DMA+0x388>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_TIM_PWM_Start_DMA+0x328>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d111      	bne.n	80045bc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d010      	beq.n	80045cc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	e007      	b.n	80045cc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	08004c2d 	.word	0x08004c2d
 80045dc:	08004cd5 	.word	0x08004cd5
 80045e0:	08004b9b 	.word	0x08004b9b
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40001800 	.word	0x40001800

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0202 	mvn.w	r2, #2
 800462c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa77 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa69 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fa7a 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b04      	cmp	r3, #4
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa4d 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa3f 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa50 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0208 	mvn.w	r2, #8
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa23 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa15 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fa26 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0210 	mvn.w	r2, #16
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2208      	movs	r2, #8
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9f9 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9eb 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9fc 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fa90 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fe5c 	bl	8005468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9cb 	bl	8004b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0220 	mvn.w	r2, #32
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fe26 	bl	8005454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800482a:	2302      	movs	r3, #2
 800482c:	e0ae      	b.n	800498c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0c      	cmp	r3, #12
 800483a:	f200 809f 	bhi.w	800497c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004879 	.word	0x08004879
 8004848:	0800497d 	.word	0x0800497d
 800484c:	0800497d 	.word	0x0800497d
 8004850:	0800497d 	.word	0x0800497d
 8004854:	080048b9 	.word	0x080048b9
 8004858:	0800497d 	.word	0x0800497d
 800485c:	0800497d 	.word	0x0800497d
 8004860:	0800497d 	.word	0x0800497d
 8004864:	080048fb 	.word	0x080048fb
 8004868:	0800497d 	.word	0x0800497d
 800486c:	0800497d 	.word	0x0800497d
 8004870:	0800497d 	.word	0x0800497d
 8004874:	0800493b 	.word	0x0800493b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fafc 	bl	8004e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0208 	orr.w	r2, r2, #8
 8004892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	619a      	str	r2, [r3, #24]
      break;
 80048b6:	e064      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fb4c 	bl	8004f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]
      break;
 80048f8:	e043      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fba1 	bl	8005048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0208 	orr.w	r2, r2, #8
 8004914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0204 	bic.w	r2, r2, #4
 8004924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69d9      	ldr	r1, [r3, #28]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	61da      	str	r2, [r3, #28]
      break;
 8004938:	e023      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fbf5 	bl	8005130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69d9      	ldr	r1, [r3, #28]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	61da      	str	r2, [r3, #28]
      break;
 800497a:	e002      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
      break;
 8004980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_ConfigClockSource+0x1c>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0b4      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x186>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d03e      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xd4>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	f200 8087 	bhi.w	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	f000 8086 	beq.w	8004b06 <HAL_TIM_ConfigClockSource+0x172>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d87f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d01a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xa6>
 8004a04:	2b70      	cmp	r3, #112	; 0x70
 8004a06:	d87b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d050      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x11a>
 8004a0c:	2b60      	cmp	r3, #96	; 0x60
 8004a0e:	d877      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b50      	cmp	r3, #80	; 0x50
 8004a12:	d03c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xfa>
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d873      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d058      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x13a>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d86f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b30      	cmp	r3, #48	; 0x30
 8004a22:	d064      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d86b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d060      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d867      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d05a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a38:	e062      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f000 fc41 	bl	80052d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	609a      	str	r2, [r3, #8]
      break;
 8004a66:	e04f      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f000 fc2a 	bl	80052d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e03c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fb9e 	bl	80051dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2150      	movs	r1, #80	; 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fbf7 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004aac:	e02c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fbbd 	bl	800523a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2160      	movs	r1, #96	; 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fbe7 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004acc:	e01c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fb7e 	bl	80051dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fbd7 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fbce 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d107      	bne.n	8004bc2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	e02a      	b.n	8004c18 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bda:	e01d      	b.n	8004c18 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d107      	bne.n	8004bf6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2204      	movs	r2, #4
 8004bea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	e010      	b.n	8004c18 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2208      	movs	r2, #8
 8004c04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c0e:	e003      	b.n	8004c18 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff ffb4 	bl	8004b86 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d10b      	bne.n	8004c5c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d136      	bne.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5a:	e031      	b.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d10b      	bne.n	8004c7e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d125      	bne.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c7c:	e020      	b.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d10b      	bne.n	8004ca0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d114      	bne.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9e:	e00f      	b.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d10a      	bne.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2208      	movs	r2, #8
 8004cae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff42 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d103      	bne.n	8004cf4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	771a      	strb	r2, [r3, #28]
 8004cf2:	e019      	b.n	8004d28 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d103      	bne.n	8004d06 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
 8004d04:	e010      	b.n	8004d28 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2204      	movs	r2, #4
 8004d14:	771a      	strb	r2, [r3, #28]
 8004d16:	e007      	b.n	8004d28 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d102      	bne.n	8004d28 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2208      	movs	r2, #8
 8004d26:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff ff18 	bl	8004b5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a40      	ldr	r2, [pc, #256]	; (8004e50 <TIM_Base_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d00f      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3d      	ldr	r2, [pc, #244]	; (8004e54 <TIM_Base_SetConfig+0x118>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <TIM_Base_SetConfig+0x11c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <TIM_Base_SetConfig+0x120>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <TIM_Base_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2f      	ldr	r2, [pc, #188]	; (8004e50 <TIM_Base_SetConfig+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d027      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	; (8004e54 <TIM_Base_SetConfig+0x118>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d023      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	; (8004e58 <TIM_Base_SetConfig+0x11c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	; (8004e5c <TIM_Base_SetConfig+0x120>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <TIM_Base_SetConfig+0x124>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d017      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <TIM_Base_SetConfig+0x128>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <TIM_Base_SetConfig+0x130>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <TIM_Base_SetConfig+0x134>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <TIM_Base_SetConfig+0x138>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <TIM_Base_SetConfig+0x114>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <TIM_Base_SetConfig+0x124>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]
}
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800
 8004e70:	40001800 	.word	0x40001800
 8004e74:	40001c00 	.word	0x40001c00
 8004e78:	40002000 	.word	0x40002000

08004e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f023 0201 	bic.w	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 0302 	bic.w	r3, r3, #2
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <TIM_OC1_SetConfig+0xd8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x64>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <TIM_OC1_SetConfig+0xdc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <TIM_OC1_SetConfig+0xd8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1_SetConfig+0x8e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <TIM_OC1_SetConfig+0xdc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a22      	ldr	r2, [pc, #136]	; (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC2_SetConfig+0x68>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10d      	bne.n	8004fe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	; (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC2_SetConfig+0x94>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a16      	ldr	r2, [pc, #88]	; (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d113      	bne.n	8005018 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400

08005048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a21      	ldr	r2, [pc, #132]	; (8005128 <TIM_OC3_SetConfig+0xe0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_OC3_SetConfig+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a20      	ldr	r2, [pc, #128]	; (800512c <TIM_OC3_SetConfig+0xe4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10d      	bne.n	80050ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a16      	ldr	r2, [pc, #88]	; (8005128 <TIM_OC3_SetConfig+0xe0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC3_SetConfig+0x92>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <TIM_OC3_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40010000 	.word	0x40010000
 800512c:	40010400 	.word	0x40010400

08005130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <TIM_OC4_SetConfig+0xa4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC4_SetConfig+0x68>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <TIM_OC4_SetConfig+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0210 	bic.w	r2, r3, #16
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2201      	movs	r2, #1
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005370:	2302      	movs	r3, #2
 8005372:	e05a      	b.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c0:	d01d      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1d      	ldr	r2, [pc, #116]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1a      	ldr	r2, [pc, #104]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a18      	ldr	r2, [pc, #96]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a17      	ldr	r2, [pc, #92]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a15      	ldr	r2, [pc, #84]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10c      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4313      	orrs	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40001800 	.word	0x40001800

08005454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e03f      	b.n	800550e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fea6 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f829 	bl	8005518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551c:	b0c0      	sub	sp, #256	; 0x100
 800551e:	af00      	add	r7, sp, #0
 8005520:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	68d9      	ldr	r1, [r3, #12]
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	ea40 0301 	orr.w	r3, r0, r1
 8005540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	431a      	orrs	r2, r3
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	431a      	orrs	r2, r3
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005570:	f021 010c 	bic.w	r1, r1, #12
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800557e:	430b      	orrs	r3, r1
 8005580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005592:	6999      	ldr	r1, [r3, #24]
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	ea40 0301 	orr.w	r3, r0, r1
 800559e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b8f      	ldr	r3, [pc, #572]	; (80057e4 <UART_SetConfig+0x2cc>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d005      	beq.n	80055b8 <UART_SetConfig+0xa0>
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b8d      	ldr	r3, [pc, #564]	; (80057e8 <UART_SetConfig+0x2d0>)
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d104      	bne.n	80055c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fe fcfa 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 80055bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055c0:	e003      	b.n	80055ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055c2:	f7fe fce1 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 80055c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d4:	f040 810c 	bne.w	80057f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	1891      	adds	r1, r2, r2
 80055f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80055f2:	415b      	adcs	r3, r3
 80055f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055fa:	4621      	mov	r1, r4
 80055fc:	eb12 0801 	adds.w	r8, r2, r1
 8005600:	4629      	mov	r1, r5
 8005602:	eb43 0901 	adc.w	r9, r3, r1
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561a:	4690      	mov	r8, r2
 800561c:	4699      	mov	r9, r3
 800561e:	4623      	mov	r3, r4
 8005620:	eb18 0303 	adds.w	r3, r8, r3
 8005624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005628:	462b      	mov	r3, r5
 800562a:	eb49 0303 	adc.w	r3, r9, r3
 800562e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800563e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005646:	460b      	mov	r3, r1
 8005648:	18db      	adds	r3, r3, r3
 800564a:	653b      	str	r3, [r7, #80]	; 0x50
 800564c:	4613      	mov	r3, r2
 800564e:	eb42 0303 	adc.w	r3, r2, r3
 8005652:	657b      	str	r3, [r7, #84]	; 0x54
 8005654:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800565c:	f7fa fdc8 	bl	80001f0 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4b61      	ldr	r3, [pc, #388]	; (80057ec <UART_SetConfig+0x2d4>)
 8005666:	fba3 2302 	umull	r2, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	011c      	lsls	r4, r3, #4
 800566e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005672:	2200      	movs	r2, #0
 8005674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005678:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800567c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	1891      	adds	r1, r2, r2
 8005686:	64b9      	str	r1, [r7, #72]	; 0x48
 8005688:	415b      	adcs	r3, r3
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005690:	4641      	mov	r1, r8
 8005692:	eb12 0a01 	adds.w	sl, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb43 0b01 	adc.w	fp, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b0:	4692      	mov	sl, r2
 80056b2:	469b      	mov	fp, r3
 80056b4:	4643      	mov	r3, r8
 80056b6:	eb1a 0303 	adds.w	r3, sl, r3
 80056ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056be:	464b      	mov	r3, r9
 80056c0:	eb4b 0303 	adc.w	r3, fp, r3
 80056c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056dc:	460b      	mov	r3, r1
 80056de:	18db      	adds	r3, r3, r3
 80056e0:	643b      	str	r3, [r7, #64]	; 0x40
 80056e2:	4613      	mov	r3, r2
 80056e4:	eb42 0303 	adc.w	r3, r2, r3
 80056e8:	647b      	str	r3, [r7, #68]	; 0x44
 80056ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056f2:	f7fa fd7d 	bl	80001f0 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	4b3b      	ldr	r3, [pc, #236]	; (80057ec <UART_SetConfig+0x2d4>)
 80056fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2264      	movs	r2, #100	; 0x64
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	1acb      	subs	r3, r1, r3
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005712:	4b36      	ldr	r3, [pc, #216]	; (80057ec <UART_SetConfig+0x2d4>)
 8005714:	fba3 2302 	umull	r2, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005720:	441c      	add	r4, r3
 8005722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005726:	2200      	movs	r2, #0
 8005728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800572c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005730:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005734:	4642      	mov	r2, r8
 8005736:	464b      	mov	r3, r9
 8005738:	1891      	adds	r1, r2, r2
 800573a:	63b9      	str	r1, [r7, #56]	; 0x38
 800573c:	415b      	adcs	r3, r3
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005744:	4641      	mov	r1, r8
 8005746:	1851      	adds	r1, r2, r1
 8005748:	6339      	str	r1, [r7, #48]	; 0x30
 800574a:	4649      	mov	r1, r9
 800574c:	414b      	adcs	r3, r1
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800575c:	4659      	mov	r1, fp
 800575e:	00cb      	lsls	r3, r1, #3
 8005760:	4651      	mov	r1, sl
 8005762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005766:	4651      	mov	r1, sl
 8005768:	00ca      	lsls	r2, r1, #3
 800576a:	4610      	mov	r0, r2
 800576c:	4619      	mov	r1, r3
 800576e:	4603      	mov	r3, r0
 8005770:	4642      	mov	r2, r8
 8005772:	189b      	adds	r3, r3, r2
 8005774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005778:	464b      	mov	r3, r9
 800577a:	460a      	mov	r2, r1
 800577c:	eb42 0303 	adc.w	r3, r2, r3
 8005780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005790:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005798:	460b      	mov	r3, r1
 800579a:	18db      	adds	r3, r3, r3
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
 800579e:	4613      	mov	r3, r2
 80057a0:	eb42 0303 	adc.w	r3, r2, r3
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057ae:	f7fa fd1f 	bl	80001f0 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <UART_SetConfig+0x2d4>)
 80057b8:	fba3 1302 	umull	r1, r3, r3, r2
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	2164      	movs	r1, #100	; 0x64
 80057c0:	fb01 f303 	mul.w	r3, r1, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	3332      	adds	r3, #50	; 0x32
 80057ca:	4a08      	ldr	r2, [pc, #32]	; (80057ec <UART_SetConfig+0x2d4>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f003 0207 	and.w	r2, r3, #7
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4422      	add	r2, r4
 80057de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057e0:	e105      	b.n	80059ee <UART_SetConfig+0x4d6>
 80057e2:	bf00      	nop
 80057e4:	40011000 	.word	0x40011000
 80057e8:	40011400 	.word	0x40011400
 80057ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005802:	4642      	mov	r2, r8
 8005804:	464b      	mov	r3, r9
 8005806:	1891      	adds	r1, r2, r2
 8005808:	6239      	str	r1, [r7, #32]
 800580a:	415b      	adcs	r3, r3
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
 800580e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005812:	4641      	mov	r1, r8
 8005814:	1854      	adds	r4, r2, r1
 8005816:	4649      	mov	r1, r9
 8005818:	eb43 0501 	adc.w	r5, r3, r1
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	00eb      	lsls	r3, r5, #3
 8005826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582a:	00e2      	lsls	r2, r4, #3
 800582c:	4614      	mov	r4, r2
 800582e:	461d      	mov	r5, r3
 8005830:	4643      	mov	r3, r8
 8005832:	18e3      	adds	r3, r4, r3
 8005834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005838:	464b      	mov	r3, r9
 800583a:	eb45 0303 	adc.w	r3, r5, r3
 800583e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800585e:	4629      	mov	r1, r5
 8005860:	008b      	lsls	r3, r1, #2
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005868:	4621      	mov	r1, r4
 800586a:	008a      	lsls	r2, r1, #2
 800586c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005870:	f7fa fcbe 	bl	80001f0 <__aeabi_uldivmod>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4b60      	ldr	r3, [pc, #384]	; (80059fc <UART_SetConfig+0x4e4>)
 800587a:	fba3 2302 	umull	r2, r3, r3, r2
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	011c      	lsls	r4, r3, #4
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800588c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	1891      	adds	r1, r2, r2
 800589a:	61b9      	str	r1, [r7, #24]
 800589c:	415b      	adcs	r3, r3
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a4:	4641      	mov	r1, r8
 80058a6:	1851      	adds	r1, r2, r1
 80058a8:	6139      	str	r1, [r7, #16]
 80058aa:	4649      	mov	r1, r9
 80058ac:	414b      	adcs	r3, r1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058bc:	4659      	mov	r1, fp
 80058be:	00cb      	lsls	r3, r1, #3
 80058c0:	4651      	mov	r1, sl
 80058c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c6:	4651      	mov	r1, sl
 80058c8:	00ca      	lsls	r2, r1, #3
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	4642      	mov	r2, r8
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058d8:	464b      	mov	r3, r9
 80058da:	460a      	mov	r2, r1
 80058dc:	eb42 0303 	adc.w	r3, r2, r3
 80058e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058fc:	4649      	mov	r1, r9
 80058fe:	008b      	lsls	r3, r1, #2
 8005900:	4641      	mov	r1, r8
 8005902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005906:	4641      	mov	r1, r8
 8005908:	008a      	lsls	r2, r1, #2
 800590a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800590e:	f7fa fc6f 	bl	80001f0 <__aeabi_uldivmod>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <UART_SetConfig+0x4e4>)
 8005918:	fba3 1302 	umull	r1, r3, r3, r2
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	2164      	movs	r1, #100	; 0x64
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	3332      	adds	r3, #50	; 0x32
 800592a:	4a34      	ldr	r2, [pc, #208]	; (80059fc <UART_SetConfig+0x4e4>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005936:	441c      	add	r4, r3
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	673b      	str	r3, [r7, #112]	; 0x70
 8005940:	677a      	str	r2, [r7, #116]	; 0x74
 8005942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005946:	4642      	mov	r2, r8
 8005948:	464b      	mov	r3, r9
 800594a:	1891      	adds	r1, r2, r2
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	415b      	adcs	r3, r3
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005956:	4641      	mov	r1, r8
 8005958:	1851      	adds	r1, r2, r1
 800595a:	6039      	str	r1, [r7, #0]
 800595c:	4649      	mov	r1, r9
 800595e:	414b      	adcs	r3, r1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800596e:	4659      	mov	r1, fp
 8005970:	00cb      	lsls	r3, r1, #3
 8005972:	4651      	mov	r1, sl
 8005974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005978:	4651      	mov	r1, sl
 800597a:	00ca      	lsls	r2, r1, #3
 800597c:	4610      	mov	r0, r2
 800597e:	4619      	mov	r1, r3
 8005980:	4603      	mov	r3, r0
 8005982:	4642      	mov	r2, r8
 8005984:	189b      	adds	r3, r3, r2
 8005986:	66bb      	str	r3, [r7, #104]	; 0x68
 8005988:	464b      	mov	r3, r9
 800598a:	460a      	mov	r2, r1
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	663b      	str	r3, [r7, #96]	; 0x60
 800599c:	667a      	str	r2, [r7, #100]	; 0x64
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059aa:	4649      	mov	r1, r9
 80059ac:	008b      	lsls	r3, r1, #2
 80059ae:	4641      	mov	r1, r8
 80059b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b4:	4641      	mov	r1, r8
 80059b6:	008a      	lsls	r2, r1, #2
 80059b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059bc:	f7fa fc18 	bl	80001f0 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <UART_SetConfig+0x4e4>)
 80059c6:	fba3 1302 	umull	r1, r3, r3, r2
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	2164      	movs	r1, #100	; 0x64
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	3332      	adds	r3, #50	; 0x32
 80059d8:	4a08      	ldr	r2, [pc, #32]	; (80059fc <UART_SetConfig+0x4e4>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4422      	add	r2, r4
 80059ec:	609a      	str	r2, [r3, #8]
}
 80059ee:	bf00      	nop
 80059f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059f4:	46bd      	mov	sp, r7
 80059f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059fa:	bf00      	nop
 80059fc:	51eb851f 	.word	0x51eb851f

08005a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a00:	b084      	sub	sp, #16
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	f107 001c 	add.w	r0, r7, #28
 8005a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d122      	bne.n	8005a5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 faa2 	bl	8005f9c <USB_CoreReset>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
 8005a5c:	e01a      	b.n	8005a94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa96 	bl	8005f9c <USB_CoreReset>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
 8005a86:	e005      	b.n	8005a94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10b      	bne.n	8005ab2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f043 0206 	orr.w	r2, r3, #6
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005abe:	b004      	add	sp, #16
 8005ac0:	4770      	bx	lr

08005ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d115      	bne.n	8005b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fb fd48 	bl	80015a8 <HAL_Delay>
      ms++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa2e 	bl	8005f80 <USB_GetMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d01e      	beq.n	8005b68 <USB_SetCurrentMode+0x84>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b31      	cmp	r3, #49	; 0x31
 8005b2e:	d9f0      	bls.n	8005b12 <USB_SetCurrentMode+0x2e>
 8005b30:	e01a      	b.n	8005b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d115      	bne.n	8005b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fb fd2f 	bl	80015a8 <HAL_Delay>
      ms++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa15 	bl	8005f80 <USB_GetMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <USB_SetCurrentMode+0x84>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b31      	cmp	r3, #49	; 0x31
 8005b60:	d9f0      	bls.n	8005b44 <USB_SetCurrentMode+0x60>
 8005b62:	e001      	b.n	8005b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e005      	b.n	8005b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b32      	cmp	r3, #50	; 0x32
 8005b6c:	d101      	bne.n	8005b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e009      	b.n	8005bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3340      	adds	r3, #64	; 0x40
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3301      	adds	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b0e      	cmp	r3, #14
 8005bb4:	d9f2      	bls.n	8005b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11c      	bne.n	8005bf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bca:	f043 0302 	orr.w	r3, r3, #2
 8005bce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf4:	e00b      	b.n	8005c0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	4619      	mov	r1, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	461a      	mov	r2, r3
 8005c2a:	680b      	ldr	r3, [r1, #0]
 8005c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10c      	bne.n	8005c4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f965 	bl	8005f0c <USB_SetDevSpeed>
 8005c42:	e008      	b.n	8005c56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c44:	2101      	movs	r1, #1
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f960 	bl	8005f0c <USB_SetDevSpeed>
 8005c4c:	e003      	b.n	8005c56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c4e:	2103      	movs	r1, #3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f95b 	bl	8005f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c56:	2110      	movs	r1, #16
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f8f3 	bl	8005e44 <USB_FlushTxFifo>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f91f 	bl	8005eac <USB_FlushRxFifo>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	461a      	mov	r2, r3
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e043      	b.n	8005d2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb8:	d118      	bne.n	8005cec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e013      	b.n	8005cfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e008      	b.n	8005cfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3b7      	bcc.n	8005ca2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	e043      	b.n	8005dc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4e:	d118      	bne.n	8005d82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e013      	b.n	8005d94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e008      	b.n	8005d94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	461a      	mov	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	461a      	mov	r2, r3
 8005db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d3b7      	bcc.n	8005d38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f043 0210 	orr.w	r2, r3, #16
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <USB_DevInit+0x2c4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d107      	bne.n	8005e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e3c:	b004      	add	sp, #16
 8005e3e:	4770      	bx	lr
 8005e40:	803c3800 	.word	0x803c3800

08005e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <USB_FlushTxFifo+0x64>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d901      	bls.n	8005e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e01b      	b.n	8005e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	daf2      	bge.n	8005e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	019b      	lsls	r3, r3, #6
 8005e74:	f043 0220 	orr.w	r2, r3, #32
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a08      	ldr	r2, [pc, #32]	; (8005ea8 <USB_FlushTxFifo+0x64>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e006      	b.n	8005e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d0f0      	beq.n	8005e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	00030d40 	.word	0x00030d40

08005eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <USB_FlushRxFifo+0x5c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d901      	bls.n	8005eca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e018      	b.n	8005efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	daf2      	bge.n	8005eb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <USB_FlushRxFifo+0x5c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e006      	b.n	8005efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d0f0      	beq.n	8005edc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	00030d40 	.word	0x00030d40

08005f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f58:	f023 0303 	bic.w	r3, r3, #3
 8005f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6c:	f043 0302 	orr.w	r3, r3, #2
 8005f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <USB_CoreReset+0x64>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e01b      	b.n	8005ff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	daf2      	bge.n	8005fa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f043 0201 	orr.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a09      	ldr	r2, [pc, #36]	; (8006000 <USB_CoreReset+0x64>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d901      	bls.n	8005fe4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e006      	b.n	8005ff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d0f0      	beq.n	8005fd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	00030d40 	.word	0x00030d40

08006004 <__NVIC_SetPriority>:
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	6039      	str	r1, [r7, #0]
 800600e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006014:	2b00      	cmp	r3, #0
 8006016:	db0a      	blt.n	800602e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	b2da      	uxtb	r2, r3
 800601c:	490c      	ldr	r1, [pc, #48]	; (8006050 <__NVIC_SetPriority+0x4c>)
 800601e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	440b      	add	r3, r1
 8006028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800602c:	e00a      	b.n	8006044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	4908      	ldr	r1, [pc, #32]	; (8006054 <__NVIC_SetPriority+0x50>)
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	3b04      	subs	r3, #4
 800603c:	0112      	lsls	r2, r2, #4
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	440b      	add	r3, r1
 8006042:	761a      	strb	r2, [r3, #24]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	e000e100 	.word	0xe000e100
 8006054:	e000ed00 	.word	0xe000ed00

08006058 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <SysTick_Handler+0x1c>)
 800605e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006060:	f001 fcfe 	bl	8007a60 <xTaskGetSchedulerState>
 8006064:	4603      	mov	r3, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d001      	beq.n	800606e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800606a:	f002 fae5 	bl	8008638 <xPortSysTickHandler>
  }
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	e000e010 	.word	0xe000e010

08006078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800607c:	2100      	movs	r1, #0
 800607e:	f06f 0004 	mvn.w	r0, #4
 8006082:	f7ff ffbf 	bl	8006004 <__NVIC_SetPriority>
#endif
}
 8006086:	bf00      	nop
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006092:	f3ef 8305 	mrs	r3, IPSR
 8006096:	603b      	str	r3, [r7, #0]
  return(result);
 8006098:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800609e:	f06f 0305 	mvn.w	r3, #5
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	e00c      	b.n	80060c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <osKernelInitialize+0x44>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060ae:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <osKernelInitialize+0x44>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e002      	b.n	80060c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060c0:	687b      	ldr	r3, [r7, #4]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	200009f8 	.word	0x200009f8

080060d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060da:	f3ef 8305 	mrs	r3, IPSR
 80060de:	603b      	str	r3, [r7, #0]
  return(result);
 80060e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80060e6:	f06f 0305 	mvn.w	r3, #5
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	e010      	b.n	8006110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <osKernelStart+0x48>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d109      	bne.n	800610a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80060f6:	f7ff ffbf 	bl	8006078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80060fa:	4b08      	ldr	r3, [pc, #32]	; (800611c <osKernelStart+0x48>)
 80060fc:	2202      	movs	r2, #2
 80060fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006100:	f001 f866 	bl	80071d0 <vTaskStartScheduler>
      stat = osOK;
 8006104:	2300      	movs	r3, #0
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	e002      	b.n	8006110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006110:	687b      	ldr	r3, [r7, #4]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200009f8 	.word	0x200009f8

08006120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b08e      	sub	sp, #56	; 0x38
 8006124:	af04      	add	r7, sp, #16
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006130:	f3ef 8305 	mrs	r3, IPSR
 8006134:	617b      	str	r3, [r7, #20]
  return(result);
 8006136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006138:	2b00      	cmp	r3, #0
 800613a:	d17e      	bne.n	800623a <osThreadNew+0x11a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d07b      	beq.n	800623a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006146:	2318      	movs	r3, #24
 8006148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800614e:	f04f 33ff 	mov.w	r3, #4294967295
 8006152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d045      	beq.n	80061e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <osThreadNew+0x48>
        name = attr->name;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <osThreadNew+0x6e>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b38      	cmp	r3, #56	; 0x38
 8006180:	d805      	bhi.n	800618e <osThreadNew+0x6e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <osThreadNew+0x72>
        return (NULL);
 800618e:	2300      	movs	r3, #0
 8006190:	e054      	b.n	800623c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00e      	beq.n	80061c8 <osThreadNew+0xa8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b5b      	cmp	r3, #91	; 0x5b
 80061b0:	d90a      	bls.n	80061c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d006      	beq.n	80061c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <osThreadNew+0xa8>
        mem = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	e010      	b.n	80061ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10c      	bne.n	80061ea <osThreadNew+0xca>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d108      	bne.n	80061ea <osThreadNew+0xca>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <osThreadNew+0xca>
          mem = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e001      	b.n	80061ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d110      	bne.n	8006212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061f8:	9202      	str	r2, [sp, #8]
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6a3a      	ldr	r2, [r7, #32]
 8006204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fe0c 	bl	8006e24 <xTaskCreateStatic>
 800620c:	4603      	mov	r3, r0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	e013      	b.n	800623a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d110      	bne.n	800623a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	b29a      	uxth	r2, r3
 800621c:	f107 0310 	add.w	r3, r7, #16
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fe57 	bl	8006ede <xTaskCreate>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d001      	beq.n	800623a <osThreadNew+0x11a>
            hTask = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800623a:	693b      	ldr	r3, [r7, #16]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3728      	adds	r7, #40	; 0x28
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800624c:	f3ef 8305 	mrs	r3, IPSR
 8006250:	60bb      	str	r3, [r7, #8]
  return(result);
 8006252:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <osDelay+0x1c>
    stat = osErrorISR;
 8006258:	f06f 0305 	mvn.w	r3, #5
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	e007      	b.n	8006270 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <osDelay+0x2c>
      vTaskDelay(ticks);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 ff7c 	bl	8007168 <vTaskDelay>
    }
  }

  return (stat);
 8006270:	68fb      	ldr	r3, [r7, #12]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800628c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4a06      	ldr	r2, [pc, #24]	; (80062ac <vApplicationGetIdleTaskMemory+0x30>)
 8006292:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2280      	movs	r2, #128	; 0x80
 8006298:	601a      	str	r2, [r3, #0]
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	200009fc 	.word	0x200009fc
 80062ac:	20000a58 	.word	0x20000a58

080062b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a07      	ldr	r2, [pc, #28]	; (80062dc <vApplicationGetTimerTaskMemory+0x2c>)
 80062c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a06      	ldr	r2, [pc, #24]	; (80062e0 <vApplicationGetTimerTaskMemory+0x30>)
 80062c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062ce:	601a      	str	r2, [r3, #0]
}
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000c58 	.word	0x20000c58
 80062e0:	20000cb4 	.word	0x20000cb4

080062e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f103 0208 	add.w	r2, r3, #8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f04f 32ff 	mov.w	r2, #4294967295
 80062fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f103 0208 	add.w	r2, r3, #8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f103 0208 	add.w	r2, r3, #8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	601a      	str	r2, [r3, #0]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d103      	bne.n	80063a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e00c      	b.n	80063c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3308      	adds	r3, #8
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	e002      	b.n	80063b4 <vListInsert+0x2e>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d2f6      	bcs.n	80063ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6892      	ldr	r2, [r2, #8]
 800640e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d103      	bne.n	800642c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1e5a      	subs	r2, r3, #1
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006476:	f002 f84d 	bl	8008514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	441a      	add	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	3b01      	subs	r3, #1
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	441a      	add	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d114      	bne.n	80064f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3310      	adds	r3, #16
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 f903 	bl	80076e4 <xTaskRemoveFromEventList>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <xQueueGenericReset+0xcc>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	e009      	b.n	800650a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3310      	adds	r3, #16
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fef2 	bl	80062e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3324      	adds	r3, #36	; 0x24
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff feed 	bl	80062e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800650a:	f002 f833 	bl	8008574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800650e:	2301      	movs	r3, #1
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08e      	sub	sp, #56	; 0x38
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <xQueueGenericCreateStatic+0x52>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <xQueueGenericCreateStatic+0x56>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <xQueueGenericCreateStatic+0x58>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	623b      	str	r3, [r7, #32]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <xQueueGenericCreateStatic+0x7e>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <xQueueGenericCreateStatic+0x82>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <xQueueGenericCreateStatic+0x84>
 800659e:	2300      	movs	r3, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	61fb      	str	r3, [r7, #28]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065ba:	2350      	movs	r3, #80	; 0x50
 80065bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b50      	cmp	r3, #80	; 0x50
 80065c2:	d00a      	beq.n	80065da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61bb      	str	r3, [r7, #24]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f805 	bl	800660c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006604:	4618      	mov	r0, r3
 8006606:	3730      	adds	r7, #48	; 0x30
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e002      	b.n	800662e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800663a:	2101      	movs	r1, #1
 800663c:	69b8      	ldr	r0, [r7, #24]
 800663e:	f7ff ff05 	bl	800644c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xQueueGenericSend+0x32>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <xQueueGenericSend+0x40>
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <xQueueGenericSend+0x44>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <xQueueGenericSend+0x46>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <xQueueGenericSend+0x60>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <xQueueGenericSend+0x6e>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSend+0x72>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSend+0x74>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	623b      	str	r3, [r7, #32]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e2:	f001 f9bd 	bl	8007a60 <xTaskGetSchedulerState>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xQueueGenericSend+0x9e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueGenericSend+0xa2>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericSend+0xa4>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueGenericSend+0xbe>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61fb      	str	r3, [r7, #28]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006712:	f001 feff 	bl	8008514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	429a      	cmp	r2, r3
 8006720:	d302      	bcc.n	8006728 <xQueueGenericSend+0xd4>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d129      	bne.n	800677c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800672e:	f000 fa0b 	bl	8006b48 <prvCopyDataToQueue>
 8006732:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	4618      	mov	r0, r3
 8006742:	f000 ffcf 	bl	80076e4 <xTaskRemoveFromEventList>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800674c:	4b3f      	ldr	r3, [pc, #252]	; (800684c <xQueueGenericSend+0x1f8>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	e00a      	b.n	8006774 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006764:	4b39      	ldr	r3, [pc, #228]	; (800684c <xQueueGenericSend+0x1f8>)
 8006766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006774:	f001 fefe 	bl	8008574 <vPortExitCritical>
				return pdPASS;
 8006778:	2301      	movs	r3, #1
 800677a:	e063      	b.n	8006844 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006782:	f001 fef7 	bl	8008574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006786:	2300      	movs	r3, #0
 8006788:	e05c      	b.n	8006844 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f809 	bl	80077ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800679e:	f001 fee9 	bl	8008574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067a2:	f000 fd7b 	bl	800729c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067a6:	f001 feb5 	bl	8008514 <vPortEnterCritical>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d103      	bne.n	80067c0 <xQueueGenericSend+0x16c>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c6:	b25b      	sxtb	r3, r3
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d103      	bne.n	80067d6 <xQueueGenericSend+0x182>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d6:	f001 fecd 	bl	8008574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067da:	1d3a      	adds	r2, r7, #4
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fff8 	bl	80077d8 <xTaskCheckForTimeOut>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d124      	bne.n	8006838 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f0:	f000 faa2 	bl	8006d38 <prvIsQueueFull>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d018      	beq.n	800682c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	3310      	adds	r3, #16
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f000 ff1e 	bl	8007644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800680a:	f000 fa2d 	bl	8006c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800680e:	f000 fd53 	bl	80072b8 <xTaskResumeAll>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	f47f af7c 	bne.w	8006712 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800681a:	4b0c      	ldr	r3, [pc, #48]	; (800684c <xQueueGenericSend+0x1f8>)
 800681c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	e772      	b.n	8006712 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800682c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800682e:	f000 fa1b 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006832:	f000 fd41 	bl	80072b8 <xTaskResumeAll>
 8006836:	e76c      	b.n	8006712 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800683a:	f000 fa15 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800683e:	f000 fd3b 	bl	80072b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006844:	4618      	mov	r0, r3
 8006846:	3738      	adds	r7, #56	; 0x38
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b090      	sub	sp, #64	; 0x40
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <xQueueGenericSendFromISR+0x3c>
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <xQueueGenericSendFromISR+0x40>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <xQueueGenericSendFromISR+0x42>
 8006890:	2300      	movs	r3, #0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d103      	bne.n	80068ba <xQueueGenericSendFromISR+0x6a>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <xQueueGenericSendFromISR+0x6e>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xQueueGenericSendFromISR+0x70>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	623b      	str	r3, [r7, #32]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068da:	f001 fefd 	bl	80086d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068de:	f3ef 8211 	mrs	r2, BASEPRI
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	429a      	cmp	r2, r3
 8006904:	d302      	bcc.n	800690c <xQueueGenericSendFromISR+0xbc>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d12f      	bne.n	800696c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006922:	f000 f911 	bl	8006b48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006926:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d112      	bne.n	8006956 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d016      	beq.n	8006966 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	3324      	adds	r3, #36	; 0x24
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fed1 	bl	80076e4 <xTaskRemoveFromEventList>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e007      	b.n	8006966 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800695a:	3301      	adds	r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	b25a      	sxtb	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006966:	2301      	movs	r3, #1
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800696a:	e001      	b.n	8006970 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800696c:	2300      	movs	r3, #0
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800697a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800697c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800697e:	4618      	mov	r0, r3
 8006980:	3740      	adds	r7, #64	; 0x40
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08c      	sub	sp, #48	; 0x30
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <xQueueReceive+0x30>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	623b      	str	r3, [r7, #32]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueReceive+0x3e>
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueReceive+0x42>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueReceive+0x44>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueReceive+0x5e>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61fb      	str	r3, [r7, #28]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e6:	f001 f83b 	bl	8007a60 <xTaskGetSchedulerState>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <xQueueReceive+0x6e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <xQueueReceive+0x72>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <xQueueReceive+0x74>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <xQueueReceive+0x8e>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	61bb      	str	r3, [r7, #24]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a16:	f001 fd7d 	bl	8008514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01f      	beq.n	8006a66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2a:	f000 f8f7 	bl	8006c1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1e5a      	subs	r2, r3, #1
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00f      	beq.n	8006a5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	3310      	adds	r3, #16
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fe4e 	bl	80076e4 <xTaskRemoveFromEventList>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a4e:	4b3d      	ldr	r3, [pc, #244]	; (8006b44 <xQueueReceive+0x1bc>)
 8006a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a5e:	f001 fd89 	bl	8008574 <vPortExitCritical>
				return pdPASS;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e069      	b.n	8006b3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a6c:	f001 fd82 	bl	8008574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a70:	2300      	movs	r3, #0
 8006a72:	e062      	b.n	8006b3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a7a:	f107 0310 	add.w	r3, r7, #16
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fe94 	bl	80077ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a84:	2301      	movs	r3, #1
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a88:	f001 fd74 	bl	8008574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a8c:	f000 fc06 	bl	800729c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a90:	f001 fd40 	bl	8008514 <vPortEnterCritical>
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d103      	bne.n	8006aaa <xQueueReceive+0x122>
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d103      	bne.n	8006ac0 <xQueueReceive+0x138>
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac0:	f001 fd58 	bl	8008574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ac4:	1d3a      	adds	r2, r7, #4
 8006ac6:	f107 0310 	add.w	r3, r7, #16
 8006aca:	4611      	mov	r1, r2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fe83 	bl	80077d8 <xTaskCheckForTimeOut>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d123      	bne.n	8006b20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ada:	f000 f917 	bl	8006d0c <prvIsQueueEmpty>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d017      	beq.n	8006b14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fda9 	bl	8007644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af4:	f000 f8b8 	bl	8006c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006af8:	f000 fbde 	bl	80072b8 <xTaskResumeAll>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d189      	bne.n	8006a16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b02:	4b10      	ldr	r3, [pc, #64]	; (8006b44 <xQueueReceive+0x1bc>)
 8006b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	e780      	b.n	8006a16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b16:	f000 f8a7 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b1a:	f000 fbcd 	bl	80072b8 <xTaskResumeAll>
 8006b1e:	e77a      	b.n	8006a16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b22:	f000 f8a1 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b26:	f000 fbc7 	bl	80072b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b2c:	f000 f8ee 	bl	8006d0c <prvIsQueueEmpty>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f43f af6f 	beq.w	8006a16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3730      	adds	r7, #48	; 0x30
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d14d      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 ff92 	bl	8007a9c <xTaskPriorityDisinherit>
 8006b78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e043      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d119      	bne.n	8006bbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6858      	ldr	r0, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	461a      	mov	r2, r3
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f001 ffee 	bl	8008b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d32b      	bcc.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e026      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68d8      	ldr	r0, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	f001 ffd4 	bl	8008b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d207      	bcs.n	8006bf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d105      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d018      	beq.n	8006c60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d303      	bcc.n	8006c50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68d9      	ldr	r1, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	f001 ff8a 	bl	8008b74 <memcpy>
	}
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c70:	f001 fc50 	bl	8008514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	e011      	b.n	8006ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d012      	beq.n	8006cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fd2a 	bl	80076e4 <xTaskRemoveFromEventList>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c96:	f000 fe01 	bl	800789c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dce9      	bgt.n	8006c7e <prvUnlockQueue+0x16>
 8006caa:	e000      	b.n	8006cae <prvUnlockQueue+0x46>
					break;
 8006cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	22ff      	movs	r2, #255	; 0xff
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006cb6:	f001 fc5d 	bl	8008574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cba:	f001 fc2b 	bl	8008514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	e011      	b.n	8006cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d012      	beq.n	8006cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fd05 	bl	80076e4 <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ce0:	f000 fddc 	bl	800789c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dce9      	bgt.n	8006cc8 <prvUnlockQueue+0x60>
 8006cf4:	e000      	b.n	8006cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22ff      	movs	r2, #255	; 0xff
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d00:	f001 fc38 	bl	8008574 <vPortExitCritical>
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d14:	f001 fbfe 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e001      	b.n	8006d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d2a:	f001 fc23 	bl	8008574 <vPortExitCritical>

	return xReturn;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d40:	f001 fbe8 	bl	8008514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d102      	bne.n	8006d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e001      	b.n	8006d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d5a:	f001 fc0b 	bl	8008574 <vPortExitCritical>

	return xReturn;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e014      	b.n	8006da2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d78:	4a0f      	ldr	r2, [pc, #60]	; (8006db8 <vQueueAddToRegistry+0x50>)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d84:	490c      	ldr	r1, [pc, #48]	; (8006db8 <vQueueAddToRegistry+0x50>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d8e:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <vQueueAddToRegistry+0x50>)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d9a:	e006      	b.n	8006daa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b07      	cmp	r3, #7
 8006da6:	d9e7      	bls.n	8006d78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	200010b4 	.word	0x200010b4

08006dbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006dcc:	f001 fba2 	bl	8008514 <vPortEnterCritical>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd6:	b25b      	sxtb	r3, r3
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d103      	bne.n	8006de6 <vQueueWaitForMessageRestricted+0x2a>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dec:	b25b      	sxtb	r3, r3
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d103      	bne.n	8006dfc <vQueueWaitForMessageRestricted+0x40>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dfc:	f001 fbba 	bl	8008574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	3324      	adds	r3, #36	; 0x24
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fc3b 	bl	800768c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e16:	6978      	ldr	r0, [r7, #20]
 8006e18:	f7ff ff26 	bl	8006c68 <prvUnlockQueue>
	}
 8006e1c:	bf00      	nop
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08e      	sub	sp, #56	; 0x38
 8006e28:	af04      	add	r7, sp, #16
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	623b      	str	r3, [r7, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <xTaskCreateStatic+0x46>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	61fb      	str	r3, [r7, #28]
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e6a:	235c      	movs	r3, #92	; 0x5c
 8006e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b5c      	cmp	r3, #92	; 0x5c
 8006e72:	d00a      	beq.n	8006e8a <xTaskCreateStatic+0x66>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	61bb      	str	r3, [r7, #24]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01e      	beq.n	8006ed0 <xTaskCreateStatic+0xac>
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01b      	beq.n	8006ed0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9303      	str	r3, [sp, #12]
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	9302      	str	r3, [sp, #8]
 8006eb2:	f107 0314 	add.w	r3, r7, #20
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 f850 	bl	8006f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eca:	f000 f8dd 	bl	8007088 <prvAddNewTaskToReadyList>
 8006ece:	e001      	b.n	8006ed4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ed4:	697b      	ldr	r3, [r7, #20]
	}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3728      	adds	r7, #40	; 0x28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b08c      	sub	sp, #48	; 0x30
 8006ee2:	af04      	add	r7, sp, #16
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	4613      	mov	r3, r2
 8006eec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fc30 	bl	8008758 <pvPortMalloc>
 8006ef8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00e      	beq.n	8006f1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f00:	205c      	movs	r0, #92	; 0x5c
 8006f02:	f001 fc29 	bl	8008758 <pvPortMalloc>
 8006f06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
 8006f14:	e005      	b.n	8006f22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f16:	6978      	ldr	r0, [r7, #20]
 8006f18:	f001 fcea 	bl	80088f0 <vPortFree>
 8006f1c:	e001      	b.n	8006f22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d017      	beq.n	8006f58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9303      	str	r3, [sp, #12]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	9302      	str	r3, [sp, #8]
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f80e 	bl	8006f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f4c:	69f8      	ldr	r0, [r7, #28]
 8006f4e:	f000 f89b 	bl	8007088 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f52:	2301      	movs	r3, #1
 8006f54:	61bb      	str	r3, [r7, #24]
 8006f56:	e002      	b.n	8006f5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	21a5      	movs	r1, #165	; 0xa5
 8006f82:	f001 fe05 	bl	8008b90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f90:	3b01      	subs	r3, #1
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f023 0307 	bic.w	r3, r3, #7
 8006f9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	617b      	str	r3, [r7, #20]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01f      	beq.n	8007006 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e012      	b.n	8006ff2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	7819      	ldrb	r1, [r3, #0]
 8006fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	3334      	adds	r3, #52	; 0x34
 8006fdc:	460a      	mov	r2, r1
 8006fde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d006      	beq.n	8006ffa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2b0f      	cmp	r3, #15
 8006ff6:	d9e9      	bls.n	8006fcc <prvInitialiseNewTask+0x64>
 8006ff8:	e000      	b.n	8006ffc <prvInitialiseNewTask+0x94>
			{
				break;
 8006ffa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007004:	e003      	b.n	800700e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	2b37      	cmp	r3, #55	; 0x37
 8007012:	d901      	bls.n	8007018 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007014:	2337      	movs	r3, #55	; 0x37
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007022:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	2200      	movs	r2, #0
 8007028:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f978 	bl	8006324 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	3318      	adds	r3, #24
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff f973 	bl	8006324 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007042:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	2200      	movs	r2, #0
 8007058:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	68f9      	ldr	r1, [r7, #12]
 8007066:	69b8      	ldr	r0, [r7, #24]
 8007068:	f001 f928 	bl	80082bc <pxPortInitialiseStack>
 800706c:	4602      	mov	r2, r0
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800707e:	bf00      	nop
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007090:	f001 fa40 	bl	8008514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <prvAddNewTaskToReadyList+0xc4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	4a2c      	ldr	r2, [pc, #176]	; (800714c <prvAddNewTaskToReadyList+0xc4>)
 800709c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800709e:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <prvAddNewTaskToReadyList+0xc8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070a6:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <prvAddNewTaskToReadyList+0xc8>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070ac:	4b27      	ldr	r3, [pc, #156]	; (800714c <prvAddNewTaskToReadyList+0xc4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d110      	bne.n	80070d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070b4:	f000 fc16 	bl	80078e4 <prvInitialiseTaskLists>
 80070b8:	e00d      	b.n	80070d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <prvAddNewTaskToReadyList+0xcc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070c2:	4b23      	ldr	r3, [pc, #140]	; (8007150 <prvAddNewTaskToReadyList+0xc8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d802      	bhi.n	80070d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070d0:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <prvAddNewTaskToReadyList+0xc8>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80070d6:	4b20      	ldr	r3, [pc, #128]	; (8007158 <prvAddNewTaskToReadyList+0xd0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <prvAddNewTaskToReadyList+0xd0>)
 80070de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070e0:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <prvAddNewTaskToReadyList+0xd0>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <prvAddNewTaskToReadyList+0xd4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d903      	bls.n	80070fc <prvAddNewTaskToReadyList+0x74>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <prvAddNewTaskToReadyList+0xd4>)
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <prvAddNewTaskToReadyList+0xd8>)
 800710a:	441a      	add	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	4619      	mov	r1, r3
 8007112:	4610      	mov	r0, r2
 8007114:	f7ff f913 	bl	800633e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007118:	f001 fa2c 	bl	8008574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <prvAddNewTaskToReadyList+0xcc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <prvAddNewTaskToReadyList+0xc8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d207      	bcs.n	8007142 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007132:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <prvAddNewTaskToReadyList+0xdc>)
 8007134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200015c8 	.word	0x200015c8
 8007150:	200010f4 	.word	0x200010f4
 8007154:	200015d4 	.word	0x200015d4
 8007158:	200015e4 	.word	0x200015e4
 800715c:	200015d0 	.word	0x200015d0
 8007160:	200010f8 	.word	0x200010f8
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d017      	beq.n	80071aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <vTaskDelay+0x60>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <vTaskDelay+0x30>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60bb      	str	r3, [r7, #8]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007198:	f000 f880 	bl	800729c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800719c:	2100      	movs	r1, #0
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fcea 	bl	8007b78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071a4:	f000 f888 	bl	80072b8 <xTaskResumeAll>
 80071a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d107      	bne.n	80071c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <vTaskDelay+0x64>)
 80071b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200015f0 	.word	0x200015f0
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071de:	463a      	mov	r2, r7
 80071e0:	1d39      	adds	r1, r7, #4
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff f848 	bl	800627c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	9202      	str	r2, [sp, #8]
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	460a      	mov	r2, r1
 80071fe:	4921      	ldr	r1, [pc, #132]	; (8007284 <vTaskStartScheduler+0xb4>)
 8007200:	4821      	ldr	r0, [pc, #132]	; (8007288 <vTaskStartScheduler+0xb8>)
 8007202:	f7ff fe0f 	bl	8006e24 <xTaskCreateStatic>
 8007206:	4603      	mov	r3, r0
 8007208:	4a20      	ldr	r2, [pc, #128]	; (800728c <vTaskStartScheduler+0xbc>)
 800720a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800720c:	4b1f      	ldr	r3, [pc, #124]	; (800728c <vTaskStartScheduler+0xbc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007214:	2301      	movs	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e001      	b.n	800721e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d102      	bne.n	800722a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007224:	f000 fcfc 	bl	8007c20 <xTimerCreateTimerTask>
 8007228:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d116      	bne.n	800725e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	613b      	str	r3, [r7, #16]
}
 8007242:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007244:	4b12      	ldr	r3, [pc, #72]	; (8007290 <vTaskStartScheduler+0xc0>)
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <vTaskStartScheduler+0xc4>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <vTaskStartScheduler+0xc8>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007258:	f001 f8ba 	bl	80083d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800725c:	e00e      	b.n	800727c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d10a      	bne.n	800727c <vTaskStartScheduler+0xac>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <vTaskStartScheduler+0xaa>
}
 800727c:	bf00      	nop
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	08008be8 	.word	0x08008be8
 8007288:	080078b5 	.word	0x080078b5
 800728c:	200015ec 	.word	0x200015ec
 8007290:	200015e8 	.word	0x200015e8
 8007294:	200015d4 	.word	0x200015d4
 8007298:	200015cc 	.word	0x200015cc

0800729c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <vTaskSuspendAll+0x18>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a03      	ldr	r2, [pc, #12]	; (80072b4 <vTaskSuspendAll+0x18>)
 80072a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80072aa:	bf00      	nop
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	200015f0 	.word	0x200015f0

080072b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072c6:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <xTaskResumeAll+0x118>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	603b      	str	r3, [r7, #0]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072e4:	f001 f916 	bl	8008514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e8:	4b39      	ldr	r3, [pc, #228]	; (80073d0 <xTaskResumeAll+0x118>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4a38      	ldr	r2, [pc, #224]	; (80073d0 <xTaskResumeAll+0x118>)
 80072f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f2:	4b37      	ldr	r3, [pc, #220]	; (80073d0 <xTaskResumeAll+0x118>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d162      	bne.n	80073c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <xTaskResumeAll+0x11c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d05e      	beq.n	80073c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007302:	e02f      	b.n	8007364 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007304:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <xTaskResumeAll+0x120>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3318      	adds	r3, #24
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff f871 	bl	80063f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3304      	adds	r3, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff f86c 	bl	80063f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007324:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <xTaskResumeAll+0x124>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d903      	bls.n	8007334 <xTaskResumeAll+0x7c>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	4a2a      	ldr	r2, [pc, #168]	; (80073dc <xTaskResumeAll+0x124>)
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4a27      	ldr	r2, [pc, #156]	; (80073e0 <xTaskResumeAll+0x128>)
 8007342:	441a      	add	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3304      	adds	r3, #4
 8007348:	4619      	mov	r1, r3
 800734a:	4610      	mov	r0, r2
 800734c:	f7fe fff7 	bl	800633e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <xTaskResumeAll+0x12c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	429a      	cmp	r2, r3
 800735c:	d302      	bcc.n	8007364 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800735e:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <xTaskResumeAll+0x130>)
 8007360:	2201      	movs	r2, #1
 8007362:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007364:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <xTaskResumeAll+0x120>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1cb      	bne.n	8007304 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007372:	f000 fb55 	bl	8007a20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007376:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <xTaskResumeAll+0x134>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d010      	beq.n	80073a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007382:	f000 f847 	bl	8007414 <xTaskIncrementTick>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800738c:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <xTaskResumeAll+0x130>)
 800738e:	2201      	movs	r2, #1
 8007390:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3b01      	subs	r3, #1
 8007396:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f1      	bne.n	8007382 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <xTaskResumeAll+0x134>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073a4:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <xTaskResumeAll+0x130>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <xTaskResumeAll+0x138>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073c0:	f001 f8d8 	bl	8008574 <vPortExitCritical>

	return xAlreadyYielded;
 80073c4:	68bb      	ldr	r3, [r7, #8]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200015f0 	.word	0x200015f0
 80073d4:	200015c8 	.word	0x200015c8
 80073d8:	20001588 	.word	0x20001588
 80073dc:	200015d0 	.word	0x200015d0
 80073e0:	200010f8 	.word	0x200010f8
 80073e4:	200010f4 	.word	0x200010f4
 80073e8:	200015dc 	.word	0x200015dc
 80073ec:	200015d8 	.word	0x200015d8
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <xTaskGetTickCount+0x1c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007400:	687b      	ldr	r3, [r7, #4]
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	200015cc 	.word	0x200015cc

08007414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741e:	4b4f      	ldr	r3, [pc, #316]	; (800755c <xTaskIncrementTick+0x148>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 808f 	bne.w	8007546 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007428:	4b4d      	ldr	r3, [pc, #308]	; (8007560 <xTaskIncrementTick+0x14c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007430:	4a4b      	ldr	r2, [pc, #300]	; (8007560 <xTaskIncrementTick+0x14c>)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d120      	bne.n	800747e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800743c:	4b49      	ldr	r3, [pc, #292]	; (8007564 <xTaskIncrementTick+0x150>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <xTaskIncrementTick+0x48>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	603b      	str	r3, [r7, #0]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <xTaskIncrementTick+0x46>
 800745c:	4b41      	ldr	r3, [pc, #260]	; (8007564 <xTaskIncrementTick+0x150>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	4b41      	ldr	r3, [pc, #260]	; (8007568 <xTaskIncrementTick+0x154>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a3f      	ldr	r2, [pc, #252]	; (8007564 <xTaskIncrementTick+0x150>)
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <xTaskIncrementTick+0x154>)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4b3e      	ldr	r3, [pc, #248]	; (800756c <xTaskIncrementTick+0x158>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	4a3d      	ldr	r2, [pc, #244]	; (800756c <xTaskIncrementTick+0x158>)
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	f000 fad1 	bl	8007a20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800747e:	4b3c      	ldr	r3, [pc, #240]	; (8007570 <xTaskIncrementTick+0x15c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	429a      	cmp	r2, r3
 8007486:	d349      	bcc.n	800751c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007488:	4b36      	ldr	r3, [pc, #216]	; (8007564 <xTaskIncrementTick+0x150>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007492:	4b37      	ldr	r3, [pc, #220]	; (8007570 <xTaskIncrementTick+0x15c>)
 8007494:	f04f 32ff 	mov.w	r2, #4294967295
 8007498:	601a      	str	r2, [r3, #0]
					break;
 800749a:	e03f      	b.n	800751c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749c:	4b31      	ldr	r3, [pc, #196]	; (8007564 <xTaskIncrementTick+0x150>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d203      	bcs.n	80074bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074b4:	4a2e      	ldr	r2, [pc, #184]	; (8007570 <xTaskIncrementTick+0x15c>)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074ba:	e02f      	b.n	800751c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	3304      	adds	r3, #4
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe ff99 	bl	80063f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d004      	beq.n	80074d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	3318      	adds	r3, #24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe ff90 	bl	80063f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4b25      	ldr	r3, [pc, #148]	; (8007574 <xTaskIncrementTick+0x160>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d903      	bls.n	80074ec <xTaskIncrementTick+0xd8>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a22      	ldr	r2, [pc, #136]	; (8007574 <xTaskIncrementTick+0x160>)
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4a1f      	ldr	r2, [pc, #124]	; (8007578 <xTaskIncrementTick+0x164>)
 80074fa:	441a      	add	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3304      	adds	r3, #4
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7fe ff1b 	bl	800633e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750c:	4b1b      	ldr	r3, [pc, #108]	; (800757c <xTaskIncrementTick+0x168>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	429a      	cmp	r2, r3
 8007514:	d3b8      	bcc.n	8007488 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007516:	2301      	movs	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800751a:	e7b5      	b.n	8007488 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800751c:	4b17      	ldr	r3, [pc, #92]	; (800757c <xTaskIncrementTick+0x168>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	4915      	ldr	r1, [pc, #84]	; (8007578 <xTaskIncrementTick+0x164>)
 8007524:	4613      	mov	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d901      	bls.n	8007538 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007538:	4b11      	ldr	r3, [pc, #68]	; (8007580 <xTaskIncrementTick+0x16c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007540:	2301      	movs	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	e004      	b.n	8007550 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <xTaskIncrementTick+0x170>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	4a0d      	ldr	r2, [pc, #52]	; (8007584 <xTaskIncrementTick+0x170>)
 800754e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007550:	697b      	ldr	r3, [r7, #20]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200015f0 	.word	0x200015f0
 8007560:	200015cc 	.word	0x200015cc
 8007564:	20001580 	.word	0x20001580
 8007568:	20001584 	.word	0x20001584
 800756c:	200015e0 	.word	0x200015e0
 8007570:	200015e8 	.word	0x200015e8
 8007574:	200015d0 	.word	0x200015d0
 8007578:	200010f8 	.word	0x200010f8
 800757c:	200010f4 	.word	0x200010f4
 8007580:	200015dc 	.word	0x200015dc
 8007584:	200015d8 	.word	0x200015d8

08007588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800758e:	4b28      	ldr	r3, [pc, #160]	; (8007630 <vTaskSwitchContext+0xa8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <vTaskSwitchContext+0xac>)
 8007598:	2201      	movs	r2, #1
 800759a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800759c:	e041      	b.n	8007622 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800759e:	4b25      	ldr	r3, [pc, #148]	; (8007634 <vTaskSwitchContext+0xac>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a4:	4b24      	ldr	r3, [pc, #144]	; (8007638 <vTaskSwitchContext+0xb0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e010      	b.n	80075ce <vTaskSwitchContext+0x46>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vTaskSwitchContext+0x3e>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	491b      	ldr	r1, [pc, #108]	; (800763c <vTaskSwitchContext+0xb4>)
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0e4      	beq.n	80075ac <vTaskSwitchContext+0x24>
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a13      	ldr	r2, [pc, #76]	; (800763c <vTaskSwitchContext+0xb4>)
 80075ee:	4413      	add	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3308      	adds	r3, #8
 8007604:	429a      	cmp	r2, r3
 8007606:	d104      	bne.n	8007612 <vTaskSwitchContext+0x8a>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4a09      	ldr	r2, [pc, #36]	; (8007640 <vTaskSwitchContext+0xb8>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4a06      	ldr	r2, [pc, #24]	; (8007638 <vTaskSwitchContext+0xb0>)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6013      	str	r3, [r2, #0]
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	200015f0 	.word	0x200015f0
 8007634:	200015dc 	.word	0x200015dc
 8007638:	200015d0 	.word	0x200015d0
 800763c:	200010f8 	.word	0x200010f8
 8007640:	200010f4 	.word	0x200010f4

08007644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <vTaskPlaceOnEventList+0x44>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3318      	adds	r3, #24
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fe fe87 	bl	8006386 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007678:	2101      	movs	r1, #1
 800767a:	6838      	ldr	r0, [r7, #0]
 800767c:	f000 fa7c 	bl	8007b78 <prvAddCurrentTaskToDelayedList>
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200010f4 	.word	0x200010f4

0800768c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	617b      	str	r3, [r7, #20]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3318      	adds	r3, #24
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7fe fe3e 	bl	800633e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80076c8:	f04f 33ff 	mov.w	r3, #4294967295
 80076cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	68b8      	ldr	r0, [r7, #8]
 80076d2:	f000 fa51 	bl	8007b78 <prvAddCurrentTaskToDelayedList>
	}
 80076d6:	bf00      	nop
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200010f4 	.word	0x200010f4

080076e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	60fb      	str	r3, [r7, #12]
}
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	3318      	adds	r3, #24
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fe6f 	bl	80063f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771a:	4b1e      	ldr	r3, [pc, #120]	; (8007794 <xTaskRemoveFromEventList+0xb0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11d      	bne.n	800775e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fe66 	bl	80063f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4b19      	ldr	r3, [pc, #100]	; (8007798 <xTaskRemoveFromEventList+0xb4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d903      	bls.n	8007740 <xTaskRemoveFromEventList+0x5c>
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	4a16      	ldr	r2, [pc, #88]	; (8007798 <xTaskRemoveFromEventList+0xb4>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a13      	ldr	r2, [pc, #76]	; (800779c <xTaskRemoveFromEventList+0xb8>)
 800774e:	441a      	add	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fdf1 	bl	800633e <vListInsertEnd>
 800775c:	e005      	b.n	800776a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3318      	adds	r3, #24
 8007762:	4619      	mov	r1, r3
 8007764:	480e      	ldr	r0, [pc, #56]	; (80077a0 <xTaskRemoveFromEventList+0xbc>)
 8007766:	f7fe fdea 	bl	800633e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776e:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <xTaskRemoveFromEventList+0xc0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	429a      	cmp	r2, r3
 8007776:	d905      	bls.n	8007784 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007778:	2301      	movs	r3, #1
 800777a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800777c:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <xTaskRemoveFromEventList+0xc4>)
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e001      	b.n	8007788 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007788:	697b      	ldr	r3, [r7, #20]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200015f0 	.word	0x200015f0
 8007798:	200015d0 	.word	0x200015d0
 800779c:	200010f8 	.word	0x200010f8
 80077a0:	20001588 	.word	0x20001588
 80077a4:	200010f4 	.word	0x200010f4
 80077a8:	200015dc 	.word	0x200015dc

080077ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <vTaskInternalSetTimeOutState+0x24>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <vTaskInternalSetTimeOutState+0x28>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	605a      	str	r2, [r3, #4]
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	200015e0 	.word	0x200015e0
 80077d4:	200015cc 	.word	0x200015cc

080077d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	613b      	str	r3, [r7, #16]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	60fb      	str	r3, [r7, #12]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800781a:	f000 fe7b 	bl	8008514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800781e:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <xTaskCheckForTimeOut+0xbc>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d102      	bne.n	800783e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	e023      	b.n	8007886 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b15      	ldr	r3, [pc, #84]	; (8007898 <xTaskCheckForTimeOut+0xc0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d007      	beq.n	800785a <xTaskCheckForTimeOut+0x82>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	429a      	cmp	r2, r3
 8007852:	d302      	bcc.n	800785a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007854:	2301      	movs	r3, #1
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	e015      	b.n	8007886 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	429a      	cmp	r2, r3
 8007862:	d20b      	bcs.n	800787c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff9b 	bl	80077ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	e004      	b.n	8007886 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007882:	2301      	movs	r3, #1
 8007884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007886:	f000 fe75 	bl	8008574 <vPortExitCritical>

	return xReturn;
 800788a:	69fb      	ldr	r3, [r7, #28]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3720      	adds	r7, #32
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200015cc 	.word	0x200015cc
 8007898:	200015e0 	.word	0x200015e0

0800789c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078a0:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <vTaskMissedYield+0x14>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	bf00      	nop
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	200015dc 	.word	0x200015dc

080078b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078bc:	f000 f852 	bl	8007964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <prvIdleTask+0x28>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d9f9      	bls.n	80078bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <prvIdleTask+0x2c>)
 80078ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078d8:	e7f0      	b.n	80078bc <prvIdleTask+0x8>
 80078da:	bf00      	nop
 80078dc:	200010f8 	.word	0x200010f8
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	e00c      	b.n	800790a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4a12      	ldr	r2, [pc, #72]	; (8007944 <prvInitialiseTaskLists+0x60>)
 80078fc:	4413      	add	r3, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fcf0 	bl	80062e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3301      	adds	r3, #1
 8007908:	607b      	str	r3, [r7, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b37      	cmp	r3, #55	; 0x37
 800790e:	d9ef      	bls.n	80078f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007910:	480d      	ldr	r0, [pc, #52]	; (8007948 <prvInitialiseTaskLists+0x64>)
 8007912:	f7fe fce7 	bl	80062e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007916:	480d      	ldr	r0, [pc, #52]	; (800794c <prvInitialiseTaskLists+0x68>)
 8007918:	f7fe fce4 	bl	80062e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800791c:	480c      	ldr	r0, [pc, #48]	; (8007950 <prvInitialiseTaskLists+0x6c>)
 800791e:	f7fe fce1 	bl	80062e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007922:	480c      	ldr	r0, [pc, #48]	; (8007954 <prvInitialiseTaskLists+0x70>)
 8007924:	f7fe fcde 	bl	80062e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007928:	480b      	ldr	r0, [pc, #44]	; (8007958 <prvInitialiseTaskLists+0x74>)
 800792a:	f7fe fcdb 	bl	80062e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800792e:	4b0b      	ldr	r3, [pc, #44]	; (800795c <prvInitialiseTaskLists+0x78>)
 8007930:	4a05      	ldr	r2, [pc, #20]	; (8007948 <prvInitialiseTaskLists+0x64>)
 8007932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007934:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <prvInitialiseTaskLists+0x7c>)
 8007936:	4a05      	ldr	r2, [pc, #20]	; (800794c <prvInitialiseTaskLists+0x68>)
 8007938:	601a      	str	r2, [r3, #0]
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	200010f8 	.word	0x200010f8
 8007948:	20001558 	.word	0x20001558
 800794c:	2000156c 	.word	0x2000156c
 8007950:	20001588 	.word	0x20001588
 8007954:	2000159c 	.word	0x2000159c
 8007958:	200015b4 	.word	0x200015b4
 800795c:	20001580 	.word	0x20001580
 8007960:	20001584 	.word	0x20001584

08007964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800796a:	e019      	b.n	80079a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800796c:	f000 fdd2 	bl	8008514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007970:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <prvCheckTasksWaitingTermination+0x50>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3304      	adds	r3, #4
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fd3b 	bl	80063f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007982:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <prvCheckTasksWaitingTermination+0x54>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3b01      	subs	r3, #1
 8007988:	4a0b      	ldr	r2, [pc, #44]	; (80079b8 <prvCheckTasksWaitingTermination+0x54>)
 800798a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800798c:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <prvCheckTasksWaitingTermination+0x58>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3b01      	subs	r3, #1
 8007992:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <prvCheckTasksWaitingTermination+0x58>)
 8007994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007996:	f000 fded 	bl	8008574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f810 	bl	80079c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <prvCheckTasksWaitingTermination+0x58>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e1      	bne.n	800796c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	2000159c 	.word	0x2000159c
 80079b8:	200015c8 	.word	0x200015c8
 80079bc:	200015b0 	.word	0x200015b0

080079c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 ff8a 	bl	80088f0 <vPortFree>
				vPortFree( pxTCB );
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 ff87 	bl	80088f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079e2:	e018      	b.n	8007a16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d103      	bne.n	80079f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 ff7e 	bl	80088f0 <vPortFree>
	}
 80079f4:	e00f      	b.n	8007a16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d00a      	beq.n	8007a16 <prvDeleteTCB+0x56>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <prvDeleteTCB+0x54>
	}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvResetNextTaskUnblockTime+0x38>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <prvResetNextTaskUnblockTime+0x3c>)
 8007a32:	f04f 32ff 	mov.w	r2, #4294967295
 8007a36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a38:	e008      	b.n	8007a4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3a:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <prvResetNextTaskUnblockTime+0x38>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <prvResetNextTaskUnblockTime+0x3c>)
 8007a4a:	6013      	str	r3, [r2, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	20001580 	.word	0x20001580
 8007a5c:	200015e8 	.word	0x200015e8

08007a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <xTaskGetSchedulerState+0x34>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	e008      	b.n	8007a86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a74:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <xTaskGetSchedulerState+0x38>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	607b      	str	r3, [r7, #4]
 8007a80:	e001      	b.n	8007a86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a86:	687b      	ldr	r3, [r7, #4]
	}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	200015d4 	.word	0x200015d4
 8007a98:	200015f0 	.word	0x200015f0

08007a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d056      	beq.n	8007b60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <xTaskPriorityDisinherit+0xd0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d00a      	beq.n	8007ad2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60fb      	str	r3, [r7, #12]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	60bb      	str	r3, [r7, #8]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	1e5a      	subs	r2, r3, #1
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d02c      	beq.n	8007b60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d128      	bne.n	8007b60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fc70 	bl	80063f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <xTaskPriorityDisinherit+0xd4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d903      	bls.n	8007b40 <xTaskPriorityDisinherit+0xa4>
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4a0c      	ldr	r2, [pc, #48]	; (8007b70 <xTaskPriorityDisinherit+0xd4>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <xTaskPriorityDisinherit+0xd8>)
 8007b4e:	441a      	add	r2, r3
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fe fbf1 	bl	800633e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b60:	697b      	ldr	r3, [r7, #20]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	200010f4 	.word	0x200010f4
 8007b70:	200015d0 	.word	0x200015d0
 8007b74:	200010f8 	.word	0x200010f8

08007b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b88:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fc32 	bl	80063f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d10a      	bne.n	8007bb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4819      	ldr	r0, [pc, #100]	; (8007c10 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bac:	f7fe fbc7 	bl	800633e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bb0:	e026      	b.n	8007c00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bba:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d209      	bcs.n	8007bde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fbd5 	bl	8006386 <vListInsert>
}
 8007bdc:	e010      	b.n	8007c00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bde:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fbcb 	bl	8006386 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d202      	bcs.n	8007c00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bfa:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200015cc 	.word	0x200015cc
 8007c0c:	200010f4 	.word	0x200010f4
 8007c10:	200015b4 	.word	0x200015b4
 8007c14:	20001584 	.word	0x20001584
 8007c18:	20001580 	.word	0x20001580
 8007c1c:	200015e8 	.word	0x200015e8

08007c20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08a      	sub	sp, #40	; 0x28
 8007c24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c2a:	f000 fb07 	bl	800823c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <xTimerCreateTimerTask+0x80>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d021      	beq.n	8007c7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c3e:	1d3a      	adds	r2, r7, #4
 8007c40:	f107 0108 	add.w	r1, r7, #8
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fb31 	bl	80062b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	9202      	str	r2, [sp, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	460a      	mov	r2, r1
 8007c60:	4910      	ldr	r1, [pc, #64]	; (8007ca4 <xTimerCreateTimerTask+0x84>)
 8007c62:	4811      	ldr	r0, [pc, #68]	; (8007ca8 <xTimerCreateTimerTask+0x88>)
 8007c64:	f7ff f8de 	bl	8006e24 <xTaskCreateStatic>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4a10      	ldr	r2, [pc, #64]	; (8007cac <xTimerCreateTimerTask+0x8c>)
 8007c6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <xTimerCreateTimerTask+0x8c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c76:	2301      	movs	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	613b      	str	r3, [r7, #16]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c96:	697b      	ldr	r3, [r7, #20]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20001624 	.word	0x20001624
 8007ca4:	08008bf0 	.word	0x08008bf0
 8007ca8:	08007de5 	.word	0x08007de5
 8007cac:	20001628 	.word	0x20001628

08007cb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	; 0x28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <xTimerGenericCommand+0x2e>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	623b      	str	r3, [r7, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cde:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <xTimerGenericCommand+0x98>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d02a      	beq.n	8007d3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	dc18      	bgt.n	8007d2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cf8:	f7ff feb2 	bl	8007a60 <xTaskGetSchedulerState>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d109      	bne.n	8007d16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <xTimerGenericCommand+0x98>)
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	f107 0110 	add.w	r1, r7, #16
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0e:	f7fe fca1 	bl	8006654 <xQueueGenericSend>
 8007d12:	6278      	str	r0, [r7, #36]	; 0x24
 8007d14:	e012      	b.n	8007d3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <xTimerGenericCommand+0x98>)
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	f107 0110 	add.w	r1, r7, #16
 8007d1e:	2300      	movs	r3, #0
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7fe fc97 	bl	8006654 <xQueueGenericSend>
 8007d26:	6278      	str	r0, [r7, #36]	; 0x24
 8007d28:	e008      	b.n	8007d3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <xTimerGenericCommand+0x98>)
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	f107 0110 	add.w	r1, r7, #16
 8007d32:	2300      	movs	r3, #0
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	f7fe fd8b 	bl	8006850 <xQueueGenericSendFromISR>
 8007d3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20001624 	.word	0x20001624

08007d4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d56:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <prvProcessExpiredTimer+0x94>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe fb47 	bl	80063f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d022      	beq.n	8007dbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	18d1      	adds	r1, r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	6978      	ldr	r0, [r7, #20]
 8007d86:	f000 f8d1 	bl	8007f2c <prvInsertTimerInActiveList>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01f      	beq.n	8007dd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d90:	2300      	movs	r3, #0
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6978      	ldr	r0, [r7, #20]
 8007d9c:	f7ff ff88 	bl	8007cb0 <xTimerGenericCommand>
 8007da0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d113      	bne.n	8007dd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	60fb      	str	r3, [r7, #12]
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	6978      	ldr	r0, [r7, #20]
 8007dd6:	4798      	blx	r3
}
 8007dd8:	bf00      	nop
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2000161c 	.word	0x2000161c

08007de4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f857 	bl	8007ea4 <prvGetNextExpireTime>
 8007df6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f803 	bl	8007e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e02:	f000 f8d5 	bl	8007fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e06:	e7f1      	b.n	8007dec <prvTimerTask+0x8>

08007e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e12:	f7ff fa43 	bl	800729c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f866 	bl	8007eec <prvSampleTimeNow>
 8007e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d130      	bne.n	8007e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <prvProcessTimerOrBlockTask+0x3c>
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d806      	bhi.n	8007e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e36:	f7ff fa3f 	bl	80072b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e3a:	68f9      	ldr	r1, [r7, #12]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff ff85 	bl	8007d4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e42:	e024      	b.n	8007e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <prvProcessTimerOrBlockTask+0x90>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <prvProcessTimerOrBlockTask+0x50>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <prvProcessTimerOrBlockTask+0x52>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <prvProcessTimerOrBlockTask+0x94>)
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f7fe ffa7 	bl	8006dbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e6e:	f7ff fa23 	bl	80072b8 <xTaskResumeAll>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e78:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <prvProcessTimerOrBlockTask+0x98>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
}
 8007e88:	e001      	b.n	8007e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e8a:	f7ff fa15 	bl	80072b8 <xTaskResumeAll>
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20001620 	.word	0x20001620
 8007e9c:	20001624 	.word	0x20001624
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <prvGetNextExpireTime+0x44>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <prvGetNextExpireTime+0x16>
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	e000      	b.n	8007ebc <prvGetNextExpireTime+0x18>
 8007eba:	2200      	movs	r2, #0
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d105      	bne.n	8007ed4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <prvGetNextExpireTime+0x44>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	e001      	b.n	8007ed8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	2000161c 	.word	0x2000161c

08007eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ef4:	f7ff fa7e 	bl	80073f4 <xTaskGetTickCount>
 8007ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <prvSampleTimeNow+0x3c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d205      	bcs.n	8007f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f04:	f000 f936 	bl	8008174 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e002      	b.n	8007f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f16:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <prvSampleTimeNow+0x3c>)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	2000162c 	.word	0x2000162c

08007f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d812      	bhi.n	8007f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	e01b      	b.n	8007f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f66:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <prvInsertTimerInActiveList+0x7c>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7fe fa08 	bl	8006386 <vListInsert>
 8007f76:	e012      	b.n	8007f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d206      	bcs.n	8007f8e <prvInsertTimerInActiveList+0x62>
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e007      	b.n	8007f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f8e:	4b07      	ldr	r3, [pc, #28]	; (8007fac <prvInsertTimerInActiveList+0x80>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f7fe f9f4 	bl	8006386 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f9e:	697b      	ldr	r3, [r7, #20]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20001620 	.word	0x20001620
 8007fac:	2000161c 	.word	0x2000161c

08007fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08e      	sub	sp, #56	; 0x38
 8007fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fb6:	e0ca      	b.n	800814e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	da18      	bge.n	8007ff0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fbe:	1d3b      	adds	r3, r7, #4
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61fb      	str	r3, [r7, #28]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe6:	6850      	ldr	r0, [r2, #4]
 8007fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fea:	6892      	ldr	r2, [r2, #8]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f2c0 80aa 	blt.w	800814c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	3304      	adds	r3, #4
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe f9f5 	bl	80063f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800800e:	463b      	mov	r3, r7
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff ff6b 	bl	8007eec <prvSampleTimeNow>
 8008016:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b09      	cmp	r3, #9
 800801c:	f200 8097 	bhi.w	800814e <prvProcessReceivedCommands+0x19e>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <prvProcessReceivedCommands+0x78>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008051 	.word	0x08008051
 800802c:	08008051 	.word	0x08008051
 8008030:	08008051 	.word	0x08008051
 8008034:	080080c5 	.word	0x080080c5
 8008038:	080080d9 	.word	0x080080d9
 800803c:	08008123 	.word	0x08008123
 8008040:	08008051 	.word	0x08008051
 8008044:	08008051 	.word	0x08008051
 8008048:	080080c5 	.word	0x080080c5
 800804c:	080080d9 	.word	0x080080d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	18d1      	adds	r1, r2, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008070:	f7ff ff5c 	bl	8007f2c <prvInsertTimerInActiveList>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d069      	beq.n	800814e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d05e      	beq.n	800814e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	441a      	add	r2, r3
 8008098:	2300      	movs	r3, #0
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2300      	movs	r3, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a2:	f7ff fe05 	bl	8007cb0 <xTimerGenericCommand>
 80080a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d14f      	bne.n	800814e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	61bb      	str	r3, [r7, #24]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080d6:	e03a      	b.n	800814e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10a      	bne.n	800810e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	617b      	str	r3, [r7, #20]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	18d1      	adds	r1, r2, r3
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811c:	f7ff ff06 	bl	8007f2c <prvInsertTimerInActiveList>
					break;
 8008120:	e015      	b.n	800814e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008132:	f000 fbdd 	bl	80088f0 <vPortFree>
 8008136:	e00a      	b.n	800814e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800814a:	e000      	b.n	800814e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800814c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <prvProcessReceivedCommands+0x1c0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	1d39      	adds	r1, r7, #4
 8008154:	2200      	movs	r2, #0
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe fc16 	bl	8006988 <xQueueReceive>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	f47f af2a 	bne.w	8007fb8 <prvProcessReceivedCommands+0x8>
	}
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	3730      	adds	r7, #48	; 0x30
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20001624 	.word	0x20001624

08008174 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b088      	sub	sp, #32
 8008178:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800817a:	e048      	b.n	800820e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800817c:	4b2d      	ldr	r3, [pc, #180]	; (8008234 <prvSwitchTimerLists+0xc0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008186:	4b2b      	ldr	r3, [pc, #172]	; (8008234 <prvSwitchTimerLists+0xc0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3304      	adds	r3, #4
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe f92f 	bl	80063f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02e      	beq.n	800820e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4413      	add	r3, r2
 80081b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d90e      	bls.n	80081e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081ce:	4b19      	ldr	r3, [pc, #100]	; (8008234 <prvSwitchTimerLists+0xc0>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f7fe f8d4 	bl	8006386 <vListInsert>
 80081de:	e016      	b.n	800820e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	2100      	movs	r1, #0
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fd60 	bl	8007cb0 <xTimerGenericCommand>
 80081f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	603b      	str	r3, [r7, #0]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800820e:	4b09      	ldr	r3, [pc, #36]	; (8008234 <prvSwitchTimerLists+0xc0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1b1      	bne.n	800817c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <prvSwitchTimerLists+0xc0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <prvSwitchTimerLists+0xc4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a04      	ldr	r2, [pc, #16]	; (8008234 <prvSwitchTimerLists+0xc0>)
 8008224:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008226:	4a04      	ldr	r2, [pc, #16]	; (8008238 <prvSwitchTimerLists+0xc4>)
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6013      	str	r3, [r2, #0]
}
 800822c:	bf00      	nop
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000161c 	.word	0x2000161c
 8008238:	20001620 	.word	0x20001620

0800823c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008242:	f000 f967 	bl	8008514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008246:	4b15      	ldr	r3, [pc, #84]	; (800829c <prvCheckForValidListAndQueue+0x60>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d120      	bne.n	8008290 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800824e:	4814      	ldr	r0, [pc, #80]	; (80082a0 <prvCheckForValidListAndQueue+0x64>)
 8008250:	f7fe f848 	bl	80062e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008254:	4813      	ldr	r0, [pc, #76]	; (80082a4 <prvCheckForValidListAndQueue+0x68>)
 8008256:	f7fe f845 	bl	80062e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800825a:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <prvCheckForValidListAndQueue+0x6c>)
 800825c:	4a10      	ldr	r2, [pc, #64]	; (80082a0 <prvCheckForValidListAndQueue+0x64>)
 800825e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008260:	4b12      	ldr	r3, [pc, #72]	; (80082ac <prvCheckForValidListAndQueue+0x70>)
 8008262:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <prvCheckForValidListAndQueue+0x68>)
 8008264:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008266:	2300      	movs	r3, #0
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <prvCheckForValidListAndQueue+0x74>)
 800826c:	4a11      	ldr	r2, [pc, #68]	; (80082b4 <prvCheckForValidListAndQueue+0x78>)
 800826e:	2110      	movs	r1, #16
 8008270:	200a      	movs	r0, #10
 8008272:	f7fe f953 	bl	800651c <xQueueGenericCreateStatic>
 8008276:	4603      	mov	r3, r0
 8008278:	4a08      	ldr	r2, [pc, #32]	; (800829c <prvCheckForValidListAndQueue+0x60>)
 800827a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800827c:	4b07      	ldr	r3, [pc, #28]	; (800829c <prvCheckForValidListAndQueue+0x60>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <prvCheckForValidListAndQueue+0x60>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	490b      	ldr	r1, [pc, #44]	; (80082b8 <prvCheckForValidListAndQueue+0x7c>)
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fd6c 	bl	8006d68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008290:	f000 f970 	bl	8008574 <vPortExitCritical>
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20001624 	.word	0x20001624
 80082a0:	200015f4 	.word	0x200015f4
 80082a4:	20001608 	.word	0x20001608
 80082a8:	2000161c 	.word	0x2000161c
 80082ac:	20001620 	.word	0x20001620
 80082b0:	200016d0 	.word	0x200016d0
 80082b4:	20001630 	.word	0x20001630
 80082b8:	08008bf8 	.word	0x08008bf8

080082bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3b04      	subs	r3, #4
 80082cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3b04      	subs	r3, #4
 80082da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f023 0201 	bic.w	r2, r3, #1
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3b04      	subs	r3, #4
 80082ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082ec:	4a0c      	ldr	r2, [pc, #48]	; (8008320 <pxPortInitialiseStack+0x64>)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3b14      	subs	r3, #20
 80082f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3b04      	subs	r3, #4
 8008302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f06f 0202 	mvn.w	r2, #2
 800830a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3b20      	subs	r3, #32
 8008310:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008312:	68fb      	ldr	r3, [r7, #12]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	08008325 	.word	0x08008325

08008324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800832e:	4b12      	ldr	r3, [pc, #72]	; (8008378 <prvTaskExitError+0x54>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d00a      	beq.n	800834e <prvTaskExitError+0x2a>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	60fb      	str	r3, [r7, #12]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <prvTaskExitError+0x28>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60bb      	str	r3, [r7, #8]
}
 8008360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008362:	bf00      	nop
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0fc      	beq.n	8008364 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	2000000c 	.word	0x2000000c
 800837c:	00000000 	.word	0x00000000

08008380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <pxCurrentTCBConst2>)
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	6808      	ldr	r0, [r1, #0]
 8008386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	f380 8809 	msr	PSP, r0
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f04f 0000 	mov.w	r0, #0
 8008396:	f380 8811 	msr	BASEPRI, r0
 800839a:	4770      	bx	lr
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst2>:
 80083a0:	200010f4 	.word	0x200010f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083a8:	4808      	ldr	r0, [pc, #32]	; (80083cc <prvPortStartFirstTask+0x24>)
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	f380 8808 	msr	MSP, r0
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8814 	msr	CONTROL, r0
 80083ba:	b662      	cpsie	i
 80083bc:	b661      	cpsie	f
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	df00      	svc	0
 80083c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ca:	bf00      	nop
 80083cc:	e000ed08 	.word	0xe000ed08

080083d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083d6:	4b46      	ldr	r3, [pc, #280]	; (80084f0 <xPortStartScheduler+0x120>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a46      	ldr	r2, [pc, #280]	; (80084f4 <xPortStartScheduler+0x124>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d10a      	bne.n	80083f6 <xPortStartScheduler+0x26>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	613b      	str	r3, [r7, #16]
}
 80083f2:	bf00      	nop
 80083f4:	e7fe      	b.n	80083f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083f6:	4b3e      	ldr	r3, [pc, #248]	; (80084f0 <xPortStartScheduler+0x120>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3f      	ldr	r2, [pc, #252]	; (80084f8 <xPortStartScheduler+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10a      	bne.n	8008416 <xPortStartScheduler+0x46>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008416:	4b39      	ldr	r3, [pc, #228]	; (80084fc <xPortStartScheduler+0x12c>)
 8008418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008438:	b2da      	uxtb	r2, r3
 800843a:	4b31      	ldr	r3, [pc, #196]	; (8008500 <xPortStartScheduler+0x130>)
 800843c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800843e:	4b31      	ldr	r3, [pc, #196]	; (8008504 <xPortStartScheduler+0x134>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008444:	e009      	b.n	800845a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008446:	4b2f      	ldr	r3, [pc, #188]	; (8008504 <xPortStartScheduler+0x134>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3b01      	subs	r3, #1
 800844c:	4a2d      	ldr	r2, [pc, #180]	; (8008504 <xPortStartScheduler+0x134>)
 800844e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	b2db      	uxtb	r3, r3
 8008458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b80      	cmp	r3, #128	; 0x80
 8008464:	d0ef      	beq.n	8008446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <xPortStartScheduler+0x134>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f1c3 0307 	rsb	r3, r3, #7
 800846e:	2b04      	cmp	r3, #4
 8008470:	d00a      	beq.n	8008488 <xPortStartScheduler+0xb8>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	60bb      	str	r3, [r7, #8]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008488:	4b1e      	ldr	r3, [pc, #120]	; (8008504 <xPortStartScheduler+0x134>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <xPortStartScheduler+0x134>)
 8008490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008492:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <xPortStartScheduler+0x134>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800849a:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <xPortStartScheduler+0x134>)
 800849c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084a6:	4b18      	ldr	r3, [pc, #96]	; (8008508 <xPortStartScheduler+0x138>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a17      	ldr	r2, [pc, #92]	; (8008508 <xPortStartScheduler+0x138>)
 80084ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <xPortStartScheduler+0x138>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a14      	ldr	r2, [pc, #80]	; (8008508 <xPortStartScheduler+0x138>)
 80084b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084be:	f000 f8dd 	bl	800867c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <xPortStartScheduler+0x13c>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084c8:	f000 f8fc 	bl	80086c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084cc:	4b10      	ldr	r3, [pc, #64]	; (8008510 <xPortStartScheduler+0x140>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <xPortStartScheduler+0x140>)
 80084d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084d8:	f7ff ff66 	bl	80083a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084dc:	f7ff f854 	bl	8007588 <vTaskSwitchContext>
	prvTaskExitError();
 80084e0:	f7ff ff20 	bl	8008324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	e000ed00 	.word	0xe000ed00
 80084f4:	410fc271 	.word	0x410fc271
 80084f8:	410fc270 	.word	0x410fc270
 80084fc:	e000e400 	.word	0xe000e400
 8008500:	20001720 	.word	0x20001720
 8008504:	20001724 	.word	0x20001724
 8008508:	e000ed20 	.word	0xe000ed20
 800850c:	2000000c 	.word	0x2000000c
 8008510:	e000ef34 	.word	0xe000ef34

08008514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	607b      	str	r3, [r7, #4]
}
 800852c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <vPortEnterCritical+0x58>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a0d      	ldr	r2, [pc, #52]	; (800856c <vPortEnterCritical+0x58>)
 8008536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008538:	4b0c      	ldr	r3, [pc, #48]	; (800856c <vPortEnterCritical+0x58>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d10f      	bne.n	8008560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <vPortEnterCritical+0x5c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <vPortEnterCritical+0x4c>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	603b      	str	r3, [r7, #0]
}
 800855c:	bf00      	nop
 800855e:	e7fe      	b.n	800855e <vPortEnterCritical+0x4a>
	}
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	2000000c 	.word	0x2000000c
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800857a:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <vPortExitCritical+0x50>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <vPortExitCritical+0x24>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	607b      	str	r3, [r7, #4]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <vPortExitCritical+0x50>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3b01      	subs	r3, #1
 800859e:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <vPortExitCritical+0x50>)
 80085a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <vPortExitCritical+0x50>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <vPortExitCritical+0x42>
 80085aa:	2300      	movs	r3, #0
 80085ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f383 8811 	msr	BASEPRI, r3
}
 80085b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	2000000c 	.word	0x2000000c
	...

080085d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085d0:	f3ef 8009 	mrs	r0, PSP
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <pxCurrentTCBConst>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	f01e 0f10 	tst.w	lr, #16
 80085e0:	bf08      	it	eq
 80085e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ea:	6010      	str	r0, [r2, #0]
 80085ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085f4:	f380 8811 	msr	BASEPRI, r0
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f7fe ffc2 	bl	8007588 <vTaskSwitchContext>
 8008604:	f04f 0000 	mov.w	r0, #0
 8008608:	f380 8811 	msr	BASEPRI, r0
 800860c:	bc09      	pop	{r0, r3}
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	6808      	ldr	r0, [r1, #0]
 8008612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008616:	f01e 0f10 	tst.w	lr, #16
 800861a:	bf08      	it	eq
 800861c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008620:	f380 8809 	msr	PSP, r0
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w

08008630 <pxCurrentTCBConst>:
 8008630:	200010f4 	.word	0x200010f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008652:	f7fe fedf 	bl	8007414 <xTaskIncrementTick>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <xPortSysTickHandler+0x40>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f383 8811 	msr	BASEPRI, r3
}
 800866e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <vPortSetupTimerInterrupt+0x34>)
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <vPortSetupTimerInterrupt+0x38>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <vPortSetupTimerInterrupt+0x3c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <vPortSetupTimerInterrupt+0x40>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	099b      	lsrs	r3, r3, #6
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <vPortSetupTimerInterrupt+0x44>)
 800869a:	3b01      	subs	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800869e:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <vPortSetupTimerInterrupt+0x34>)
 80086a0:	2207      	movs	r2, #7
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	e000e010 	.word	0xe000e010
 80086b4:	e000e018 	.word	0xe000e018
 80086b8:	20000000 	.word	0x20000000
 80086bc:	10624dd3 	.word	0x10624dd3
 80086c0:	e000e014 	.word	0xe000e014

080086c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086d4 <vPortEnableVFP+0x10>
 80086c8:	6801      	ldr	r1, [r0, #0]
 80086ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ce:	6001      	str	r1, [r0, #0]
 80086d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086d2:	bf00      	nop
 80086d4:	e000ed88 	.word	0xe000ed88

080086d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086de:	f3ef 8305 	mrs	r3, IPSR
 80086e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b0f      	cmp	r3, #15
 80086e8:	d914      	bls.n	8008714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <vPortValidateInterruptPriority+0x70>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086f4:	4b15      	ldr	r3, [pc, #84]	; (800874c <vPortValidateInterruptPriority+0x74>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	7afa      	ldrb	r2, [r7, #11]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d20a      	bcs.n	8008714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	607b      	str	r3, [r7, #4]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008714:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <vPortValidateInterruptPriority+0x78>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800871c:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <vPortValidateInterruptPriority+0x7c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d90a      	bls.n	800873a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	603b      	str	r3, [r7, #0]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <vPortValidateInterruptPriority+0x60>
	}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	e000e3f0 	.word	0xe000e3f0
 800874c:	20001720 	.word	0x20001720
 8008750:	e000ed0c 	.word	0xe000ed0c
 8008754:	20001724 	.word	0x20001724

08008758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008764:	f7fe fd9a 	bl	800729c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008768:	4b5b      	ldr	r3, [pc, #364]	; (80088d8 <pvPortMalloc+0x180>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008770:	f000 f920 	bl	80089b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008774:	4b59      	ldr	r3, [pc, #356]	; (80088dc <pvPortMalloc+0x184>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 8093 	bne.w	80088a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01d      	beq.n	80087c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008788:	2208      	movs	r2, #8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	2b00      	cmp	r3, #0
 8008798:	d014      	beq.n	80087c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f023 0307 	bic.w	r3, r3, #7
 80087a0:	3308      	adds	r3, #8
 80087a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <pvPortMalloc+0x6c>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	617b      	str	r3, [r7, #20]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d06e      	beq.n	80088a8 <pvPortMalloc+0x150>
 80087ca:	4b45      	ldr	r3, [pc, #276]	; (80088e0 <pvPortMalloc+0x188>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d869      	bhi.n	80088a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087d4:	4b43      	ldr	r3, [pc, #268]	; (80088e4 <pvPortMalloc+0x18c>)
 80087d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087d8:	4b42      	ldr	r3, [pc, #264]	; (80088e4 <pvPortMalloc+0x18c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087de:	e004      	b.n	80087ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d903      	bls.n	80087fc <pvPortMalloc+0xa4>
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f1      	bne.n	80087e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087fc:	4b36      	ldr	r3, [pc, #216]	; (80088d8 <pvPortMalloc+0x180>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008802:	429a      	cmp	r2, r3
 8008804:	d050      	beq.n	80088a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2208      	movs	r2, #8
 800880c:	4413      	add	r3, r2
 800880e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	2308      	movs	r3, #8
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	429a      	cmp	r2, r3
 8008826:	d91f      	bls.n	8008868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4413      	add	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <pvPortMalloc+0xf8>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	613b      	str	r3, [r7, #16]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008862:	69b8      	ldr	r0, [r7, #24]
 8008864:	f000 f908 	bl	8008a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008868:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <pvPortMalloc+0x188>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <pvPortMalloc+0x188>)
 8008874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <pvPortMalloc+0x188>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <pvPortMalloc+0x190>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	429a      	cmp	r2, r3
 8008880:	d203      	bcs.n	800888a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <pvPortMalloc+0x188>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <pvPortMalloc+0x190>)
 8008888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <pvPortMalloc+0x184>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	431a      	orrs	r2, r3
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <pvPortMalloc+0x194>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	4a11      	ldr	r2, [pc, #68]	; (80088ec <pvPortMalloc+0x194>)
 80088a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088a8:	f7fe fd06 	bl	80072b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <pvPortMalloc+0x174>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60fb      	str	r3, [r7, #12]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <pvPortMalloc+0x172>
	return pvReturn;
 80088cc:	69fb      	ldr	r3, [r7, #28]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3728      	adds	r7, #40	; 0x28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20005330 	.word	0x20005330
 80088dc:	20005344 	.word	0x20005344
 80088e0:	20005334 	.word	0x20005334
 80088e4:	20005328 	.word	0x20005328
 80088e8:	20005338 	.word	0x20005338
 80088ec:	2000533c 	.word	0x2000533c

080088f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d04d      	beq.n	800899e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008902:	2308      	movs	r3, #8
 8008904:	425b      	negs	r3, r3
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4413      	add	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <vPortFree+0xb8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4013      	ands	r3, r2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <vPortFree+0x44>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <vPortFree+0x62>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60bb      	str	r3, [r7, #8]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <vPortFree+0xb8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01e      	beq.n	800899e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d11a      	bne.n	800899e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <vPortFree+0xb8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	43db      	mvns	r3, r3
 8008972:	401a      	ands	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008978:	f7fe fc90 	bl	800729c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <vPortFree+0xbc>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4413      	add	r3, r2
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <vPortFree+0xbc>)
 8008988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800898a:	6938      	ldr	r0, [r7, #16]
 800898c:	f000 f874 	bl	8008a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <vPortFree+0xc0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	4a06      	ldr	r2, [pc, #24]	; (80089b0 <vPortFree+0xc0>)
 8008998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800899a:	f7fe fc8d 	bl	80072b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800899e:	bf00      	nop
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20005344 	.word	0x20005344
 80089ac:	20005334 	.word	0x20005334
 80089b0:	20005340 	.word	0x20005340

080089b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089c0:	4b27      	ldr	r3, [pc, #156]	; (8008a60 <prvHeapInit+0xac>)
 80089c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00c      	beq.n	80089e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3307      	adds	r3, #7
 80089d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0307 	bic.w	r3, r3, #7
 80089da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	4a1f      	ldr	r2, [pc, #124]	; (8008a60 <prvHeapInit+0xac>)
 80089e4:	4413      	add	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089ec:	4a1d      	ldr	r2, [pc, #116]	; (8008a64 <prvHeapInit+0xb0>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089f2:	4b1c      	ldr	r3, [pc, #112]	; (8008a64 <prvHeapInit+0xb0>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4413      	add	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a00:	2208      	movs	r2, #8
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0307 	bic.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <prvHeapInit+0xb4>)
 8008a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a16:	4b14      	ldr	r3, [pc, #80]	; (8008a68 <prvHeapInit+0xb4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <prvHeapInit+0xb4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	1ad2      	subs	r2, r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <prvHeapInit+0xb4>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <prvHeapInit+0xb8>)
 8008a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <prvHeapInit+0xbc>)
 8008a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <prvHeapInit+0xc0>)
 8008a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	20001728 	.word	0x20001728
 8008a64:	20005328 	.word	0x20005328
 8008a68:	20005330 	.word	0x20005330
 8008a6c:	20005338 	.word	0x20005338
 8008a70:	20005334 	.word	0x20005334
 8008a74:	20005344 	.word	0x20005344

08008a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a80:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <prvInsertBlockIntoFreeList+0xac>)
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e002      	b.n	8008a8c <prvInsertBlockIntoFreeList+0x14>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d8f7      	bhi.n	8008a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d108      	bne.n	8008aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d118      	bne.n	8008b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <prvInsertBlockIntoFreeList+0xb0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d00d      	beq.n	8008af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	441a      	add	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e008      	b.n	8008b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008af6:	4b0c      	ldr	r3, [pc, #48]	; (8008b28 <prvInsertBlockIntoFreeList+0xb0>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e003      	b.n	8008b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d002      	beq.n	8008b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20005328 	.word	0x20005328
 8008b28:	20005330 	.word	0x20005330

08008b2c <__libc_init_array>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4d0d      	ldr	r5, [pc, #52]	; (8008b64 <__libc_init_array+0x38>)
 8008b30:	4c0d      	ldr	r4, [pc, #52]	; (8008b68 <__libc_init_array+0x3c>)
 8008b32:	1b64      	subs	r4, r4, r5
 8008b34:	10a4      	asrs	r4, r4, #2
 8008b36:	2600      	movs	r6, #0
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	d109      	bne.n	8008b50 <__libc_init_array+0x24>
 8008b3c:	4d0b      	ldr	r5, [pc, #44]	; (8008b6c <__libc_init_array+0x40>)
 8008b3e:	4c0c      	ldr	r4, [pc, #48]	; (8008b70 <__libc_init_array+0x44>)
 8008b40:	f000 f82e 	bl	8008ba0 <_init>
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	10a4      	asrs	r4, r4, #2
 8008b48:	2600      	movs	r6, #0
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	d105      	bne.n	8008b5a <__libc_init_array+0x2e>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b54:	4798      	blx	r3
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7ee      	b.n	8008b38 <__libc_init_array+0xc>
 8008b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5e:	4798      	blx	r3
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7f2      	b.n	8008b4a <__libc_init_array+0x1e>
 8008b64:	08008c94 	.word	0x08008c94
 8008b68:	08008c94 	.word	0x08008c94
 8008b6c:	08008c94 	.word	0x08008c94
 8008b70:	08008c98 	.word	0x08008c98

08008b74 <memcpy>:
 8008b74:	440a      	add	r2, r1
 8008b76:	4291      	cmp	r1, r2
 8008b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7c:	d100      	bne.n	8008b80 <memcpy+0xc>
 8008b7e:	4770      	bx	lr
 8008b80:	b510      	push	{r4, lr}
 8008b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	d1f9      	bne.n	8008b82 <memcpy+0xe>
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <memset>:
 8008b90:	4402      	add	r2, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
