
DISCOvery4_DEBUG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e24  08008e24  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e2c  08008e2c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000814  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008a4  200008a4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001622e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003999  00000000  00000000  000362ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00039c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c96  00000000  00000000  0003be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e0f  00000000  00000000  00060b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc7bd  00000000  00000000  0007893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001450fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051c4  00000000  00000000  0014514c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d10 	.word	0x08008d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008d10 	.word	0x08008d10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int counter = 0;
int led_status = 0;
int button_status = 0;
int _write(int file, char *ptr, int len){
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int i = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e009      	b.n	80005ec <_write+0x2a>
		ITM_SendChar((*ptr++));
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	60ba      	str	r2, [r7, #8]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc7 	bl	8000574 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf1      	blt.n	80005d8 <_write+0x16>
	return len;
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc98 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f864 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f960 	bl	80008d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000610:	f000 f8ca 	bl	80007a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000614:	f000 f8f6 	bl	8000804 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000618:	f000 f924 	bl	8000864 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800061c:	f007 f82a 	bl	8007674 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counter++;
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0xac>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a21      	ldr	r2, [pc, #132]	; (80006ac <main+0xac>)
 8000628:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	4820      	ldr	r0, [pc, #128]	; (80006b0 <main+0xb0>)
 8000630:	f000 fff7 	bl	8001622 <HAL_GPIO_TogglePin>
	  printf("Counter : %d \n", counter);
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0xac>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	481e      	ldr	r0, [pc, #120]	; (80006b4 <main+0xb4>)
 800063c:	f007 fc44 	bl	8007ec8 <iprintf>
	  led_status = HAL_GPIO_ReadPin(LD4_GPIO_Port, LD4_Pin);
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	481a      	ldr	r0, [pc, #104]	; (80006b0 <main+0xb0>)
 8000646:	f000 ffbb 	bl	80015c0 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <main+0xb8>)
 8000650:	601a      	str	r2, [r3, #0]
	  if(led_status)
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0xb8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <main+0x62>
		  printf("led on \n");
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <main+0xbc>)
 800065c:	f007 fcba 	bl	8007fd4 <puts>
 8000660:	e002      	b.n	8000668 <main+0x68>
	  else
		  printf("led off \n");
 8000662:	4817      	ldr	r0, [pc, #92]	; (80006c0 <main+0xc0>)
 8000664:	f007 fcb6 	bl	8007fd4 <puts>

	  button_status = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000668:	2101      	movs	r1, #1
 800066a:	4816      	ldr	r0, [pc, #88]	; (80006c4 <main+0xc4>)
 800066c:	f000 ffa8 	bl	80015c0 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <main+0xc8>)
 8000676:	601a      	str	r2, [r3, #0]
	  if(button_status)
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <main+0xc8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <main+0x88>
		  printf("button pushed\n");
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <main+0xcc>)
 8000682:	f007 fca7 	bl	8007fd4 <puts>
 8000686:	e002      	b.n	800068e <main+0x8e>
	  else
		  printf("Button not pressed\n");
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <main+0xd0>)
 800068a:	f007 fca3 	bl	8007fd4 <puts>

	  HAL_Delay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f000 fcc3 	bl	800101c <HAL_Delay>

	  if(counter > 30 ){
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <main+0xac>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b1e      	cmp	r3, #30
 800069c:	dd02      	ble.n	80006a4 <main+0xa4>
		  counter = 2 ;
 800069e:	4b03      	ldr	r3, [pc, #12]	; (80006ac <main+0xac>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
	  }


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006a4:	f007 f80c 	bl	80076c0 <MX_USB_HOST_Process>
	  counter++;
 80006a8:	e7ba      	b.n	8000620 <main+0x20>
 80006aa:	bf00      	nop
 80006ac:	200001a0 	.word	0x200001a0
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	08008d28 	.word	0x08008d28
 80006b8:	200001a4 	.word	0x200001a4
 80006bc:	08008d38 	.word	0x08008d38
 80006c0:	08008d40 	.word	0x08008d40
 80006c4:	40020000 	.word	0x40020000
 80006c8:	200001a8 	.word	0x200001a8
 80006cc:	08008d4c 	.word	0x08008d4c
 80006d0:	08008d5c 	.word	0x08008d5c

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fb08 	bl	8007cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f96a 	bl	8003a34 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 f9b1 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fbcb 	bl	8003f24 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000794:	f000 f99a 	bl	8000acc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f002 fb41 	bl	8002e6c <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f96c 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000ac 	.word	0x200000ac
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_I2S3_Init+0x54>)
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <MX_I2S3_Init+0x58>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2S3_Init+0x54>)
 8000810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000814:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_I2S3_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2S3_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_I2S3_Init+0x54>)
 8000824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000828:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_I2S3_Init+0x54>)
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <MX_I2S3_Init+0x5c>)
 800082e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_I2S3_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_I2S3_Init+0x54>)
 8000844:	f002 fc56 	bl	80030f4 <HAL_I2S_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800084e:	f000 f93d 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000100 	.word	0x20000100
 800085c:	40003c00 	.word	0x40003c00
 8000860:	00017700 	.word	0x00017700

08000864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_SPI1_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_SPI1_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008b6:	f003 fe81 	bl	80045bc <HAL_SPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 f904 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000148 	.word	0x20000148
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	4b72      	ldr	r3, [pc, #456]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a71      	ldr	r2, [pc, #452]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b6f      	ldr	r3, [pc, #444]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a6a      	ldr	r2, [pc, #424]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a63      	ldr	r2, [pc, #396]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a5c      	ldr	r2, [pc, #368]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a55      	ldr	r2, [pc, #340]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a4e      	ldr	r2, [pc, #312]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <MX_GPIO_Init+0x1e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4849      	ldr	r0, [pc, #292]	; (8000ab8 <MX_GPIO_Init+0x1e8>)
 8000994:	f000 fe2c 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	4847      	ldr	r0, [pc, #284]	; (8000abc <MX_GPIO_Init+0x1ec>)
 800099e:	f000 fe27 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a2:	2200      	movs	r2, #0
 80009a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009a8:	4845      	ldr	r0, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x1f0>)
 80009aa:	f000 fe21 	bl	80015f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ae:	2308      	movs	r3, #8
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x1e8>)
 80009c6:	f000 fc5f 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4836      	ldr	r0, [pc, #216]	; (8000abc <MX_GPIO_Init+0x1ec>)
 80009e2:	f000 fc51 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f6:	2305      	movs	r3, #5
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	482e      	ldr	r0, [pc, #184]	; (8000abc <MX_GPIO_Init+0x1ec>)
 8000a02:	f000 fc41 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a10:	2302      	movs	r3, #2
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482a      	ldr	r0, [pc, #168]	; (8000ac4 <MX_GPIO_Init+0x1f4>)
 8000a1c:	f000 fc34 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a20:	2304      	movs	r3, #4
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4825      	ldr	r0, [pc, #148]	; (8000ac8 <MX_GPIO_Init+0x1f8>)
 8000a34:	f000 fc28 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0x1f8>)
 8000a56:	f000 fc17 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MX_GPIO_Init+0x1f0>)
 8000a74:	f000 fc08 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_GPIO_Init+0x1f0>)
 8000a8c:	f000 fbfc 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a94:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0x1e8>)
 8000aa6:	f000 fbef 	bl	8001288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3730      	adds	r7, #48	; 0x30
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b16:	2007      	movs	r0, #7
 8000b18:	f000 fb74 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b84:	f000 fb80 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <HAL_I2S_MspInit+0xf0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d15a      	bne.n	8000c9e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000be8:	2301      	movs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bec:	23c0      	movs	r3, #192	; 0xc0
 8000bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fb9f 	bl	800433c <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c04:	f7ff ff62 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_I2S_MspInit+0xf4>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <HAL_I2S_MspInit+0xf8>)
 8000c78:	f000 fb06 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <HAL_I2S_MspInit+0xfc>)
 8000c9a:	f000 faf5 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40003c00 	.word	0x40003c00
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_SPI_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12b      	bne.n	8000d32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d12:	23e0      	movs	r3, #224	; 0xe0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d22:	2305      	movs	r3, #5
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	f000 faab 	bl	8001288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013000 	.word	0x40013000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f922 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f000 fec3 	bl	8001b2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000590 	.word	0x20000590

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	605a      	str	r2, [r3, #4]
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_isatty>:

int _isatty(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f006 fefe 	bl	8007c84 <__errno>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <_sbrk+0x64>)
 8000ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20020000 	.word	0x20020000
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	200001ac 	.word	0x200001ac
 8000ebc:	200008a8 	.word	0x200008a8

08000ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x20>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <SystemInit+0x20>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eea:	490e      	ldr	r1, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f00:	4c0b      	ldr	r4, [pc, #44]	; (8000f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0e:	f7ff ffd7 	bl	8000ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f12:	f006 febd 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f16:	f7ff fb73 	bl	8000600 <main>
  bx  lr    
 8000f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f28:	08008e34 	.word	0x08008e34
  ldr r2, =_sbss
 8000f2c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f30:	200008a4 	.word	0x200008a4

08000f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f94f 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fdb4 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f967 	bl	800126e <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f92f 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	200001b0 	.word	0x200001b0

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200001b0 	.word	0x200001b0

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008

08001064 <__NVIC_SetPriorityGrouping>:
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff29 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff3e 	bl	80010ac <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff31 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e16b      	b.n	800157c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 815a 	bne.w	8001576 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80b4 	beq.w	8001576 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b60      	ldr	r3, [pc, #384]	; (8001594 <HAL_GPIO_Init+0x30c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a5f      	ldr	r2, [pc, #380]	; (8001594 <HAL_GPIO_Init+0x30c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_GPIO_Init+0x30c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a5b      	ldr	r2, [pc, #364]	; (8001598 <HAL_GPIO_Init+0x310>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_GPIO_Init+0x314>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x226>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <HAL_GPIO_Init+0x318>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d025      	beq.n	80014aa <HAL_GPIO_Init+0x222>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <HAL_GPIO_Init+0x31c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x21e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4f      	ldr	r2, [pc, #316]	; (80015a8 <HAL_GPIO_Init+0x320>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x21a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4e      	ldr	r2, [pc, #312]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x216>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_GPIO_Init+0x328>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x212>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4c      	ldr	r2, [pc, #304]	; (80015b4 <HAL_GPIO_Init+0x32c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x20e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_GPIO_Init+0x330>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x20a>
 800148e:	2307      	movs	r3, #7
 8001490:	e00e      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 8001492:	2308      	movs	r3, #8
 8001494:	e00c      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 8001496:	2306      	movs	r3, #6
 8001498:	e00a      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 800149e:	2304      	movs	r3, #4
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x228>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <HAL_GPIO_Init+0x310>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_GPIO_Init+0x334>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f2:	4a32      	ldr	r2, [pc, #200]	; (80015bc <HAL_GPIO_Init+0x334>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_GPIO_Init+0x334>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <HAL_GPIO_Init+0x334>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_GPIO_Init+0x334>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001546:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_GPIO_Init+0x334>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_GPIO_Init+0x334>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <HAL_GPIO_Init+0x334>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f ae90 	bls.w	80012a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40021800 	.word	0x40021800
 80015b8:	40021c00 	.word	0x40021c00
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800160c:	e003      	b.n	8001616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	041a      	lsls	r2, r3, #16
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43d9      	mvns	r1, r3
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	400b      	ands	r3, r1
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001658:	b08f      	sub	sp, #60	; 0x3c
 800165a:	af0a      	add	r7, sp, #40	; 0x28
 800165c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e054      	b.n	8001712 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f006 f854 	bl	8007730 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 f883 	bl	80047b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	687e      	ldr	r6, [r7, #4]
 80016b4:	466d      	mov	r5, sp
 80016b6:	f106 0410 	add.w	r4, r6, #16
 80016ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ca:	1d33      	adds	r3, r6, #4
 80016cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ce:	6838      	ldr	r0, [r7, #0]
 80016d0:	f002 fffd 	bl	80046ce <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f87a 	bl	80047d4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	687e      	ldr	r6, [r7, #4]
 80016e8:	466d      	mov	r5, sp
 80016ea:	f106 0410 	add.w	r4, r6, #16
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80016fe:	1d33      	adds	r3, r6, #4
 8001700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001702:	6838      	ldr	r0, [r7, #0]
 8001704:	f003 fa02 	bl	8004b0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800171a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800171a:	b590      	push	{r4, r7, lr}
 800171c:	b089      	sub	sp, #36	; 0x24
 800171e:	af04      	add	r7, sp, #16
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	460b      	mov	r3, r1
 800172e:	70bb      	strb	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_HCD_HC_Init+0x28>
 800173e:	2302      	movs	r3, #2
 8001740:	e076      	b.n	8001830 <HAL_HCD_HC_Init+0x116>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	333d      	adds	r3, #61	; 0x3d
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	3338      	adds	r3, #56	; 0x38
 800176a:	787a      	ldrb	r2, [r7, #1]
 800176c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3340      	adds	r3, #64	; 0x40
 800177c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800177e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3339      	adds	r3, #57	; 0x39
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	333f      	adds	r3, #63	; 0x3f
 80017a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	78ba      	ldrb	r2, [r7, #2]
 80017aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017ae:	b2d0      	uxtb	r0, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	333a      	adds	r3, #58	; 0x3a
 80017bc:	4602      	mov	r2, r0
 80017be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da09      	bge.n	80017dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	333b      	adds	r3, #59	; 0x3b
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e008      	b.n	80017ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	333b      	adds	r3, #59	; 0x3b
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	333c      	adds	r3, #60	; 0x3c
 80017fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001800:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	787c      	ldrb	r4, [r7, #1]
 8001808:	78ba      	ldrb	r2, [r7, #2]
 800180a:	78f9      	ldrb	r1, [r7, #3]
 800180c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4623      	mov	r3, r4
 800181e:	f003 fafb 	bl	8004e18 <USB_HC_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_HCD_HC_Halt+0x1e>
 8001852:	2302      	movs	r3, #2
 8001854:	e00f      	b.n	8001876 <HAL_HCD_HC_Halt+0x3e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fd4b 	bl	8005302 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4603      	mov	r3, r0
 8001890:	70fb      	strb	r3, [r7, #3]
 8001892:	460b      	mov	r3, r1
 8001894:	70bb      	strb	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	333b      	adds	r3, #59	; 0x3b
 80018a8:	78ba      	ldrb	r2, [r7, #2]
 80018aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	333f      	adds	r3, #63	; 0x3f
 80018ba:	787a      	ldrb	r2, [r7, #1]
 80018bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018be:	7c3b      	ldrb	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d112      	bne.n	80018ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3342      	adds	r3, #66	; 0x42
 80018d2:	2203      	movs	r2, #3
 80018d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	333d      	adds	r3, #61	; 0x3d
 80018e4:	7f3a      	ldrb	r2, [r7, #28]
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e008      	b.n	80018fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3342      	adds	r3, #66	; 0x42
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	f200 80c6 	bhi.w	8001a90 <HAL_HCD_HC_SubmitRequest+0x210>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	0800191d 	.word	0x0800191d
 8001910:	08001a7d 	.word	0x08001a7d
 8001914:	08001981 	.word	0x08001981
 8001918:	080019ff 	.word	0x080019ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800191c:	7c3b      	ldrb	r3, [r7, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	f040 80b8 	bne.w	8001a94 <HAL_HCD_HC_SubmitRequest+0x214>
 8001924:	78bb      	ldrb	r3, [r7, #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80b4 	bne.w	8001a94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800192c:	8b3b      	ldrh	r3, [r7, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3355      	adds	r3, #85	; 0x55
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3355      	adds	r3, #85	; 0x55
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3342      	adds	r3, #66	; 0x42
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800196a:	e093      	b.n	8001a94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	3342      	adds	r3, #66	; 0x42
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e089      	b.n	8001a94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001980:	78bb      	ldrb	r3, [r7, #2]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11d      	bne.n	80019c2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	3355      	adds	r3, #85	; 0x55
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3342      	adds	r3, #66	; 0x42
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019ac:	e073      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3342      	adds	r3, #66	; 0x42
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
      break;
 80019c0:	e069      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3354      	adds	r3, #84	; 0x54
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3342      	adds	r3, #66	; 0x42
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
      break;
 80019e8:	e055      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3342      	adds	r3, #66	; 0x42
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
      break;
 80019fc:	e04b      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019fe:	78bb      	ldrb	r3, [r7, #2]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d11d      	bne.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3355      	adds	r3, #85	; 0x55
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3342      	adds	r3, #66	; 0x42
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a2a:	e034      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3342      	adds	r3, #66	; 0x42
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
      break;
 8001a3e:	e02a      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3354      	adds	r3, #84	; 0x54
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3342      	adds	r3, #66	; 0x42
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
      break;
 8001a66:	e016      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3342      	adds	r3, #66	; 0x42
 8001a76:	2202      	movs	r2, #2
 8001a78:	701a      	strb	r2, [r3, #0]
      break;
 8001a7a:	e00c      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3342      	adds	r3, #66	; 0x42
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a90:	bf00      	nop
 8001a92:	e000      	b.n	8001a96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3344      	adds	r3, #68	; 0x44
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	8b3a      	ldrh	r2, [r7, #24]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	202c      	movs	r0, #44	; 0x2c
 8001ab0:	fb00 f303 	mul.w	r3, r0, r3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	334c      	adds	r3, #76	; 0x4c
 8001ab8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3360      	adds	r3, #96	; 0x60
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3350      	adds	r3, #80	; 0x50
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3339      	adds	r3, #57	; 0x39
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3361      	adds	r3, #97	; 0x61
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	222c      	movs	r2, #44	; 0x2c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	3338      	adds	r3, #56	; 0x38
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	18d1      	adds	r1, r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f003 fa9e 	bl	800505c <USB_HC_StartXfer>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop

08001b2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff9f 	bl	8004a86 <USB_GetMode>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f040 80f6 	bne.w	8001d3c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 ff83 	bl	8004a60 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80ec 	beq.w	8001d3a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 ff7a 	bl	8004a60 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b76:	d104      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 ff6a 	bl	8004a60 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b96:	d104      	bne.n	8001ba2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 ff5a 	bl	8004a60 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bb6:	d104      	bne.n	8001bc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 ff4a 	bl	8004a60 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d103      	bne.n	8001bde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 ff3c 	bl	8004a60 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf2:	d11c      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c0e:	2110      	movs	r1, #16
 8001c10:	6938      	ldr	r0, [r7, #16]
 8001c12:	f002 fe2b 	bl	800486c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f002 fe5c 	bl	80048d4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f832 	bl	8004c8c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f005 fdff 	bl	800782c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 ff14 	bl	8004a60 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c42:	d102      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f001 f89e 	bl	8002d86 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 ff06 	bl	8004a60 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d106      	bne.n	8001c6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f005 fdc8 	bl	80077f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fef5 	bl	8004a60 <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d101      	bne.n	8001c84 <HAL_HCD_IRQHandler+0x158>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_HCD_IRQHandler+0x15a>
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0210 	bic.w	r2, r2, #16
 8001c98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 ffa1 	bl	8002be2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0210 	orr.w	r2, r2, #16
 8001cae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 fed3 	bl	8004a60 <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cc4:	d13a      	bne.n	8001d3c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fb08 	bl	80052e0 <USB_HC_ReadInterrupt>
 8001cd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e025      	b.n	8001d24 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d02:	d106      	bne.n	8001d12 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8ab 	bl	8001e66 <HCD_HC_IN_IRQHandler>
 8001d10:	e005      	b.n	8001d1e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fbf9 	bl	8002510 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3d4      	bcc.n	8001cd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	e000      	b.n	8001d3c <HAL_HCD_IRQHandler+0x210>
      return;
 8001d3a:	bf00      	nop
    }
  }
}
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_HCD_Start+0x16>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e013      	b.n	8001d80 <HAL_HCD_Start+0x3e>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fff4 	bl	8004d54 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f002 fd0d 	bl	8004790 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_HCD_Stop+0x16>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e00d      	b.n	8001dba <HAL_HCD_Stop+0x32>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fbe2 	bl	8005574 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 ff96 	bl	8004d00 <USB_ResetPort>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	3360      	adds	r3, #96	; 0x60
 8001df8:	781b      	ldrb	r3, [r3, #0]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	212c      	movs	r1, #44	; 0x2c
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3350      	adds	r3, #80	; 0x50
 8001e20:	681b      	ldr	r3, [r3, #0]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 ffda 	bl	8004df4 <USB_GetCurrentFrame>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 ffb5 	bl	8004dc6 <USB_GetHostSpeed>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d11a      	bne.n	8001ecc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3361      	adds	r3, #97	; 0x61
 8001eb6:	2206      	movs	r2, #6
 8001eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fa1c 	bl	8005302 <USB_HC_Halt>
 8001eca:	e0af      	b.n	800202c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee2:	d11b      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3361      	adds	r3, #97	; 0x61
 8001f06:	2207      	movs	r2, #7
 8001f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 f9f4 	bl	8005302 <USB_HC_Halt>
 8001f1a:	e087      	b.n	800202c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d109      	bne.n	8001f46 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2320      	movs	r3, #32
 8001f42:	6093      	str	r3, [r2, #8]
 8001f44:	e072      	b.n	800202c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d11a      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3361      	adds	r3, #97	; 0x61
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f9b9 	bl	8005302 <USB_HC_Halt>
 8001f90:	e04c      	b.n	800202c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	d11b      	bne.n	8001fe2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3361      	adds	r3, #97	; 0x61
 8001fcc:	2208      	movs	r2, #8
 8001fce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 f991 	bl	8005302 <USB_HC_Halt>
 8001fe0:	e024      	b.n	800202c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d119      	bne.n	800202c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	461a      	mov	r2, r3
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3361      	adds	r3, #97	; 0x61
 8002018:	2206      	movs	r2, #6
 800201a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f003 f96b 	bl	8005302 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002042:	d112      	bne.n	800206a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f957 	bl	8005302 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	461a      	mov	r2, r3
 8002062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002066:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002068:	e24e      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	f040 80df 	bne.w	8002240 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3348      	adds	r3, #72	; 0x48
 8002098:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	0159      	lsls	r1, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	202c      	movs	r0, #44	; 0x2c
 80020b4:	fb00 f303 	mul.w	r3, r0, r3
 80020b8:	440b      	add	r3, r1
 80020ba:	3350      	adds	r3, #80	; 0x50
 80020bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	3361      	adds	r3, #97	; 0x61
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	335c      	adds	r3, #92	; 0x5c
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	461a      	mov	r2, r3
 80020f0:	2301      	movs	r3, #1
 80020f2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	333f      	adds	r3, #63	; 0x3f
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	333f      	adds	r3, #63	; 0x3f
 8002116:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002118:	2b02      	cmp	r3, #2
 800211a:	d111      	bne.n	8002140 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f003 f8eb 	bl	8005302 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	461a      	mov	r2, r3
 800213a:	2310      	movs	r3, #16
 800213c:	6093      	str	r3, [r2, #8]
 800213e:	e03a      	b.n	80021b6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	333f      	adds	r3, #63	; 0x3f
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d009      	beq.n	8002168 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	333f      	adds	r3, #63	; 0x3f
 8002162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002164:	2b01      	cmp	r3, #1
 8002166:	d126      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	0151      	lsls	r1, r2, #5
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	440a      	add	r2, r1
 800217e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002186:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3360      	adds	r3, #96	; 0x60
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	202c      	movs	r0, #44	; 0x2c
 80021a4:	fb00 f303 	mul.w	r3, r0, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3360      	adds	r3, #96	; 0x60
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f005 fb49 	bl	8007848 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d12b      	bne.n	8002216 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3348      	adds	r3, #72	; 0x48
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	202c      	movs	r0, #44	; 0x2c
 80021d4:	fb00 f202 	mul.w	r2, r0, r2
 80021d8:	440a      	add	r2, r1
 80021da:	3240      	adds	r2, #64	; 0x40
 80021dc:	8812      	ldrh	r2, [r2, #0]
 80021de:	fbb3 f3f2 	udiv	r3, r3, r2
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 818e 	beq.w	8002508 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3354      	adds	r3, #84	; 0x54
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2d8      	uxtb	r0, r3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	4602      	mov	r2, r0
 8002212:	701a      	strb	r2, [r3, #0]
}
 8002214:	e178      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3354      	adds	r3, #84	; 0x54
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2d8      	uxtb	r0, r3
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3354      	adds	r3, #84	; 0x54
 800223a:	4602      	mov	r2, r0
 800223c:	701a      	strb	r2, [r3, #0]
}
 800223e:	e163      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	f040 80f6 	bne.w	8002444 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3361      	adds	r3, #97	; 0x61
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d109      	bne.n	8002280 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e0c9      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3361      	adds	r3, #97	; 0x61
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d109      	bne.n	80022a8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3360      	adds	r3, #96	; 0x60
 80022a2:	2205      	movs	r2, #5
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e0b5      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3361      	adds	r3, #97	; 0x61
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d009      	beq.n	80022d0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3361      	adds	r3, #97	; 0x61
 80022ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d150      	bne.n	8002372 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	335c      	adds	r3, #92	; 0x5c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	202c      	movs	r0, #44	; 0x2c
 80022e8:	fb00 f303 	mul.w	r3, r0, r3
 80022ec:	440b      	add	r3, r1
 80022ee:	335c      	adds	r3, #92	; 0x5c
 80022f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d912      	bls.n	800232c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	335c      	adds	r3, #92	; 0x5c
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3360      	adds	r3, #96	; 0x60
 8002326:	2204      	movs	r2, #4
 8002328:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800232a:	e073      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	2202      	movs	r2, #2
 800233c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002354:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002370:	e050      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3361      	adds	r3, #97	; 0x61
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d122      	bne.n	80023cc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3360      	adds	r3, #96	; 0x60
 8002394:	2202      	movs	r2, #2
 8002396:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e023      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3361      	adds	r3, #97	; 0x61
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d119      	bne.n	8002414 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	335c      	adds	r3, #92	; 0x5c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	202c      	movs	r0, #44	; 0x2c
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	440b      	add	r3, r1
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	2204      	movs	r2, #4
 8002412:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2302      	movs	r3, #2
 8002424:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	b2d9      	uxtb	r1, r3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	202c      	movs	r0, #44	; 0x2c
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	4413      	add	r3, r2
 8002436:	3360      	adds	r3, #96	; 0x60
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f005 fa03 	bl	8007848 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002442:	e061      	b.n	8002508 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b10      	cmp	r3, #16
 8002458:	d156      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	333f      	adds	r3, #63	; 0x3f
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d111      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f002 ff39 	bl	8005302 <USB_HC_Halt>
 8002490:	e031      	b.n	80024f6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	333f      	adds	r3, #63	; 0x3f
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	333f      	adds	r3, #63	; 0x3f
 80024b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d11d      	bne.n	80024f6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	335c      	adds	r3, #92	; 0x5c
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d110      	bne.n	80024f6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	2203      	movs	r2, #3
 80024e4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 ff06 	bl	8005302 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	461a      	mov	r2, r3
 8002504:	2310      	movs	r3, #16
 8002506:	6093      	str	r3, [r2, #8]
}
 8002508:	bf00      	nop
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11a      	bne.n	8002576 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	461a      	mov	r2, r3
 800254e:	2304      	movs	r3, #4
 8002550:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	3361      	adds	r3, #97	; 0x61
 8002560:	2206      	movs	r2, #6
 8002562:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f002 fec7 	bl	8005302 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002574:	e331      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b20      	cmp	r3, #32
 800258a:	d12e      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	2320      	movs	r3, #32
 800259c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	333d      	adds	r3, #61	; 0x3d
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 8313 	bne.w	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	333d      	adds	r3, #61	; 0x3d
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3360      	adds	r3, #96	; 0x60
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fe8d 	bl	8005302 <USB_HC_Halt>
}
 80025e8:	e2f7      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d112      	bne.n	8002628 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	461a      	mov	r2, r3
 8002610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002614:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fe6e 	bl	8005302 <USB_HC_Halt>
}
 8002626:	e2d8      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d140      	bne.n	80026c0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	335c      	adds	r3, #92	; 0x5c
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d111      	bne.n	800268a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333d      	adds	r3, #61	; 0x3d
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2340      	movs	r3, #64	; 0x40
 8002688:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	461a      	mov	r2, r3
 8002698:	2301      	movs	r3, #1
 800269a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3361      	adds	r3, #97	; 0x61
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 fe22 	bl	8005302 <USB_HC_Halt>
}
 80026be:	e28c      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d12c      	bne.n	8002730 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3361      	adds	r3, #97	; 0x61
 80026e4:	2204      	movs	r2, #4
 80026e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	333d      	adds	r3, #61	; 0x3d
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fdf3 	bl	8005302 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2340      	movs	r3, #64	; 0x40
 800272c:	6093      	str	r3, [r2, #8]
}
 800272e:	e254      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11a      	bne.n	800277c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	2308      	movs	r3, #8
 8002756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3361      	adds	r3, #97	; 0x61
 8002766:	2205      	movs	r2, #5
 8002768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fdc4 	bl	8005302 <USB_HC_Halt>
}
 800277a:	e22e      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b10      	cmp	r3, #16
 8002790:	d140      	bne.n	8002814 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	335c      	adds	r3, #92	; 0x5c
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3361      	adds	r3, #97	; 0x61
 80027b2:	2203      	movs	r2, #3
 80027b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	333d      	adds	r3, #61	; 0x3d
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d112      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333c      	adds	r3, #60	; 0x3c
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	333d      	adds	r3, #61	; 0x3d
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fd81 	bl	8005302 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	2310      	movs	r3, #16
 8002810:	6093      	str	r3, [r2, #8]
}
 8002812:	e1e2      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d164      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d111      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3361      	adds	r3, #97	; 0x61
 8002840:	2206      	movs	r2, #6
 8002842:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fd57 	bl	8005302 <USB_HC_Halt>
 8002854:	e044      	b.n	80028e0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	202c      	movs	r0, #44	; 0x2c
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	440b      	add	r3, r1
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d920      	bls.n	80028ce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	335c      	adds	r3, #92	; 0x5c
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	2204      	movs	r2, #4
 80028ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	202c      	movs	r0, #44	; 0x2c
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3360      	adds	r3, #96	; 0x60
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f004 ffbe 	bl	8007848 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028cc:	e008      	b.n	80028e0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3360      	adds	r3, #96	; 0x60
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	6093      	str	r3, [r2, #8]
}
 80028f2:	e172      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290a:	d11b      	bne.n	8002944 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3361      	adds	r3, #97	; 0x61
 800291a:	2208      	movs	r2, #8
 800291c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fcea 	bl	8005302 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002940:	6093      	str	r3, [r2, #8]
}
 8002942:	e14a      	b.n	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	f040 813f 	bne.w	8002bda <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3361      	adds	r3, #97	; 0x61
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d17d      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	333f      	adds	r3, #63	; 0x3f
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d00a      	beq.n	80029ac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333f      	adds	r3, #63	; 0x3f
 80029a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	f040 8100 	bne.w	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3355      	adds	r3, #85	; 0x55
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2d8      	uxtb	r0, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3355      	adds	r3, #85	; 0x55
 80029d8:	4602      	mov	r2, r0
 80029da:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	f040 80e3 	bne.w	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	334c      	adds	r3, #76	; 0x4c
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80d8 	beq.w	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	334c      	adds	r3, #76	; 0x4c
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	202c      	movs	r0, #44	; 0x2c
 8002a12:	fb00 f202 	mul.w	r2, r0, r2
 8002a16:	440a      	add	r2, r1
 8002a18:	3240      	adds	r2, #64	; 0x40
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	202c      	movs	r0, #44	; 0x2c
 8002a26:	fb00 f202 	mul.w	r2, r0, r2
 8002a2a:	440a      	add	r2, r1
 8002a2c:	3240      	adds	r2, #64	; 0x40
 8002a2e:	8812      	ldrh	r2, [r2, #0]
 8002a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80b5 	beq.w	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3355      	adds	r3, #85	; 0x55
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3355      	adds	r3, #85	; 0x55
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e09f      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3361      	adds	r3, #97	; 0x61
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d109      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e08b      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3361      	adds	r3, #97	; 0x61
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d109      	bne.n	8002abc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e077      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3361      	adds	r3, #97	; 0x61
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d109      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	2205      	movs	r2, #5
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e063      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3361      	adds	r3, #97	; 0x61
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b06      	cmp	r3, #6
 8002af6:	d009      	beq.n	8002b0c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3361      	adds	r3, #97	; 0x61
 8002b06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d14f      	bne.n	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	202c      	movs	r0, #44	; 0x2c
 8002b24:	fb00 f303 	mul.w	r3, r0, r3
 8002b28:	440b      	add	r3, r1
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	335c      	adds	r3, #92	; 0x5c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d912      	bls.n	8002b68 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	335c      	adds	r3, #92	; 0x5c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3360      	adds	r3, #96	; 0x60
 8002b62:	2204      	movs	r2, #4
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e021      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b90:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2302      	movs	r3, #2
 8002bbc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	b2d9      	uxtb	r1, r3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	202c      	movs	r0, #44	; 0x2c
 8002bc8:	fb00 f303 	mul.w	r3, r0, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3360      	adds	r3, #96	; 0x60
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f004 fe37 	bl	8007848 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bda:	bf00      	nop
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08a      	sub	sp, #40	; 0x28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	0c5b      	lsrs	r3, r3, #17
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d004      	beq.n	8002c28 <HCD_RXQLVL_IRQHandler+0x46>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	f000 80a9 	beq.w	8002d78 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c26:	e0aa      	b.n	8002d7e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80a6 	beq.w	8002d7c <HCD_RXQLVL_IRQHandler+0x19a>
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3344      	adds	r3, #68	; 0x44
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 809b 	beq.w	8002d7c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3350      	adds	r3, #80	; 0x50
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	441a      	add	r2, r3
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	fb00 f303 	mul.w	r3, r0, r3
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	; 0x4c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d87a      	bhi.n	8002d64 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	b292      	uxth	r2, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f001 fe92 	bl	80049b0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3344      	adds	r3, #68	; 0x44
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	441a      	add	r2, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	202c      	movs	r0, #44	; 0x2c
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	440b      	add	r3, r1
 8002cac:	3344      	adds	r3, #68	; 0x44
 8002cae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3350      	adds	r3, #80	; 0x50
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	202c      	movs	r0, #44	; 0x2c
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	440b      	add	r3, r1
 8002cd0:	3350      	adds	r3, #80	; 0x50
 8002cd2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	0cdb      	lsrs	r3, r3, #19
 8002ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3340      	adds	r3, #64	; 0x40
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d13c      	bne.n	8002d7c <HCD_RXQLVL_IRQHandler+0x19a>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d039      	beq.n	8002d7c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d1e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d26:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3354      	adds	r3, #84	; 0x54
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	f083 0301 	eor.w	r3, r3, #1
 8002d4e:	b2d8      	uxtb	r0, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3354      	adds	r3, #84	; 0x54
 8002d5e:	4602      	mov	r2, r0
 8002d60:	701a      	strb	r2, [r3, #0]
      break;
 8002d62:	e00b      	b.n	8002d7c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3360      	adds	r3, #96	; 0x60
 8002d72:	2204      	movs	r2, #4
 8002d74:	701a      	strb	r2, [r3, #0]
      break;
 8002d76:	e001      	b.n	8002d7c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d7c:	bf00      	nop
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002db2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d10b      	bne.n	8002dd6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d102      	bne.n	8002dce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f004 fd21 	bl	8007810 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d132      	bne.n	8002e46 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f043 0308 	orr.w	r3, r3, #8
 8002de6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d126      	bne.n	8002e40 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d113      	bne.n	8002e22 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e04:	d106      	bne.n	8002e14 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 ff3d 	bl	8004c8c <USB_InitFSLSPClkSel>
 8002e12:	e011      	b.n	8002e38 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 ff36 	bl	8004c8c <USB_InitFSLSPClkSel>
 8002e20:	e00a      	b.n	8002e38 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d106      	bne.n	8002e38 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e30:	461a      	mov	r2, r3
 8002e32:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e36:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f004 fd13 	bl	8007864 <HAL_HCD_PortEnabled_Callback>
 8002e3e:	e002      	b.n	8002e46 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f004 fd1d 	bl	8007880 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d103      	bne.n	8002e58 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f043 0320 	orr.w	r3, r3, #32
 8002e56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e12b      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fe48 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f001 fa20 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d807      	bhi.n	8002ef0 <HAL_I2C_Init+0x84>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_I2C_Init+0x278>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e006      	b.n	8002efe <HAL_I2C_Init+0x92>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a7d      	ldr	r2, [pc, #500]	; (80030e8 <HAL_I2C_Init+0x27c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0e7      	b.n	80030d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a78      	ldr	r2, [pc, #480]	; (80030ec <HAL_I2C_Init+0x280>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d802      	bhi.n	8002f40 <HAL_I2C_Init+0xd4>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e009      	b.n	8002f54 <HAL_I2C_Init+0xe8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_I2C_Init+0x284>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	3301      	adds	r3, #1
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	495c      	ldr	r1, [pc, #368]	; (80030e0 <HAL_I2C_Init+0x274>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d819      	bhi.n	8002fa8 <HAL_I2C_Init+0x13c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e59      	subs	r1, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_I2C_Init+0x138>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e59      	subs	r1, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	e051      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e04f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <HAL_I2C_Init+0x168>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e58      	subs	r0, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Init+0x18e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x196>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e022      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <HAL_I2C_Init+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1e58      	subs	r0, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	440b      	add	r3, r1
 8003018:	fbb0 f3f3 	udiv	r3, r0, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Init+0x1dc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e58      	subs	r0, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	0099      	lsls	r1, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6809      	ldr	r1, [r1, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6911      	ldr	r1, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	000186a0 	.word	0x000186a0
 80030e4:	001e847f 	.word	0x001e847f
 80030e8:	003d08ff 	.word	0x003d08ff
 80030ec:	431bde83 	.word	0x431bde83
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e128      	b.n	8003358 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a90      	ldr	r2, [pc, #576]	; (8003360 <HAL_I2S_Init+0x26c>)
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd fd49 	bl	8000bb8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800313c:	f023 030f 	bic.w	r3, r3, #15
 8003140:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d060      	beq.n	8003214 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800315a:	2310      	movs	r3, #16
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e001      	b.n	8003164 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b20      	cmp	r3, #32
 800316a:	d802      	bhi.n	8003172 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003172:	2001      	movs	r0, #1
 8003174:	f001 f9c4 	bl	8004500 <HAL_RCCEx_GetPeriphCLKFreq>
 8003178:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003182:	d125      	bne.n	80031d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	fbb2 f2f3 	udiv	r2, r2, r3
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	461a      	mov	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	3305      	adds	r3, #5
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e01f      	b.n	80031ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	461a      	mov	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	3305      	adds	r3, #5
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e00e      	b.n	80031ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	3305      	adds	r3, #5
 80031ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_I2S_Init+0x270>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	08db      	lsrs	r3, r3, #3
 80031f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e003      	b.n	800321c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003214:	2302      	movs	r3, #2
 8003216:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d902      	bls.n	8003228 <HAL_I2S_Init+0x134>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2bff      	cmp	r3, #255	; 0xff
 8003226:	d907      	bls.n	8003238 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f043 0210 	orr.w	r2, r3, #16
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e08f      	b.n	8003358 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	ea42 0103 	orr.w	r1, r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	430a      	orrs	r2, r1
 800324a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003256:	f023 030f 	bic.w	r3, r3, #15
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6851      	ldr	r1, [r2, #4]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6892      	ldr	r2, [r2, #8]
 8003262:	4311      	orrs	r1, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68d2      	ldr	r2, [r2, #12]
 8003268:	4311      	orrs	r1, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6992      	ldr	r2, [r2, #24]
 800326e:	430a      	orrs	r2, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d161      	bne.n	8003348 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a38      	ldr	r2, [pc, #224]	; (8003368 <HAL_I2S_Init+0x274>)
 8003288:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a37      	ldr	r2, [pc, #220]	; (800336c <HAL_I2S_Init+0x278>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_I2S_Init+0x1a4>
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_I2S_Init+0x27c>)
 8003296:	e001      	b.n	800329c <HAL_I2S_Init+0x1a8>
 8003298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4932      	ldr	r1, [pc, #200]	; (800336c <HAL_I2S_Init+0x278>)
 80032a4:	428a      	cmp	r2, r1
 80032a6:	d101      	bne.n	80032ac <HAL_I2S_Init+0x1b8>
 80032a8:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_I2S_Init+0x27c>)
 80032aa:	e001      	b.n	80032b0 <HAL_I2S_Init+0x1bc>
 80032ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032b4:	f023 030f 	bic.w	r3, r3, #15
 80032b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2b      	ldr	r2, [pc, #172]	; (800336c <HAL_I2S_Init+0x278>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_I2S_Init+0x1d4>
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_I2S_Init+0x27c>)
 80032c6:	e001      	b.n	80032cc <HAL_I2S_Init+0x1d8>
 80032c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032cc:	2202      	movs	r2, #2
 80032ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_I2S_Init+0x278>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_I2S_Init+0x1ea>
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_I2S_Init+0x27c>)
 80032dc:	e001      	b.n	80032e2 <HAL_I2S_Init+0x1ee>
 80032de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ee:	d003      	beq.n	80032f8 <HAL_I2S_Init+0x204>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e001      	b.n	8003304 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800330e:	4313      	orrs	r3, r2
 8003310:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003318:	4313      	orrs	r3, r2
 800331a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003322:	4313      	orrs	r3, r2
 8003324:	b29a      	uxth	r2, r3
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	4313      	orrs	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003330:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <HAL_I2S_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_I2S_Init+0x24c>
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_I2S_Init+0x27c>)
 800333e:	e001      	b.n	8003344 <HAL_I2S_Init+0x250>
 8003340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003344:	897a      	ldrh	r2, [r7, #10]
 8003346:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0800346b 	.word	0x0800346b
 8003364:	cccccccd 	.word	0xcccccccd
 8003368:	08003581 	.word	0x08003581
 800336c:	40003800 	.word	0x40003800
 8003370:	40003400 	.word	0x40003400

08003374 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10e      	bne.n	8003404 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffb8 	bl	8003374 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	b292      	uxth	r2, r2
 8003420:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003452:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff93 	bl	8003388 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b04      	cmp	r3, #4
 8003484:	d13a      	bne.n	80034fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d109      	bne.n	80034a4 <I2S_IRQHandler+0x3a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d102      	bne.n	80034a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ffb4 	bl	800340c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d126      	bne.n	80034fc <I2S_IRQHandler+0x92>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d11f      	bne.n	80034fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0202 	orr.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff50 	bl	800339c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d136      	bne.n	8003576 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d109      	bne.n	8003526 <I2S_IRQHandler+0xbc>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d102      	bne.n	8003526 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff45 	bl	80033b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d122      	bne.n	8003576 <I2S_IRQHandler+0x10c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b20      	cmp	r3, #32
 800353c:	d11b      	bne.n	8003576 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800354c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff13 	bl	800339c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a92      	ldr	r2, [pc, #584]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800359a:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800359c:	e001      	b.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800359e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a8b      	ldr	r2, [pc, #556]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035b8:	4b8a      	ldr	r3, [pc, #552]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ba:	e001      	b.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035cc:	d004      	beq.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 8099 	bne.w	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d107      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f925 	bl	800383c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9c8 	bl	800399c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d13a      	bne.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d035      	beq.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800362a:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800362c:	e001      	b.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4969      	ldr	r1, [pc, #420]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363a:	428b      	cmp	r3, r1
 800363c:	d101      	bne.n	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800363e:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003640:	e001      	b.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800364a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800365a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fe88 	bl	800339c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b08      	cmp	r3, #8
 8003694:	f040 80c3 	bne.w	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80bd 	beq.w	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036c0:	e001      	b.n	80036c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4944      	ldr	r1, [pc, #272]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ce:	428b      	cmp	r3, r1
 80036d0:	d101      	bne.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036d2:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d4:	e001      	b.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fe4a 	bl	800339c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003708:	e089      	b.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d107      	bne.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8be 	bl	80038a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8fd 	bl	8003938 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d12f      	bne.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02a      	beq.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003760:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376e:	e001      	b.n	8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4919      	ldr	r1, [pc, #100]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800377c:	428b      	cmp	r3, r1
 800377e:	d101      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003782:	e001      	b.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800378c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fdfa 	bl	800339c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d136      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d031      	beq.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c8:	e001      	b.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4902      	ldr	r1, [pc, #8]	; (80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d6:	428b      	cmp	r3, r1
 80037d8:	d106      	bne.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037da:	4b02      	ldr	r3, [pc, #8]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037dc:	e006      	b.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037de:	bf00      	nop
 80037e0:	40003800 	.word	0x40003800
 80037e4:	40003400 	.word	0x40003400
 80037e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003800:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fdc0 	bl	800339c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800381c:	e000      	b.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381e:	bf00      	nop
}
 8003820:	bf00      	nop
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c99      	adds	r1, r3, #2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6251      	str	r1, [r2, #36]	; 0x24
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800387c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ffc9 	bl	8003828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c99      	adds	r1, r3, #2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6251      	str	r1, [r2, #36]	; 0x24
 80038b2:	8819      	ldrh	r1, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <I2SEx_TxISR_I2SExt+0x90>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <I2SEx_TxISR_I2SExt+0x22>
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <I2SEx_TxISR_I2SExt+0x94>)
 80038c0:	e001      	b.n	80038c6 <I2SEx_TxISR_I2SExt+0x26>
 80038c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c6:	460a      	mov	r2, r1
 80038c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d121      	bne.n	8003926 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <I2SEx_TxISR_I2SExt+0x90>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <I2SEx_TxISR_I2SExt+0x50>
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <I2SEx_TxISR_I2SExt+0x94>)
 80038ee:	e001      	b.n	80038f4 <I2SEx_TxISR_I2SExt+0x54>
 80038f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	490d      	ldr	r1, [pc, #52]	; (8003930 <I2SEx_TxISR_I2SExt+0x90>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d101      	bne.n	8003904 <I2SEx_TxISR_I2SExt+0x64>
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <I2SEx_TxISR_I2SExt+0x94>)
 8003902:	e001      	b.n	8003908 <I2SEx_TxISR_I2SExt+0x68>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff81 	bl	8003828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40003800 	.word	0x40003800
 8003934:	40003400 	.word	0x40003400

08003938 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68d8      	ldr	r0, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	1c99      	adds	r1, r3, #2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003950:	b282      	uxth	r2, r0
 8003952:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d113      	bne.n	8003994 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff4a 	bl	8003828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <I2SEx_RxISR_I2SExt+0x90>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x16>
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <I2SEx_RxISR_I2SExt+0x94>)
 80039b0:	e001      	b.n	80039b6 <I2SEx_RxISR_I2SExt+0x1a>
 80039b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b6:	68d8      	ldr	r0, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	1c99      	adds	r1, r3, #2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039c2:	b282      	uxth	r2, r0
 80039c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d121      	bne.n	8003a22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <I2SEx_RxISR_I2SExt+0x90>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <I2SEx_RxISR_I2SExt+0x50>
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <I2SEx_RxISR_I2SExt+0x94>)
 80039ea:	e001      	b.n	80039f0 <I2SEx_RxISR_I2SExt+0x54>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	490d      	ldr	r1, [pc, #52]	; (8003a2c <I2SEx_RxISR_I2SExt+0x90>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d101      	bne.n	8003a00 <I2SEx_RxISR_I2SExt+0x64>
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <I2SEx_RxISR_I2SExt+0x94>)
 80039fe:	e001      	b.n	8003a04 <I2SEx_RxISR_I2SExt+0x68>
 8003a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ff03 	bl	8003828 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40003800 	.word	0x40003800
 8003a30:	40003400 	.word	0x40003400

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e267      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d075      	beq.n	8003b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a52:	4b88      	ldr	r3, [pc, #544]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d112      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6a:	4b82      	ldr	r3, [pc, #520]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d10b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	4b7e      	ldr	r3, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x108>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d157      	bne.n	8003b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e242      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x74>
 8003a9a:	4b76      	ldr	r3, [pc, #472]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a75      	ldr	r2, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e01d      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x98>
 8003ab2:	4b70      	ldr	r3, [pc, #448]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6f      	ldr	r2, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b6d      	ldr	r3, [pc, #436]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6c      	ldr	r2, [pc, #432]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0xb0>
 8003acc:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a68      	ldr	r2, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fa8a 	bl	8001004 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fd fa86 	bl	8001004 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e207      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xc0>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fd fa76 	bl	8001004 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fa72 	bl	8001004 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1f3      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0xe8>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d11c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b62:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1c7      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b86:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4937      	ldr	r1, [pc, #220]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9a:	e03a      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fa2b 	bl	8001004 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb2:	f7fd fa27 	bl	8001004 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1a8      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4925      	ldr	r1, [pc, #148]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
 8003be4:	e015      	b.n	8003c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <HAL_RCC_OscConfig+0x244>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fa0a 	bl	8001004 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fd fa06 	bl	8001004 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e187      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d036      	beq.n	8003c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd f9ea 	bl	8001004 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c34:	f7fd f9e6 	bl	8001004 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e167      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_OscConfig+0x240>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x200>
 8003c52:	e01b      	b.n	8003c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_OscConfig+0x248>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fd f9d3 	bl	8001004 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	e00e      	b.n	8003c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fd f9cf 	bl	8001004 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d907      	bls.n	8003c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e150      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470000 	.word	0x42470000
 8003c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ea      	bne.n	8003c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8097 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b81      	ldr	r3, [pc, #516]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	4b7d      	ldr	r3, [pc, #500]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cca:	4b77      	ldr	r3, [pc, #476]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d118      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd6:	4b74      	ldr	r3, [pc, #464]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce2:	f7fd f98f 	bl	8001004 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fd f98b 	bl	8001004 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e10c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_OscConfig+0x474>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2ea>
 8003d10:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a63      	ldr	r2, [pc, #396]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	e01c      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b05      	cmp	r3, #5
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x30c>
 8003d26:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 0304 	orr.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a5b      	ldr	r2, [pc, #364]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x324>
 8003d40:	4b58      	ldr	r3, [pc, #352]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a57      	ldr	r2, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a54      	ldr	r2, [pc, #336]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d60:	f7fd f950 	bl	8001004 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd f94c 	bl	8001004 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0cb      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RCC_OscConfig+0x334>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd f93a 	bl	8001004 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fd f936 	bl	8001004 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0b5      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ee      	bne.n	8003d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a1 	beq.w	8003f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd2:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d05c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d141      	bne.n	8003e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_RCC_OscConfig+0x478>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd f90a 	bl	8001004 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd f906 	bl	8001004 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e087      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fd f8df 	bl	8001004 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fd f8db 	bl	8001004 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e05c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x416>
 8003e68:	e054      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_RCC_OscConfig+0x478>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fd f8c8 	bl	8001004 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fd f8c4 	bl	8001004 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e045      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x444>
 8003e96:	e03d      	b.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e038      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x4ec>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d121      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11a      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800

08003f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0cc      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f38:	4b68      	ldr	r3, [pc, #416]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d90c      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b63      	ldr	r3, [pc, #396]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a52      	ldr	r2, [pc, #328]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	494d      	ldr	r1, [pc, #308]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d044      	beq.n	8004044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d119      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e067      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4934      	ldr	r1, [pc, #208]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fc fff6 	bl	8001004 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fc fff2 	bl	8001004 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e04f      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d20c      	bcs.n	800406c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e032      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4916      	ldr	r1, [pc, #88]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	490e      	ldr	r1, [pc, #56]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040aa:	f000 f821 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	490a      	ldr	r1, [pc, #40]	; (80040e4 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	fa22 f303 	lsr.w	r3, r2, r3
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc ff56 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	08008d74 	.word	0x08008d74
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b094      	sub	sp, #80	; 0x50
 80040f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	647b      	str	r3, [r7, #68]	; 0x44
 80040fc:	2300      	movs	r3, #0
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004100:	2300      	movs	r3, #0
 8004102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004108:	4b79      	ldr	r3, [pc, #484]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d00d      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x40>
 8004114:	2b08      	cmp	r3, #8
 8004116:	f200 80e1 	bhi.w	80042dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x3a>
 8004122:	e0db      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b73      	ldr	r3, [pc, #460]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004128:	e0db      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800412a:	4b73      	ldr	r3, [pc, #460]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800412c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800412e:	e0d8      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004130:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d063      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b6a      	ldr	r3, [pc, #424]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
 800415e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004162:	4622      	mov	r2, r4
 8004164:	462b      	mov	r3, r5
 8004166:	f04f 0000 	mov.w	r0, #0
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	0159      	lsls	r1, r3, #5
 8004170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004174:	0150      	lsls	r0, r2, #5
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4621      	mov	r1, r4
 800417c:	1a51      	subs	r1, r2, r1
 800417e:	6139      	str	r1, [r7, #16]
 8004180:	4629      	mov	r1, r5
 8004182:	eb63 0301 	sbc.w	r3, r3, r1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004194:	4659      	mov	r1, fp
 8004196:	018b      	lsls	r3, r1, #6
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800419e:	4651      	mov	r1, sl
 80041a0:	018a      	lsls	r2, r1, #6
 80041a2:	4651      	mov	r1, sl
 80041a4:	ebb2 0801 	subs.w	r8, r2, r1
 80041a8:	4659      	mov	r1, fp
 80041aa:	eb63 0901 	sbc.w	r9, r3, r1
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c2:	4690      	mov	r8, r2
 80041c4:	4699      	mov	r9, r3
 80041c6:	4623      	mov	r3, r4
 80041c8:	eb18 0303 	adds.w	r3, r8, r3
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	462b      	mov	r3, r5
 80041d0:	eb49 0303 	adc.w	r3, r9, r3
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041e2:	4629      	mov	r1, r5
 80041e4:	024b      	lsls	r3, r1, #9
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ec:	4621      	mov	r1, r4
 80041ee:	024a      	lsls	r2, r1, #9
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f6:	2200      	movs	r2, #0
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004200:	f7fc f836 	bl	8000270 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	e058      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	4618      	mov	r0, r3
 8004218:	4611      	mov	r1, r2
 800421a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800421e:	623b      	str	r3, [r7, #32]
 8004220:	2300      	movs	r3, #0
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
 8004224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	f04f 0000 	mov.w	r0, #0
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	0159      	lsls	r1, r3, #5
 8004236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423a:	0150      	lsls	r0, r2, #5
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4641      	mov	r1, r8
 8004242:	ebb2 0a01 	subs.w	sl, r2, r1
 8004246:	4649      	mov	r1, r9
 8004248:	eb63 0b01 	sbc.w	fp, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800425c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004260:	ebb2 040a 	subs.w	r4, r2, sl
 8004264:	eb63 050b 	sbc.w	r5, r3, fp
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	00eb      	lsls	r3, r5, #3
 8004272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004276:	00e2      	lsls	r2, r4, #3
 8004278:	4614      	mov	r4, r2
 800427a:	461d      	mov	r5, r3
 800427c:	4643      	mov	r3, r8
 800427e:	18e3      	adds	r3, r4, r3
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	464b      	mov	r3, r9
 8004284:	eb45 0303 	adc.w	r3, r5, r3
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004296:	4629      	mov	r1, r5
 8004298:	028b      	lsls	r3, r1, #10
 800429a:	4621      	mov	r1, r4
 800429c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a0:	4621      	mov	r1, r4
 80042a2:	028a      	lsls	r2, r1, #10
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	2200      	movs	r2, #0
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	61fa      	str	r2, [r7, #28]
 80042b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b4:	f7fb ffdc 	bl	8000270 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4613      	mov	r3, r2
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3750      	adds	r7, #80	; 0x50
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	007a1200 	.word	0x007a1200

080042fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000000 	.word	0x20000000

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	08008d84 	.word	0x08008d84

0800433c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004360:	2b00      	cmp	r3, #0
 8004362:	d035      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004364:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800436a:	f7fc fe4b 	bl	8001004 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004372:	f7fc fe47 	bl	8001004 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0b0      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	019a      	lsls	r2, r3, #6
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	071b      	lsls	r3, r3, #28
 800439c:	4955      	ldr	r1, [pc, #340]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043a4:	4b52      	ldr	r3, [pc, #328]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043aa:	f7fc fe2b 	bl	8001004 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043b2:	f7fc fe27 	bl	8001004 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e090      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c4:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8083 	beq.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	4a43      	ldr	r2, [pc, #268]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	; 0x40
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3e      	ldr	r2, [pc, #248]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004404:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004406:	f7fc fdfd 	bl	8001004 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fc fdf9 	bl	8001004 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e062      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004420:	4b35      	ldr	r3, [pc, #212]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800442c:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004434:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02f      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d028      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800445a:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004460:	4a24      	ldr	r2, [pc, #144]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d114      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004472:	f7fc fdc7 	bl	8001004 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	e00a      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fc fdc3 	bl	8001004 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e02a      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ee      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a8:	d10d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	490d      	ldr	r1, [pc, #52]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
 80044c4:	e005      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044d0:	6093      	str	r3, [r2, #8]
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	4905      	ldr	r1, [pc, #20]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	42470068 	.word	0x42470068
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
 80044fc:	42470e40 	.word	0x42470e40

08004500 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d13e      	bne.n	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800451e:	4b23      	ldr	r3, [pc, #140]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d12f      	bne.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004534:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004536:	617b      	str	r3, [r7, #20]
          break;
 8004538:	e02f      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800453a:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d108      	bne.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004548:	4b18      	ldr	r3, [pc, #96]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004552:	fbb2 f3f3 	udiv	r3, r2, r3
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e007      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800455a:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004562:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004584:	0f1b      	lsrs	r3, r3, #28
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	617b      	str	r3, [r7, #20]
          break;
 8004592:	e002      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
          break;
 8004598:	bf00      	nop
        }
      }
      break;
 800459a:	bf00      	nop
    }
  }
  return frequency;
 800459c:	697b      	ldr	r3, [r7, #20]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	00bb8000 	.word	0x00bb8000
 80045b4:	007a1200 	.word	0x007a1200
 80045b8:	00f42400 	.word	0x00f42400

080045bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e07b      	b.n	80046c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d108      	bne.n	80045e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045de:	d009      	beq.n	80045f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
 80045e6:	e005      	b.n	80045f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fb52 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	ea42 0103 	orr.w	r1, r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0104 	and.w	r1, r3, #4
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f003 0210 	and.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ce:	b084      	sub	sp, #16
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	f107 001c 	add.w	r0, r7, #28
 80046dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d122      	bne.n	800472c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800470e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d105      	bne.n	8004720 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f9bf 	bl	8004aa4 <USB_CoreReset>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e01a      	b.n	8004762 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9b3 	bl	8004aa4 <USB_CoreReset>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
 8004754:	e005      	b.n	8004762 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10b      	bne.n	8004780 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f043 0206 	orr.w	r2, r3, #6
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800478c:	b004      	add	sp, #16
 800478e:	4770      	bx	lr

08004790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d115      	bne.n	8004822 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004802:	2001      	movs	r0, #1
 8004804:	f7fc fc0a 	bl	800101c <HAL_Delay>
      ms++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f939 	bl	8004a86 <USB_GetMode>
 8004814:	4603      	mov	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d01e      	beq.n	8004858 <USB_SetCurrentMode+0x84>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b31      	cmp	r3, #49	; 0x31
 800481e:	d9f0      	bls.n	8004802 <USB_SetCurrentMode+0x2e>
 8004820:	e01a      	b.n	8004858 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d115      	bne.n	8004854 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004834:	2001      	movs	r0, #1
 8004836:	f7fc fbf1 	bl	800101c <HAL_Delay>
      ms++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f920 	bl	8004a86 <USB_GetMode>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <USB_SetCurrentMode+0x84>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b31      	cmp	r3, #49	; 0x31
 8004850:	d9f0      	bls.n	8004834 <USB_SetCurrentMode+0x60>
 8004852:	e001      	b.n	8004858 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e005      	b.n	8004864 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b32      	cmp	r3, #50	; 0x32
 800485c:	d101      	bne.n	8004862 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <USB_FlushTxFifo+0x64>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e01b      	b.n	80048c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	daf2      	bge.n	800487a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	019b      	lsls	r3, r3, #6
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <USB_FlushTxFifo+0x64>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e006      	b.n	80048c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d0f0      	beq.n	80048a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	00030d40 	.word	0x00030d40

080048d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <USB_FlushRxFifo+0x5c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e018      	b.n	8004924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	daf2      	bge.n	80048e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2210      	movs	r2, #16
 8004902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <USB_FlushRxFifo+0x5c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e006      	b.n	8004924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b10      	cmp	r3, #16
 8004920:	d0f0      	beq.n	8004904 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	00030d40 	.word	0x00030d40

08004934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	460b      	mov	r3, r1
 8004944:	71fb      	strb	r3, [r7, #7]
 8004946:	4613      	mov	r3, r2
 8004948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d123      	bne.n	80049a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800495a:	88bb      	ldrh	r3, [r7, #4]
 800495c:	3303      	adds	r3, #3
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	e018      	b.n	800499a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	031a      	lsls	r2, r3, #12
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	461a      	mov	r2, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	3301      	adds	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	3301      	adds	r3, #1
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d3e2      	bcc.n	8004968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3724      	adds	r7, #36	; 0x24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b08b      	sub	sp, #44	; 0x2c
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	e014      	b.n	8004a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	3301      	adds	r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	3301      	adds	r3, #1
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	3301      	adds	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	3301      	adds	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	3301      	adds	r3, #1
 8004a04:	623b      	str	r3, [r7, #32]
 8004a06:	6a3a      	ldr	r2, [r7, #32]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d3e6      	bcc.n	80049dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a0e:	8bfb      	ldrh	r3, [r7, #30]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01e      	beq.n	8004a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f107 0310 	add.w	r3, r7, #16
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	701a      	strb	r2, [r3, #0]
      i++;
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	3301      	adds	r3, #1
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a46:	8bfb      	ldrh	r3, [r7, #30]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a4c:	8bfb      	ldrh	r3, [r7, #30]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ea      	bne.n	8004a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	372c      	adds	r7, #44	; 0x2c
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0301 	and.w	r3, r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <USB_CoreReset+0x64>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e01b      	b.n	8004afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	daf2      	bge.n	8004ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <USB_CoreReset+0x64>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d0f0      	beq.n	8004ada <USB_CoreReset+0x36>

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	00030d40 	.word	0x00030d40

08004b0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d018      	beq.n	8004b94 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10a      	bne.n	8004b7e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b76:	f043 0304 	orr.w	r3, r3, #4
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e014      	b.n	8004ba8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b8c:	f023 0304 	bic.w	r3, r3, #4
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e009      	b.n	8004ba8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ba2:	f023 0304 	bic.w	r3, r3, #4
 8004ba6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ba8:	2110      	movs	r1, #16
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff fe5e 	bl	800486c <USB_FlushTxFifo>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fe8a 	bl	80048d4 <USB_FlushRxFifo>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	e015      	b.n	8004bfc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3e5      	bcc.n	8004bd0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <USB_HostInit+0x16c>)
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <USB_HostInit+0x170>)
 8004c30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c34:	e009      	b.n	8004c4a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <USB_HostInit+0x174>)
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <USB_HostInit+0x178>)
 8004c46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f043 0210 	orr.w	r2, r3, #16
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <USB_HostInit+0x17c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c74:	b004      	add	sp, #16
 8004c76:	4770      	bx	lr
 8004c78:	01000200 	.word	0x01000200
 8004c7c:	00e00300 	.word	0x00e00300
 8004c80:	00600080 	.word	0x00600080
 8004c84:	004000e0 	.word	0x004000e0
 8004c88:	a3200008 	.word	0xa3200008

08004c8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d107      	bne.n	8004cde <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004cda:	6053      	str	r3, [r2, #4]
 8004cdc:	e009      	b.n	8004cf2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d106      	bne.n	8004cf2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cea:	461a      	mov	r2, r3
 8004cec:	f241 7370 	movw	r3, #6000	; 0x1770
 8004cf0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d30:	2064      	movs	r0, #100	; 0x64
 8004d32:	f7fc f973 	bl	800101c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d42:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d44:	200a      	movs	r0, #10
 8004d46:	f7fc f969 	bl	800101c <HAL_Delay>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <USB_DriveVbus+0x44>
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d106      	bne.n	8004d98 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d96:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d109      	bne.n	8004db8 <USB_DriveVbus+0x64>
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004db2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0c5b      	lsrs	r3, r3, #17
 8004de4:	f003 0303 	and.w	r3, r3, #3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	b29b      	uxth	r3, r3
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	70fb      	strb	r3, [r7, #3]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70bb      	strb	r3, [r7, #2]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e46:	461a      	mov	r2, r3
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d87e      	bhi.n	8004f54 <USB_HC_Init+0x13c>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <USB_HC_Init+0x44>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e6d 	.word	0x08004e6d
 8004e60:	08004f17 	.word	0x08004f17
 8004e64:	08004e6d 	.word	0x08004e6d
 8004e68:	08004ed9 	.word	0x08004ed9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	da10      	bge.n	8004eaa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004ea8:	e057      	b.n	8004f5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d051      	beq.n	8004f5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	78fa      	ldrb	r2, [r7, #3]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ed4:	60d3      	str	r3, [r2, #12]
      break;
 8004ed6:	e040      	b.n	8004f5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004eea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004eec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da34      	bge.n	8004f5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f14:	e023      	b.n	8004f5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f22:	461a      	mov	r2, r3
 8004f24:	f240 2325 	movw	r3, #549	; 0x225
 8004f28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da17      	bge.n	8004f62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f52:	e006      	b.n	8004f62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	77fb      	strb	r3, [r7, #31]
      break;
 8004f58:	e004      	b.n	8004f64 <USB_HC_Init+0x14c>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <USB_HC_Init+0x14c>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <USB_HC_Init+0x14c>
      break;
 8004f62:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7e:	f043 0302 	orr.w	r3, r3, #2
 8004f82:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	2101      	movs	r1, #1
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004fae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da03      	bge.n	8004fbe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	e001      	b.n	8004fc2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff feff 	bl	8004dc6 <USB_GetHostSpeed>
 8004fc8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d106      	bne.n	8004fe0 <USB_HC_Init+0x1c8>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d003      	beq.n	8004fe0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e001      	b.n	8004fe4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fe4:	787b      	ldrb	r3, [r7, #1]
 8004fe6:	059b      	lsls	r3, r3, #22
 8004fe8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fec:	78bb      	ldrb	r3, [r7, #2]
 8004fee:	02db      	lsls	r3, r3, #11
 8004ff0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ff4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ffa:	049b      	lsls	r3, r3, #18
 8004ffc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005000:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005002:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005004:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005008:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	0159      	lsls	r1, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	440b      	add	r3, r1
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005020:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005022:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005026:	2b03      	cmp	r3, #3
 8005028:	d003      	beq.n	8005032 <USB_HC_Init+0x21a>
 800502a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10f      	bne.n	8005052 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	440a      	add	r2, r1
 8005048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800504c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005050:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005052:	7ffb      	ldrb	r3, [r7, #31]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	; 0x30
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005078:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02d      	beq.n	80050e2 <USB_HC_StartXfer+0x86>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	791b      	ldrb	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d129      	bne.n	80050e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d117      	bne.n	80050c4 <USB_HC_StartXfer+0x68>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	79db      	ldrb	r3, [r3, #7]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <USB_HC_StartXfer+0x48>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	79db      	ldrb	r3, [r3, #7]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d10f      	bne.n	80050c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	6a3a      	ldr	r2, [r7, #32]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <USB_HC_StartXfer+0x86>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	795b      	ldrb	r3, [r3, #5]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	785b      	ldrb	r3, [r3, #1]
 80050d6:	4619      	mov	r1, r3
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fa0f 	bl	80054fc <USB_DoPing>
      return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e0f8      	b.n	80052d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	8912      	ldrh	r2, [r2, #8]
 80050f2:	4413      	add	r3, r2
 80050f4:	3b01      	subs	r3, #1
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	8912      	ldrh	r2, [r2, #8]
 80050fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80050fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005100:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005102:	8b7b      	ldrh	r3, [r7, #26]
 8005104:	429a      	cmp	r2, r3
 8005106:	d90b      	bls.n	8005120 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005108:	8b7b      	ldrh	r3, [r7, #26]
 800510a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800510c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	8912      	ldrh	r2, [r2, #8]
 8005112:	fb03 f202 	mul.w	r2, r3, r2
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	611a      	str	r2, [r3, #16]
 800511a:	e001      	b.n	8005120 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800511c:	2301      	movs	r3, #1
 800511e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	8912      	ldrh	r2, [r2, #8]
 800512e:	fb03 f202 	mul.w	r2, r3, r2
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	e003      	b.n	8005140 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800514a:	04d9      	lsls	r1, r3, #19
 800514c:	4b63      	ldr	r3, [pc, #396]	; (80052dc <USB_HC_StartXfer+0x280>)
 800514e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005150:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	7a9b      	ldrb	r3, [r3, #10]
 8005156:	075b      	lsls	r3, r3, #29
 8005158:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800515c:	69f9      	ldr	r1, [r7, #28]
 800515e:	0148      	lsls	r0, r1, #5
 8005160:	6a39      	ldr	r1, [r7, #32]
 8005162:	4401      	add	r1, r0
 8005164:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005168:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800516a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	460a      	mov	r2, r1
 8005184:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	7e7b      	ldrb	r3, [r7, #25]
 80051ce:	075b      	lsls	r3, r3, #29
 80051d0:	69f9      	ldr	r1, [r7, #28]
 80051d2:	0148      	lsls	r0, r1, #5
 80051d4:	6a39      	ldr	r1, [r7, #32]
 80051d6:	4401      	add	r1, r0
 80051d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	78db      	ldrb	r3, [r3, #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e003      	b.n	8005212 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005210:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005218:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	461a      	mov	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e04e      	b.n	80052d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	78db      	ldrb	r3, [r3, #3]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d149      	bne.n	80052d2 <USB_HC_StartXfer+0x276>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d045      	beq.n	80052d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	79db      	ldrb	r3, [r3, #7]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d830      	bhi.n	80052b0 <USB_HC_StartXfer+0x254>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <USB_HC_StartXfer+0x1f8>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	08005265 	.word	0x08005265
 8005258:	08005289 	.word	0x08005289
 800525c:	08005265 	.word	0x08005265
 8005260:	08005289 	.word	0x08005289
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	3303      	adds	r3, #3
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800526e:	8afa      	ldrh	r2, [r7, #22]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	b29b      	uxth	r3, r3
 8005276:	429a      	cmp	r2, r3
 8005278:	d91c      	bls.n	80052b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]
        }
        break;
 8005286:	e015      	b.n	80052b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	3303      	adds	r3, #3
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005292:	8afa      	ldrh	r2, [r7, #22]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	b29b      	uxth	r3, r3
 800529e:	429a      	cmp	r2, r3
 80052a0:	d90a      	bls.n	80052b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80052ae:	e003      	b.n	80052b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <USB_HC_StartXfer+0x25e>
        break;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <USB_HC_StartXfer+0x25e>
        break;
 80052b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	785a      	ldrb	r2, [r3, #1]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2000      	movs	r0, #0
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff fb31 	bl	8004934 <USB_WritePacket>
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3728      	adds	r7, #40	; 0x28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	1ff80000 	.word	0x1ff80000

080052e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	b29b      	uxth	r3, r3
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005302:	b480      	push	{r7}
 8005304:	b089      	sub	sp, #36	; 0x24
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	0c9b      	lsrs	r3, r3, #18
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	0fdb      	lsrs	r3, r3, #31
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d104      	bne.n	800535c <USB_HC_Halt+0x5a>
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	e0c8      	b.n	80054ee <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <USB_HC_Halt+0x66>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d163      	bne.n	8005430 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	440a      	add	r2, r1
 800537e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005386:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	f040 80ab 	bne.w	80054ec <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d133      	bne.n	800540a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ee:	d81d      	bhi.n	800542c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005406:	d0ec      	beq.n	80053e2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005408:	e070      	b.n	80054ec <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	440a      	add	r2, r1
 8005420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005428:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800542a:	e05f      	b.n	80054ec <USB_HC_Halt+0x1ea>
            break;
 800542c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800542e:	e05d      	b.n	80054ec <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	440a      	add	r2, r1
 8005446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800544e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d133      	bne.n	80054c8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	440a      	add	r2, r1
 8005476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800547e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ac:	d81d      	bhi.n	80054ea <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c4:	d0ec      	beq.n	80054a0 <USB_HC_Halt+0x19e>
 80054c6:	e011      	b.n	80054ec <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e000      	b.n	80054ec <USB_HC_Halt+0x1ea>
          break;
 80054ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3724      	adds	r7, #36	; 0x24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005510:	2301      	movs	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	04da      	lsls	r2, r3, #19
 8005518:	4b15      	ldr	r3, [pc, #84]	; (8005570 <USB_DoPing+0x74>)
 800551a:	4013      	ands	r3, r2
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	440a      	add	r2, r1
 8005524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800552c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005544:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800554c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	461a      	mov	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	1ff80000 	.word	0x1ff80000

08005574 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff f912 	bl	80047b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800558e:	2110      	movs	r1, #16
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff f96b 	bl	800486c <USB_FlushTxFifo>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff f997 	bl	80048d4 <USB_FlushRxFifo>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e01f      	b.n	80055f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	461a      	mov	r2, r3
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b0f      	cmp	r3, #15
 80055fa:	d9dc      	bls.n	80055b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e034      	b.n	800566c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005618:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005620:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005628:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	461a      	mov	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005648:	d80c      	bhi.n	8005664 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800565c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005660:	d0ec      	beq.n	800563c <USB_StopHost+0xc8>
 8005662:	e000      	b.n	8005666 <USB_StopHost+0xf2>
        break;
 8005664:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3301      	adds	r3, #1
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d9c7      	bls.n	8005602 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005678:	461a      	mov	r2, r3
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff f881 	bl	8004790 <USB_EnableGlobalInt>

  return ret;
 800568e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af04      	add	r7, sp, #16
 800569e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056a0:	2301      	movs	r3, #1
 80056a2:	2202      	movs	r2, #2
 80056a4:	2102      	movs	r1, #2
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fc66 	bl	8005f78 <USBH_FindInterface>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2bff      	cmp	r3, #255	; 0xff
 80056b4:	d002      	beq.n	80056bc <USBH_CDC_InterfaceInit+0x24>
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d901      	bls.n	80056c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056bc:	2302      	movs	r3, #2
 80056be:	e13d      	b.n	800593c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fc3b 	bl	8005f40 <USBH_SelectInterface>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056ce:	7bbb      	ldrb	r3, [r7, #14]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80056d4:	2302      	movs	r3, #2
 80056d6:	e131      	b.n	800593c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80056de:	2050      	movs	r0, #80	; 0x50
 80056e0:	f002 fafa 	bl	8007cd8 <malloc>
 80056e4:	4603      	mov	r3, r0
 80056e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80056f8:	2302      	movs	r3, #2
 80056fa:	e11f      	b.n	800593c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80056fc:	2250      	movs	r2, #80	; 0x50
 80056fe:	2100      	movs	r1, #0
 8005700:	68b8      	ldr	r0, [r7, #8]
 8005702:	f002 faf9 	bl	8007cf8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	211a      	movs	r1, #26
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b25b      	sxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	da15      	bge.n	800574a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	211a      	movs	r1, #26
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	4413      	add	r3, r2
 800572a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	211a      	movs	r1, #26
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 ff2c 	bl	80075ae <USBH_AllocPipe>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	7819      	ldrb	r1, [r3, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	7858      	ldrb	r0, [r3, #1]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	8952      	ldrh	r2, [r2, #10]
 8005776:	9202      	str	r2, [sp, #8]
 8005778:	2203      	movs	r2, #3
 800577a:	9201      	str	r2, [sp, #4]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	4623      	mov	r3, r4
 8005780:	4602      	mov	r2, r0
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fee4 	bl	8007550 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2200      	movs	r2, #0
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f002 f9f3 	bl	8007b7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005796:	2300      	movs	r3, #0
 8005798:	2200      	movs	r2, #0
 800579a:	210a      	movs	r1, #10
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fbeb 	bl	8005f78 <USBH_FindInterface>
 80057a2:	4603      	mov	r3, r0
 80057a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2bff      	cmp	r3, #255	; 0xff
 80057aa:	d002      	beq.n	80057b2 <USBH_CDC_InterfaceInit+0x11a>
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d901      	bls.n	80057b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0c2      	b.n	800593c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	211a      	movs	r1, #26
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da16      	bge.n	80057fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	211a      	movs	r1, #26
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	211a      	movs	r1, #26
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	835a      	strh	r2, [r3, #26]
 80057fa:	e015      	b.n	8005828 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	211a      	movs	r1, #26
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	211a      	movs	r1, #26
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005822:	881a      	ldrh	r2, [r3, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	211a      	movs	r1, #26
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	4413      	add	r3, r2
 8005834:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b25b      	sxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	da16      	bge.n	800586e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	211a      	movs	r1, #26
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	4413      	add	r3, r2
 800584c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	211a      	movs	r1, #26
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005866:	881a      	ldrh	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	835a      	strh	r2, [r3, #26]
 800586c:	e015      	b.n	800589a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	211a      	movs	r1, #26
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	4413      	add	r3, r2
 800587a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800587e:	781a      	ldrb	r2, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	211a      	movs	r1, #26
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005894:	881a      	ldrh	r2, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	7b9b      	ldrb	r3, [r3, #14]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fe84 	bl	80075ae <USBH_AllocPipe>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	7bdb      	ldrb	r3, [r3, #15]
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fe7a 	bl	80075ae <USBH_AllocPipe>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	7b59      	ldrb	r1, [r3, #13]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7b98      	ldrb	r0, [r3, #14]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	8b12      	ldrh	r2, [r2, #24]
 80058da:	9202      	str	r2, [sp, #8]
 80058dc:	2202      	movs	r2, #2
 80058de:	9201      	str	r2, [sp, #4]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4623      	mov	r3, r4
 80058e4:	4602      	mov	r2, r0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fe32 	bl	8007550 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	7b19      	ldrb	r1, [r3, #12]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	7bd8      	ldrb	r0, [r3, #15]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	8b52      	ldrh	r2, [r2, #26]
 8005904:	9202      	str	r2, [sp, #8]
 8005906:	2202      	movs	r2, #2
 8005908:	9201      	str	r2, [sp, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	4623      	mov	r3, r4
 800590e:	4602      	mov	r2, r0
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 fe1d 	bl	8007550 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	7b5b      	ldrb	r3, [r3, #13]
 8005922:	2200      	movs	r2, #0
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f002 f928 	bl	8007b7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f002 f921 	bl	8007b7c <USBH_LL_SetToggle>

  return USBH_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}

08005944 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00e      	beq.n	800597c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fe12 	bl	800758e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 fe3d 	bl	80075f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	7b1b      	ldrb	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	7b1b      	ldrb	r3, [r3, #12]
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 fdff 	bl	800758e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	7b1b      	ldrb	r3, [r3, #12]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fe2a 	bl	80075f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	7b5b      	ldrb	r3, [r3, #13]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00e      	beq.n	80059c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	7b5b      	ldrb	r3, [r3, #13]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fdec 	bl	800758e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	7b5b      	ldrb	r3, [r3, #13]
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fe17 	bl	80075f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 f983 	bl	8007ce8 <free>
    phost->pActiveClass->pData = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059e8:	2200      	movs	r2, #0
 80059ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3340      	adds	r3, #64	; 0x40
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8b1 	bl	8005b76 <GetLineCoding>
 8005a14:	4603      	mov	r3, r0
 8005a16:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a18:	7afb      	ldrb	r3, [r7, #11]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a24:	2102      	movs	r1, #2
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d877      	bhi.n	8005b48 <USBH_CDC_Process+0x114>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <USBH_CDC_Process+0x2c>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a75 	.word	0x08005a75
 8005a64:	08005a7b 	.word	0x08005a7b
 8005a68:	08005aab 	.word	0x08005aab
 8005a6c:	08005b1f 	.word	0x08005b1f
 8005a70:	08005b2d 	.word	0x08005b2d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
      break;
 8005a78:	e06d      	b.n	8005b56 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f897 	bl	8005bb4 <SetLineCoding>
 8005a86:	4603      	mov	r3, r0
 8005a88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a8a:	7bbb      	ldrb	r3, [r7, #14]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a98:	e058      	b.n	8005b4c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d055      	beq.n	8005b4c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005aa8:	e050      	b.n	8005b4c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3340      	adds	r3, #64	; 0x40
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f860 	bl	8005b76 <GetLineCoding>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d126      	bne.n	8005b0e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	791b      	ldrb	r3, [r3, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d13b      	bne.n	8005b50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d133      	bne.n	8005b50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d12b      	bne.n	8005b50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b00:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d124      	bne.n	8005b50 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f958 	bl	8005dbc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b0c:	e020      	b.n	8005b50 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d01d      	beq.n	8005b50 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2204      	movs	r2, #4
 8005b18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b1c:	e018      	b.n	8005b50 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f867 	bl	8005bf2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8da 	bl	8005cde <CDC_ProcessReception>
      break;
 8005b2a:	e014      	b.n	8005b56 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 ffef 	bl	8006b12 <USBH_ClrFeature>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b46:	e005      	b.n	8005b54 <USBH_CDC_Process+0x120>

    default:
      break;
 8005b48:	bf00      	nop
 8005b4a:	e004      	b.n	8005b56 <USBH_CDC_Process+0x122>
      break;
 8005b4c:	bf00      	nop
 8005b4e:	e002      	b.n	8005b56 <USBH_CDC_Process+0x122>
      break;
 8005b50:	bf00      	nop
 8005b52:	e000      	b.n	8005b56 <USBH_CDC_Process+0x122>
      break;
 8005b54:	bf00      	nop

  }

  return status;
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	22a1      	movs	r2, #161	; 0xa1
 8005b84:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2221      	movs	r2, #33	; 0x21
 8005b8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2207      	movs	r2, #7
 8005b9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 fa81 	bl	80070ac <USBH_CtlReq>
 8005baa:	4603      	mov	r3, r0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2221      	movs	r2, #33	; 0x21
 8005bc2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2207      	movs	r2, #7
 8005bda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2207      	movs	r2, #7
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 fa62 	bl	80070ac <USBH_CtlReq>
 8005be8:	4603      	mov	r3, r0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af02      	add	r7, sp, #8
 8005bf8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d002      	beq.n	8005c18 <CDC_ProcessTransmission+0x26>
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d023      	beq.n	8005c5e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c16:	e05e      	b.n	8005cd6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	8b12      	ldrh	r2, [r2, #24]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d90b      	bls.n	8005c3c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8b1a      	ldrh	r2, [r3, #24]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	7b5b      	ldrb	r3, [r3, #13]
 8005c30:	2001      	movs	r0, #1
 8005c32:	9000      	str	r0, [sp, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fc48 	bl	80074ca <USBH_BulkSendData>
 8005c3a:	e00b      	b.n	8005c54 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	7b5b      	ldrb	r3, [r3, #13]
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	9000      	str	r0, [sp, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 fc3b 	bl	80074ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c5c:	e03b      	b.n	8005cd6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	7b5b      	ldrb	r3, [r3, #13]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 ff5f 	bl	8007b28 <USBH_LL_GetURBState>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c6e:	7afb      	ldrb	r3, [r7, #11]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d128      	bne.n	8005cc6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	8b12      	ldrh	r2, [r2, #24]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d90e      	bls.n	8005c9e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	8b12      	ldrh	r2, [r2, #24]
 8005c88:	1a9a      	subs	r2, r3, r2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	8b12      	ldrh	r2, [r2, #24]
 8005c96:	441a      	add	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	61da      	str	r2, [r3, #28]
 8005c9c:	e002      	b.n	8005ca4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cb4:	e00e      	b.n	8005cd4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f868 	bl	8005d94 <USBH_CDC_TransmitCallback>
      break;
 8005cc4:	e006      	b.n	8005cd4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d103      	bne.n	8005cd4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cd4:	bf00      	nop
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d002      	beq.n	8005d04 <CDC_ProcessReception+0x26>
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d00e      	beq.n	8005d20 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d02:	e043      	b.n	8005d8c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6a19      	ldr	r1, [r3, #32]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	8b5a      	ldrh	r2, [r3, #26]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	7b1b      	ldrb	r3, [r3, #12]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 fbff 	bl	8007514 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d1e:	e035      	b.n	8005d8c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	7b1b      	ldrb	r3, [r3, #12]
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fefe 	bl	8007b28 <USBH_LL_GetURBState>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d129      	bne.n	8005d8a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	7b1b      	ldrb	r3, [r3, #12]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fe61 	bl	8007a04 <USBH_LL_GetLastXferSize>
 8005d42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d016      	beq.n	8005d7c <CDC_ProcessReception+0x9e>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	8b5b      	ldrh	r3, [r3, #26]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d910      	bls.n	8005d7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	441a      	add	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2203      	movs	r2, #3
 8005d76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d7a:	e006      	b.n	8005d8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f80f 	bl	8005da8 <USBH_CDC_ReceiveCallback>
      break;
 8005d8a:	bf00      	nop
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005de4:	2302      	movs	r3, #2
 8005de6:	e029      	b.n	8005e3c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	79fa      	ldrb	r2, [r7, #7]
 8005dec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f81f 	bl	8005e44 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fd31 	bl	800789c <USBH_LL_Init>

  return USBH_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e009      	b.n	8005e6a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	33e0      	adds	r3, #224	; 0xe0
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	2200      	movs	r2, #0
 8005e62:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b0f      	cmp	r3, #15
 8005e6e:	d9f2      	bls.n	8005e56 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e009      	b.n	8005e8a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e90:	d3f1      	bcc.n	8005e76 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2240      	movs	r2, #64	; 0x40
 8005eb6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10e      	bne.n	8005f28 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	33de      	adds	r3, #222	; 0xde
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
 8005f26:	e004      	b.n	8005f32 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	73fb      	strb	r3, [r7, #15]
 8005f2c:	e001      	b.n	8005f32 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d204      	bcs.n	8005f66 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f64:	e001      	b.n	8005f6a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	70fb      	strb	r3, [r7, #3]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70bb      	strb	r3, [r7, #2]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fa0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fa2:	e025      	b.n	8005ff0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	221a      	movs	r2, #26
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	3308      	adds	r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	795b      	ldrb	r3, [r3, #5]
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d002      	beq.n	8005fc6 <USBH_FindInterface+0x4e>
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2bff      	cmp	r3, #255	; 0xff
 8005fc4:	d111      	bne.n	8005fea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fca:	78ba      	ldrb	r2, [r7, #2]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d002      	beq.n	8005fd6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fd0:	78bb      	ldrb	r3, [r7, #2]
 8005fd2:	2bff      	cmp	r3, #255	; 0xff
 8005fd4:	d109      	bne.n	8005fea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fda:	787a      	ldrb	r2, [r7, #1]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	2bff      	cmp	r3, #255	; 0xff
 8005fe4:	d101      	bne.n	8005fea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	e006      	b.n	8005ff8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	3301      	adds	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d9d6      	bls.n	8005fa4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ff6:	23ff      	movs	r3, #255	; 0xff
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 fc81 	bl	8007914 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006012:	2101      	movs	r1, #1
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 fd9a 	bl	8007b4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af04      	add	r7, sp, #16
 800602a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800602c:	2302      	movs	r3, #2
 800602e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d102      	bne.n	8006046 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2203      	movs	r2, #3
 8006044:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b0b      	cmp	r3, #11
 800604e:	f200 81be 	bhi.w	80063ce <USBH_Process+0x3aa>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <USBH_Process+0x34>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006089 	.word	0x08006089
 800605c:	080060bb 	.word	0x080060bb
 8006060:	08006123 	.word	0x08006123
 8006064:	08006369 	.word	0x08006369
 8006068:	080063cf 	.word	0x080063cf
 800606c:	080061c7 	.word	0x080061c7
 8006070:	0800630f 	.word	0x0800630f
 8006074:	080061fd 	.word	0x080061fd
 8006078:	0800621d 	.word	0x0800621d
 800607c:	0800623d 	.word	0x0800623d
 8006080:	08006281 	.word	0x08006281
 8006084:	08006351 	.word	0x08006351
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 819e 	beq.w	80063d2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800609c:	20c8      	movs	r0, #200	; 0xc8
 800609e:	f001 fd9d 	bl	8007bdc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fc93 	bl	80079ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80060b8:	e18b      	b.n	80063d2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d107      	bne.n	80060d4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060d2:	e18d      	b.n	80063f0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060de:	d914      	bls.n	800610a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060e6:	3301      	adds	r3, #1
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d903      	bls.n	8006102 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	220d      	movs	r2, #13
 80060fe:	701a      	strb	r2, [r3, #0]
      break;
 8006100:	e176      	b.n	80063f0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
      break;
 8006108:	e172      	b.n	80063f0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006110:	f103 020a 	add.w	r2, r3, #10
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800611a:	200a      	movs	r0, #10
 800611c:	f001 fd5e 	bl	8007bdc <USBH_Delay>
      break;
 8006120:	e166      	b.n	80063f0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006132:	2104      	movs	r1, #4
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006138:	2064      	movs	r0, #100	; 0x64
 800613a:	f001 fd4f 	bl	8007bdc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fc1e 	bl	8007980 <USBH_LL_GetSpeed>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2205      	movs	r2, #5
 8006152:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006154:	2100      	movs	r1, #0
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fa29 	bl	80075ae <USBH_AllocPipe>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fa21 	bl	80075ae <USBH_AllocPipe>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7919      	ldrb	r1, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006188:	b292      	uxth	r2, r2
 800618a:	9202      	str	r2, [sp, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	9201      	str	r2, [sp, #4]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4603      	mov	r3, r0
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f9da 	bl	8007550 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7959      	ldrb	r1, [r3, #5]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061b0:	b292      	uxth	r2, r2
 80061b2:	9202      	str	r2, [sp, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	9201      	str	r2, [sp, #4]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4603      	mov	r3, r0
 80061bc:	2200      	movs	r2, #0
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 f9c6 	bl	8007550 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80061c4:	e114      	b.n	80063f0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f918 	bl	80063fc <USBH_HandleEnum>
 80061cc:	4603      	mov	r3, r0
 80061ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 80fe 	bne.w	80063d6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d103      	bne.n	80061f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2208      	movs	r2, #8
 80061f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80061f2:	e0f0      	b.n	80063d6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2207      	movs	r2, #7
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	e0ec      	b.n	80063d6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80e9 	beq.w	80063da <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800620e:	2101      	movs	r1, #1
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2208      	movs	r2, #8
 8006218:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800621a:	e0de      	b.n	80063da <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006222:	b29b      	uxth	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fc2c 	bl	8006a84 <USBH_SetCfg>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 80d5 	bne.w	80063de <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2209      	movs	r2, #9
 8006238:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800623a:	e0d0      	b.n	80063de <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800624a:	2101      	movs	r1, #1
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fc3c 	bl	8006aca <USBH_SetFeature>
 8006252:	4603      	mov	r3, r0
 8006254:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	220a      	movs	r2, #10
 8006262:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006264:	e0bd      	b.n	80063e2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b03      	cmp	r3, #3
 800626c:	f040 80b9 	bne.w	80063e2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	220a      	movs	r2, #10
 8006274:	701a      	strb	r2, [r3, #0]
      break;
 8006276:	e0b4      	b.n	80063e2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	220a      	movs	r2, #10
 800627c:	701a      	strb	r2, [r3, #0]
      break;
 800627e:	e0b0      	b.n	80063e2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80ad 	beq.w	80063e6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]
 8006298:	e016      	b.n	80062c8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800629a:	7bfa      	ldrb	r2, [r7, #15]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	32de      	adds	r2, #222	; 0xde
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	791a      	ldrb	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d108      	bne.n	80062c2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80062b0:	7bfa      	ldrb	r2, [r7, #15]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32de      	adds	r2, #222	; 0xde
 80062b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80062c0:	e005      	b.n	80062ce <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	3301      	adds	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0e5      	beq.n	800629a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d016      	beq.n	8006306 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2206      	movs	r2, #6
 80062ee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062f6:	2103      	movs	r1, #3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80062fc:	e073      	b.n	80063e6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	220d      	movs	r2, #13
 8006302:	701a      	strb	r2, [r3, #0]
      break;
 8006304:	e06f      	b.n	80063e6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	220d      	movs	r2, #13
 800630a:	701a      	strb	r2, [r3, #0]
      break;
 800630c:	e06b      	b.n	80063e6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d017      	beq.n	8006348 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
 8006324:	4603      	mov	r3, r0
 8006326:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	220b      	movs	r2, #11
 8006334:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006336:	e058      	b.n	80063ea <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d154      	bne.n	80063ea <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	220d      	movs	r2, #13
 8006344:	701a      	strb	r2, [r3, #0]
      break;
 8006346:	e050      	b.n	80063ea <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	220d      	movs	r2, #13
 800634c:	701a      	strb	r2, [r3, #0]
      break;
 800634e:	e04c      	b.n	80063ea <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d049      	beq.n	80063ee <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
      }
      break;
 8006366:	e042      	b.n	80063ee <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fd67 	bl	8005e44 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063a4:	2105      	movs	r1, #5
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d107      	bne.n	80063c6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fe20 	bl	8006004 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063c4:	e014      	b.n	80063f0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 faa4 	bl	8007914 <USBH_LL_Start>
      break;
 80063cc:	e010      	b.n	80063f0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80063ce:	bf00      	nop
 80063d0:	e00e      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063d2:	bf00      	nop
 80063d4:	e00c      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063d6:	bf00      	nop
 80063d8:	e00a      	b.n	80063f0 <USBH_Process+0x3cc>
    break;
 80063da:	bf00      	nop
 80063dc:	e008      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063de:	bf00      	nop
 80063e0:	e006      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <USBH_Process+0x3cc>
      break;
 80063ee:	bf00      	nop
  }
  return USBH_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af04      	add	r7, sp, #16
 8006402:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006408:	2301      	movs	r3, #1
 800640a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b07      	cmp	r3, #7
 8006412:	f200 81c1 	bhi.w	8006798 <USBH_HandleEnum+0x39c>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <USBH_HandleEnum+0x20>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	0800643d 	.word	0x0800643d
 8006420:	080064fb 	.word	0x080064fb
 8006424:	08006565 	.word	0x08006565
 8006428:	080065f3 	.word	0x080065f3
 800642c:	0800665d 	.word	0x0800665d
 8006430:	080066cd 	.word	0x080066cd
 8006434:	08006713 	.word	0x08006713
 8006438:	08006759 	.word	0x08006759
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800643c:	2108      	movs	r1, #8
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa50 	bl	80068e4 <USBH_Get_DevDesc>
 8006444:	4603      	mov	r3, r0
 8006446:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d130      	bne.n	80064b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	7919      	ldrb	r1, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006472:	b292      	uxth	r2, r2
 8006474:	9202      	str	r2, [sp, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4603      	mov	r3, r0
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 f865 	bl	8007550 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7959      	ldrb	r1, [r3, #5]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800649a:	b292      	uxth	r2, r2
 800649c:	9202      	str	r2, [sp, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	9201      	str	r2, [sp, #4]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4603      	mov	r3, r0
 80064a6:	2200      	movs	r2, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f851 	bl	8007550 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064ae:	e175      	b.n	800679c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	f040 8172 	bne.w	800679c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064be:	3301      	adds	r3, #1
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d903      	bls.n	80064da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	220d      	movs	r2, #13
 80064d6:	701a      	strb	r2, [r3, #0]
      break;
 80064d8:	e160      	b.n	800679c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	795b      	ldrb	r3, [r3, #5]
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f885 	bl	80075f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	791b      	ldrb	r3, [r3, #4]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f87f 	bl	80075f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
      break;
 80064f8:	e150      	b.n	800679c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80064fa:	2112      	movs	r1, #18
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f9f1 	bl	80068e4 <USBH_Get_DevDesc>
 8006502:	4603      	mov	r3, r0
 8006504:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006512:	e145      	b.n	80067a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b03      	cmp	r3, #3
 8006518:	f040 8142 	bne.w	80067a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006522:	3301      	adds	r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006532:	2b03      	cmp	r3, #3
 8006534:	d903      	bls.n	800653e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	220d      	movs	r2, #13
 800653a:	701a      	strb	r2, [r3, #0]
      break;
 800653c:	e130      	b.n	80067a0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	795b      	ldrb	r3, [r3, #5]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 f853 	bl	80075f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 f84d 	bl	80075f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
      break;
 8006562:	e11d      	b.n	80067a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006564:	2101      	movs	r1, #1
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa68 	bl	8006a3c <USBH_SetAddress>
 800656c:	4603      	mov	r3, r0
 800656e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d132      	bne.n	80065dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006576:	2002      	movs	r0, #2
 8006578:	f001 fb30 	bl	8007bdc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2203      	movs	r2, #3
 8006588:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7919      	ldrb	r1, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800659e:	b292      	uxth	r2, r2
 80065a0:	9202      	str	r2, [sp, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	9201      	str	r2, [sp, #4]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4603      	mov	r3, r0
 80065aa:	2280      	movs	r2, #128	; 0x80
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 ffcf 	bl	8007550 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	7959      	ldrb	r1, [r3, #5]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065c6:	b292      	uxth	r2, r2
 80065c8:	9202      	str	r2, [sp, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4603      	mov	r3, r0
 80065d2:	2200      	movs	r2, #0
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 ffbb 	bl	8007550 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065da:	e0e3      	b.n	80067a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	f040 80e0 	bne.w	80067a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	220d      	movs	r2, #13
 80065e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	705a      	strb	r2, [r3, #1]
      break;
 80065f0:	e0d8      	b.n	80067a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80065f2:	2109      	movs	r1, #9
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f99d 	bl	8006934 <USBH_Get_CfgDesc>
 80065fa:	4603      	mov	r3, r0
 80065fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2204      	movs	r2, #4
 8006608:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800660a:	e0cd      	b.n	80067a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b03      	cmp	r3, #3
 8006610:	f040 80ca 	bne.w	80067a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800661a:	3301      	adds	r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800662a:	2b03      	cmp	r3, #3
 800662c:	d903      	bls.n	8006636 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	220d      	movs	r2, #13
 8006632:	701a      	strb	r2, [r3, #0]
      break;
 8006634:	e0b8      	b.n	80067a8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	795b      	ldrb	r3, [r3, #5]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 ffd7 	bl	80075f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	791b      	ldrb	r3, [r3, #4]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ffd1 	bl	80075f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
      break;
 800665a:	e0a5      	b.n	80067a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f965 	bl	8006934 <USBH_Get_CfgDesc>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2205      	movs	r2, #5
 8006678:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800667a:	e097      	b.n	80067ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b03      	cmp	r3, #3
 8006680:	f040 8094 	bne.w	80067ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800668a:	3301      	adds	r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800669a:	2b03      	cmp	r3, #3
 800669c:	d903      	bls.n	80066a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	220d      	movs	r2, #13
 80066a2:	701a      	strb	r2, [r3, #0]
      break;
 80066a4:	e082      	b.n	80067ac <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	795b      	ldrb	r3, [r3, #5]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 ff9f 	bl	80075f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	791b      	ldrb	r3, [r3, #4]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 ff99 	bl	80075f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
      break;
 80066ca:	e06f      	b.n	80067ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d019      	beq.n	800670a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f949 	bl	800697c <USBH_Get_StringDesc>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2206      	movs	r2, #6
 80066f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80066fa:	e059      	b.n	80067b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d156      	bne.n	80067b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2206      	movs	r2, #6
 8006706:	705a      	strb	r2, [r3, #1]
      break;
 8006708:	e052      	b.n	80067b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2206      	movs	r2, #6
 800670e:	705a      	strb	r2, [r3, #1]
      break;
 8006710:	e04e      	b.n	80067b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006718:	2b00      	cmp	r3, #0
 800671a:	d019      	beq.n	8006750 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006728:	23ff      	movs	r3, #255	; 0xff
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f926 	bl	800697c <USBH_Get_StringDesc>
 8006730:	4603      	mov	r3, r0
 8006732:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2207      	movs	r2, #7
 800673e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006740:	e038      	b.n	80067b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b03      	cmp	r3, #3
 8006746:	d135      	bne.n	80067b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2207      	movs	r2, #7
 800674c:	705a      	strb	r2, [r3, #1]
      break;
 800674e:	e031      	b.n	80067b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2207      	movs	r2, #7
 8006754:	705a      	strb	r2, [r3, #1]
      break;
 8006756:	e02d      	b.n	80067b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800676e:	23ff      	movs	r3, #255	; 0xff
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f903 	bl	800697c <USBH_Get_StringDesc>
 8006776:	4603      	mov	r3, r0
 8006778:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006784:	e018      	b.n	80067b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d115      	bne.n	80067b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e012      	b.n	80067b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
      break;
 8006796:	e00f      	b.n	80067b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006798:	bf00      	nop
 800679a:	e00e      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 800679c:	bf00      	nop
 800679e:	e00c      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067a0:	bf00      	nop
 80067a2:	e00a      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067a4:	bf00      	nop
 80067a6:	e008      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067a8:	bf00      	nop
 80067aa:	e006      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067ac:	bf00      	nop
 80067ae:	e004      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067b0:	bf00      	nop
 80067b2:	e002      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067b4:	bf00      	nop
 80067b6:	e000      	b.n	80067ba <USBH_HandleEnum+0x3be>
      break;
 80067b8:	bf00      	nop
  }
  return Status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f804 	bl	8006806 <USBH_HandleSof>
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b0b      	cmp	r3, #11
 8006816:	d10a      	bne.n	800682e <USBH_HandleSof+0x28>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
  }
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006846:	bf00      	nop
}
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006862:	bf00      	nop
}
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f844 	bl	800794a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fe91 	bl	80075f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	795b      	ldrb	r3, [r3, #5]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fe8b 	bl	80075f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f864 	bl	80069d2 <USBH_GetDescriptor>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 3026 	addw	r0, r3, #806	; 0x326
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006920:	78fa      	ldrb	r2, [r7, #3]
 8006922:	b292      	uxth	r2, r2
 8006924:	4619      	mov	r1, r3
 8006926:	f000 f918 	bl	8006b5a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af02      	add	r7, sp, #8
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	331c      	adds	r3, #28
 8006944:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006946:	887b      	ldrh	r3, [r7, #2]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006950:	2100      	movs	r1, #0
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f83d 	bl	80069d2 <USBH_GetDescriptor>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d107      	bne.n	8006972 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006962:	887b      	ldrh	r3, [r7, #2]
 8006964:	461a      	mov	r2, r3
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f987 	bl	8006c7c <USBH_ParseCfgDesc>
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	72fb      	strb	r3, [r7, #11]
 800698c:	4613      	mov	r3, r2
 800698e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006998:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80069a0:	893b      	ldrh	r3, [r7, #8]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	460b      	mov	r3, r1
 80069a6:	2100      	movs	r1, #0
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f812 	bl	80069d2 <USBH_GetDescriptor>
 80069ae:	4603      	mov	r3, r0
 80069b0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d107      	bne.n	80069c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069be:	893a      	ldrh	r2, [r7, #8]
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fb24 	bl	8007010 <USBH_ParseStringDesc>
  }

  return status;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	72fb      	strb	r3, [r7, #11]
 80069e0:	4613      	mov	r3, r2
 80069e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d11c      	bne.n	8006a26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2206      	movs	r2, #6
 80069fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	893a      	ldrh	r2, [r7, #8]
 8006a02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006a04:	893b      	ldrh	r3, [r7, #8]
 8006a06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a0e:	d104      	bne.n	8006a1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f240 4209 	movw	r2, #1033	; 0x409
 8006a16:	829a      	strh	r2, [r3, #20]
 8006a18:	e002      	b.n	8006a20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8b3a      	ldrh	r2, [r7, #24]
 8006a24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a26:	8b3b      	ldrh	r3, [r7, #24]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fb3d 	bl	80070ac <USBH_CtlReq>
 8006a32:	4603      	mov	r3, r0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	789b      	ldrb	r3, [r3, #2]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10f      	bne.n	8006a70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2205      	movs	r2, #5
 8006a5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb19 	bl	80070ac <USBH_CtlReq>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	789b      	ldrb	r3, [r3, #2]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10e      	bne.n	8006ab6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2209      	movs	r2, #9
 8006aa2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	887a      	ldrh	r2, [r7, #2]
 8006aa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2100      	movs	r1, #0
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 faf6 	bl	80070ac <USBH_CtlReq>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	789b      	ldrb	r3, [r3, #2]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d10f      	bne.n	8006afe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006afe:	2200      	movs	r2, #0
 8006b00:	2100      	movs	r1, #0
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fad2 	bl	80070ac <USBH_CtlReq>
 8006b08:	4603      	mov	r3, r0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	789b      	ldrb	r3, [r3, #2]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10f      	bne.n	8006b46 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006b46:	2200      	movs	r2, #0
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 faae 	bl	80070ac <USBH_CtlReq>
 8006b50:	4603      	mov	r3, r0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785a      	ldrb	r2, [r3, #1]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3303      	adds	r3, #3
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	791a      	ldrb	r2, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	795a      	ldrb	r2, [r3, #5]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	799a      	ldrb	r2, [r3, #6]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	79da      	ldrb	r2, [r3, #7]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	79db      	ldrb	r3, [r3, #7]
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	dc11      	bgt.n	8006be0 <USBH_ParseDevDesc+0x86>
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	db16      	blt.n	8006bee <USBH_ParseDevDesc+0x94>
 8006bc0:	3b08      	subs	r3, #8
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf14      	ite	ne
 8006bd4:	2301      	movne	r3, #1
 8006bd6:	2300      	moveq	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <USBH_ParseDevDesc+0x8a>
 8006bde:	e006      	b.n	8006bee <USBH_ParseDevDesc+0x94>
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d104      	bne.n	8006bee <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	79da      	ldrb	r2, [r3, #7]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	71da      	strb	r2, [r3, #7]
      break;
 8006bec:	e003      	b.n	8006bf6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2240      	movs	r2, #64	; 0x40
 8006bf2:	71da      	strb	r2, [r3, #7]
      break;
 8006bf4:	bf00      	nop
  }

  if (length > 8U)
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d939      	bls.n	8006c70 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3309      	adds	r3, #9
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	4313      	orrs	r3, r2
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	330a      	adds	r3, #10
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	330b      	adds	r3, #11
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	330c      	adds	r3, #12
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	330d      	adds	r3, #13
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	7b9a      	ldrb	r2, [r3, #14]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	7bda      	ldrb	r2, [r3, #15]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	7c1a      	ldrb	r2, [r3, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	7c5a      	ldrb	r2, [r3, #17]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	745a      	strb	r2, [r3, #17]
  }
}
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08c      	sub	sp, #48	; 0x30
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c90:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	785a      	ldrb	r2, [r3, #1]
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3303      	adds	r3, #3
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd8:	bf28      	it	cs
 8006cda:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	791a      	ldrb	r2, [r3, #4]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	795a      	ldrb	r2, [r3, #5]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	799a      	ldrb	r2, [r3, #6]
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	79da      	ldrb	r2, [r3, #7]
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	7a1a      	ldrb	r2, [r3, #8]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b09      	cmp	r3, #9
 8006d12:	d002      	beq.n	8006d1a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	2209      	movs	r2, #9
 8006d18:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	f240 809d 	bls.w	8006e5c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006d22:	2309      	movs	r3, #9
 8006d24:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d2a:	e081      	b.n	8006e30 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d2c:	f107 0316 	add.w	r3, r7, #22
 8006d30:	4619      	mov	r1, r3
 8006d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d34:	f000 f99f 	bl	8007076 <USBH_GetNextDesc>
 8006d38:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d176      	bne.n	8006e30 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b09      	cmp	r3, #9
 8006d48:	d002      	beq.n	8006d50 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	2209      	movs	r2, #9
 8006d4e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d54:	221a      	movs	r2, #26
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	4413      	add	r3, r2
 8006d60:	3302      	adds	r3, #2
 8006d62:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d66:	69f8      	ldr	r0, [r7, #28]
 8006d68:	f000 f87e 	bl	8006e68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d76:	e043      	b.n	8006e00 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d78:	f107 0316 	add.w	r3, r7, #22
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d80:	f000 f979 	bl	8007076 <USBH_GetNextDesc>
 8006d84:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d138      	bne.n	8006e00 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	795b      	ldrb	r3, [r3, #5]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d10f      	bne.n	8006db6 <USBH_ParseCfgDesc+0x13a>
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	799b      	ldrb	r3, [r3, #6]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d10b      	bne.n	8006db6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	79db      	ldrb	r3, [r3, #7]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10f      	bne.n	8006dc6 <USBH_ParseCfgDesc+0x14a>
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d00b      	beq.n	8006dc6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	2209      	movs	r2, #9
 8006db2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006db4:	e007      	b.n	8006dc6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b07      	cmp	r3, #7
 8006dbc:	d004      	beq.n	8006dc8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e000      	b.n	8006dc8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006dc6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dcc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	00d2      	lsls	r2, r2, #3
 8006dd4:	211a      	movs	r1, #26
 8006dd6:	fb01 f303 	mul.w	r3, r1, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	3308      	adds	r3, #8
 8006dde:	6a3a      	ldr	r2, [r7, #32]
 8006de0:	4413      	add	r3, r2
 8006de2:	3304      	adds	r3, #4
 8006de4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de8:	69b9      	ldr	r1, [r7, #24]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f86b 	bl	8006ec6 <USBH_ParseEPDesc>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	791b      	ldrb	r3, [r3, #4]
 8006e04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d204      	bcs.n	8006e16 <USBH_ParseCfgDesc+0x19a>
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	885a      	ldrh	r2, [r3, #2]
 8006e10:	8afb      	ldrh	r3, [r7, #22]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d8b0      	bhi.n	8006d78 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	791b      	ldrb	r3, [r3, #4]
 8006e1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d201      	bcs.n	8006e26 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e01c      	b.n	8006e60 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d805      	bhi.n	8006e44 <USBH_ParseCfgDesc+0x1c8>
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	885a      	ldrh	r2, [r3, #2]
 8006e3c:	8afb      	ldrh	r3, [r7, #22]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	f63f af74 	bhi.w	8006d2c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	791b      	ldrb	r3, [r3, #4]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	bf28      	it	cs
 8006e4c:	2302      	movcs	r3, #2
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d201      	bcs.n	8006e5c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e001      	b.n	8006e60 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3730      	adds	r7, #48	; 0x30
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781a      	ldrb	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	785a      	ldrb	r2, [r3, #1]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	789a      	ldrb	r2, [r3, #2]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	78da      	ldrb	r2, [r3, #3]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	791a      	ldrb	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	795a      	ldrb	r2, [r3, #5]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	799a      	ldrb	r2, [r3, #6]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	79da      	ldrb	r2, [r3, #7]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	7a1a      	ldrb	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	721a      	strb	r2, [r3, #8]
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b087      	sub	sp, #28
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	785a      	ldrb	r2, [r3, #1]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	789a      	ldrb	r2, [r3, #2]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	78da      	ldrb	r2, [r3, #3]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3305      	adds	r3, #5
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	799a      	ldrb	r2, [r3, #6]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	889b      	ldrh	r3, [r3, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006f22:	2303      	movs	r3, #3
 8006f24:	75fb      	strb	r3, [r7, #23]
 8006f26:	e033      	b.n	8006f90 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	889b      	ldrh	r3, [r3, #4]
 8006f2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f30:	f023 0307 	bic.w	r3, r3, #7
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	889b      	ldrh	r3, [r3, #4]
 8006f3e:	b21a      	sxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3304      	adds	r3, #4
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	b299      	uxth	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3305      	adds	r3, #5
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	430b      	orrs	r3, r1
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d110      	bne.n	8006f82 <USBH_ParseEPDesc+0xbc>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3304      	adds	r3, #4
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	b299      	uxth	r1, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3305      	adds	r3, #5
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	430b      	orrs	r3, r1
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	b21b      	sxth	r3, r3
 8006f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f7e:	b21b      	sxth	r3, r3
 8006f80:	e001      	b.n	8006f86 <USBH_ParseEPDesc+0xc0>
 8006f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f86:	4313      	orrs	r3, r2
 8006f88:	b21b      	sxth	r3, r3
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d116      	bne.n	8006fc8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	78db      	ldrb	r3, [r3, #3]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d005      	beq.n	8006fb2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d127      	bne.n	8007002 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	799b      	ldrb	r3, [r3, #6]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <USBH_ParseEPDesc+0xfc>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	799b      	ldrb	r3, [r3, #6]
 8006fbe:	2b10      	cmp	r3, #16
 8006fc0:	d91f      	bls.n	8007002 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	75fb      	strb	r3, [r7, #23]
 8006fc6:	e01c      	b.n	8007002 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	78db      	ldrb	r3, [r3, #3]
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d10a      	bne.n	8006fea <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	799b      	ldrb	r3, [r3, #6]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <USBH_ParseEPDesc+0x11e>
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	799b      	ldrb	r3, [r3, #6]
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d90e      	bls.n	8007002 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	75fb      	strb	r3, [r7, #23]
 8006fe8:	e00b      	b.n	8007002 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d105      	bne.n	8007002 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	799b      	ldrb	r3, [r3, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006ffe:	2303      	movs	r3, #3
 8007000:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d120      	bne.n	800706a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	1e9a      	subs	r2, r3, #2
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	4293      	cmp	r3, r2
 8007032:	bf28      	it	cs
 8007034:	4613      	movcs	r3, r2
 8007036:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3302      	adds	r3, #2
 800703c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800703e:	2300      	movs	r3, #0
 8007040:	82fb      	strh	r3, [r7, #22]
 8007042:	e00b      	b.n	800705c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007044:	8afb      	ldrh	r3, [r7, #22]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	3301      	adds	r3, #1
 8007054:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007056:	8afb      	ldrh	r3, [r7, #22]
 8007058:	3302      	adds	r3, #2
 800705a:	82fb      	strh	r3, [r7, #22]
 800705c:	8afa      	ldrh	r2, [r7, #22]
 800705e:	8abb      	ldrh	r3, [r7, #20]
 8007060:	429a      	cmp	r2, r3
 8007062:	d3ef      	bcc.n	8007044 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]
  }
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	881a      	ldrh	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	4413      	add	r3, r2
 800708c:	b29a      	uxth	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80070ba:	2301      	movs	r3, #1
 80070bc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d002      	beq.n	80070cc <USBH_CtlReq+0x20>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d00f      	beq.n	80070ea <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80070ca:	e027      	b.n	800711c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	88fa      	ldrh	r2, [r7, #6]
 80070d6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2202      	movs	r2, #2
 80070e2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	e018      	b.n	800711c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f81c 	bl	8007128 <USBH_HandleControl>
 80070f0:	4603      	mov	r3, r0
 80070f2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <USBH_CtlReq+0x54>
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d106      	bne.n	800710e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	761a      	strb	r2, [r3, #24]
      break;
 800710c:	e005      	b.n	800711a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d102      	bne.n	800711a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	709a      	strb	r2, [r3, #2]
      break;
 800711a:	bf00      	nop
  }
  return status;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af02      	add	r7, sp, #8
 800712e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007134:	2300      	movs	r3, #0
 8007136:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7e1b      	ldrb	r3, [r3, #24]
 800713c:	3b01      	subs	r3, #1
 800713e:	2b0a      	cmp	r3, #10
 8007140:	f200 8156 	bhi.w	80073f0 <USBH_HandleControl+0x2c8>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USBH_HandleControl+0x24>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007179 	.word	0x08007179
 8007150:	08007193 	.word	0x08007193
 8007154:	080071fd 	.word	0x080071fd
 8007158:	08007223 	.word	0x08007223
 800715c:	0800725b 	.word	0x0800725b
 8007160:	08007285 	.word	0x08007285
 8007164:	080072d7 	.word	0x080072d7
 8007168:	080072f9 	.word	0x080072f9
 800716c:	08007335 	.word	0x08007335
 8007170:	0800735b 	.word	0x0800735b
 8007174:	08007399 	.word	0x08007399
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f103 0110 	add.w	r1, r3, #16
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	795b      	ldrb	r3, [r3, #5]
 8007182:	461a      	mov	r2, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f943 	bl	8007410 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	761a      	strb	r2, [r3, #24]
      break;
 8007190:	e139      	b.n	8007406 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fcc5 	bl	8007b28 <USBH_LL_GetURBState>
 800719e:	4603      	mov	r3, r0
 80071a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d11e      	bne.n	80071e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	7c1b      	ldrb	r3, [r3, #16]
 80071ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8adb      	ldrh	r3, [r3, #22]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80071ba:	7b7b      	ldrb	r3, [r7, #13]
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d103      	bne.n	80071c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2203      	movs	r2, #3
 80071c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071c6:	e115      	b.n	80073f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2205      	movs	r2, #5
 80071cc:	761a      	strb	r2, [r3, #24]
      break;
 80071ce:	e111      	b.n	80073f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80071d0:	7b7b      	ldrb	r3, [r7, #13]
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d103      	bne.n	80071de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2209      	movs	r2, #9
 80071da:	761a      	strb	r2, [r3, #24]
      break;
 80071dc:	e10a      	b.n	80073f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2207      	movs	r2, #7
 80071e2:	761a      	strb	r2, [r3, #24]
      break;
 80071e4:	e106      	b.n	80073f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d003      	beq.n	80071f4 <USBH_HandleControl+0xcc>
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	f040 8100 	bne.w	80073f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	220b      	movs	r2, #11
 80071f8:	761a      	strb	r2, [r3, #24]
      break;
 80071fa:	e0fb      	b.n	80073f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007202:	b29a      	uxth	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6899      	ldr	r1, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	899a      	ldrh	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	791b      	ldrb	r3, [r3, #4]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f93a 	bl	800748e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	761a      	strb	r2, [r3, #24]
      break;
 8007220:	e0f1      	b.n	8007406 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc7d 	bl	8007b28 <USBH_LL_GetURBState>
 800722e:	4603      	mov	r3, r0
 8007230:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d102      	bne.n	800723e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2209      	movs	r2, #9
 800723c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b05      	cmp	r3, #5
 8007242:	d102      	bne.n	800724a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007244:	2303      	movs	r3, #3
 8007246:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007248:	e0d6      	b.n	80073f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b04      	cmp	r3, #4
 800724e:	f040 80d3 	bne.w	80073f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	220b      	movs	r2, #11
 8007256:	761a      	strb	r2, [r3, #24]
      break;
 8007258:	e0ce      	b.n	80073f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6899      	ldr	r1, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	899a      	ldrh	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	2001      	movs	r0, #1
 8007268:	9000      	str	r0, [sp, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8ea 	bl	8007444 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2206      	movs	r2, #6
 8007280:	761a      	strb	r2, [r3, #24]
      break;
 8007282:	e0c0      	b.n	8007406 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	795b      	ldrb	r3, [r3, #5]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fc4c 	bl	8007b28 <USBH_LL_GetURBState>
 8007290:	4603      	mov	r3, r0
 8007292:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d103      	bne.n	80072a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2207      	movs	r2, #7
 800729e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072a0:	e0ac      	b.n	80073fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d105      	bne.n	80072b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	220c      	movs	r2, #12
 80072ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80072ae:	2303      	movs	r3, #3
 80072b0:	73fb      	strb	r3, [r7, #15]
      break;
 80072b2:	e0a3      	b.n	80073fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d103      	bne.n	80072c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2205      	movs	r2, #5
 80072be:	761a      	strb	r2, [r3, #24]
      break;
 80072c0:	e09c      	b.n	80073fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	f040 8099 	bne.w	80073fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	220b      	movs	r2, #11
 80072ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80072d0:	2302      	movs	r3, #2
 80072d2:	73fb      	strb	r3, [r7, #15]
      break;
 80072d4:	e092      	b.n	80073fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	2100      	movs	r1, #0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f8d5 	bl	800748e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2208      	movs	r2, #8
 80072f4:	761a      	strb	r2, [r3, #24]

      break;
 80072f6:	e086      	b.n	8007406 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	791b      	ldrb	r3, [r3, #4]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fc12 	bl	8007b28 <USBH_LL_GetURBState>
 8007304:	4603      	mov	r3, r0
 8007306:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d105      	bne.n	800731a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	220d      	movs	r2, #13
 8007312:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007318:	e072      	b.n	8007400 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b04      	cmp	r3, #4
 800731e:	d103      	bne.n	8007328 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	220b      	movs	r2, #11
 8007324:	761a      	strb	r2, [r3, #24]
      break;
 8007326:	e06b      	b.n	8007400 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b05      	cmp	r3, #5
 800732c:	d168      	bne.n	8007400 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800732e:	2303      	movs	r3, #3
 8007330:	73fb      	strb	r3, [r7, #15]
      break;
 8007332:	e065      	b.n	8007400 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	795b      	ldrb	r3, [r3, #5]
 8007338:	2201      	movs	r2, #1
 800733a:	9200      	str	r2, [sp, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f87f 	bl	8007444 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	220a      	movs	r2, #10
 8007356:	761a      	strb	r2, [r3, #24]
      break;
 8007358:	e055      	b.n	8007406 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fbe1 	bl	8007b28 <USBH_LL_GetURBState>
 8007366:	4603      	mov	r3, r0
 8007368:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	220d      	movs	r2, #13
 8007378:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800737a:	e043      	b.n	8007404 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d103      	bne.n	800738a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2209      	movs	r2, #9
 8007386:	761a      	strb	r2, [r3, #24]
      break;
 8007388:	e03c      	b.n	8007404 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d139      	bne.n	8007404 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	220b      	movs	r2, #11
 8007394:	761a      	strb	r2, [r3, #24]
      break;
 8007396:	e035      	b.n	8007404 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7e5b      	ldrb	r3, [r3, #25]
 800739c:	3301      	adds	r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	765a      	strb	r2, [r3, #25]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7e5b      	ldrb	r3, [r3, #25]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d806      	bhi.n	80073ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80073b8:	e025      	b.n	8007406 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073c0:	2106      	movs	r1, #6
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	795b      	ldrb	r3, [r3, #5]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f90c 	bl	80075f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	791b      	ldrb	r3, [r3, #4]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f906 	bl	80075f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]
      break;
 80073ee:	e00a      	b.n	8007406 <USBH_HandleControl+0x2de>

    default:
      break;
 80073f0:	bf00      	nop
 80073f2:	e008      	b.n	8007406 <USBH_HandleControl+0x2de>
      break;
 80073f4:	bf00      	nop
 80073f6:	e006      	b.n	8007406 <USBH_HandleControl+0x2de>
      break;
 80073f8:	bf00      	nop
 80073fa:	e004      	b.n	8007406 <USBH_HandleControl+0x2de>
      break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <USBH_HandleControl+0x2de>
      break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <USBH_HandleControl+0x2de>
      break;
 8007404:	bf00      	nop
  }

  return status;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af04      	add	r7, sp, #16
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800741e:	79f9      	ldrb	r1, [r7, #7]
 8007420:	2300      	movs	r3, #0
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	2308      	movs	r3, #8
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	2300      	movs	r3, #0
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 fb46 	bl	8007ac6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af04      	add	r7, sp, #16
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4611      	mov	r1, r2
 8007450:	461a      	mov	r2, r3
 8007452:	460b      	mov	r3, r1
 8007454:	80fb      	strh	r3, [r7, #6]
 8007456:	4613      	mov	r3, r2
 8007458:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007468:	7979      	ldrb	r1, [r7, #5]
 800746a:	7e3b      	ldrb	r3, [r7, #24]
 800746c:	9303      	str	r3, [sp, #12]
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	9302      	str	r3, [sp, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	2301      	movs	r3, #1
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fb21 	bl	8007ac6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af04      	add	r7, sp, #16
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	4611      	mov	r1, r2
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	80fb      	strh	r3, [r7, #6]
 80074a0:	4613      	mov	r3, r2
 80074a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074a4:	7979      	ldrb	r1, [r7, #5]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	9302      	str	r3, [sp, #8]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2301      	movs	r3, #1
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	2201      	movs	r2, #1
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fb03 	bl	8007ac6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80074c0:	2300      	movs	r3, #0

}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b088      	sub	sp, #32
 80074ce:	af04      	add	r7, sp, #16
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	4611      	mov	r1, r2
 80074d6:	461a      	mov	r2, r3
 80074d8:	460b      	mov	r3, r1
 80074da:	80fb      	strh	r3, [r7, #6]
 80074dc:	4613      	mov	r3, r2
 80074de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074ee:	7979      	ldrb	r1, [r7, #5]
 80074f0:	7e3b      	ldrb	r3, [r7, #24]
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	9302      	str	r3, [sp, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	2301      	movs	r3, #1
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2302      	movs	r3, #2
 8007502:	2200      	movs	r2, #0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fade 	bl	8007ac6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af04      	add	r7, sp, #16
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	460b      	mov	r3, r1
 8007524:	80fb      	strh	r3, [r7, #6]
 8007526:	4613      	mov	r3, r2
 8007528:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800752a:	7979      	ldrb	r1, [r7, #5]
 800752c:	2300      	movs	r3, #0
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	2301      	movs	r3, #1
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	2302      	movs	r3, #2
 800753e:	2201      	movs	r2, #1
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fac0 	bl	8007ac6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af04      	add	r7, sp, #16
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4603      	mov	r3, r0
 8007560:	70fb      	strb	r3, [r7, #3]
 8007562:	460b      	mov	r3, r1
 8007564:	70bb      	strb	r3, [r7, #2]
 8007566:	4613      	mov	r3, r2
 8007568:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800756a:	7878      	ldrb	r0, [r7, #1]
 800756c:	78ba      	ldrb	r2, [r7, #2]
 800756e:	78f9      	ldrb	r1, [r7, #3]
 8007570:	8b3b      	ldrh	r3, [r7, #24]
 8007572:	9302      	str	r3, [sp, #8]
 8007574:	7d3b      	ldrb	r3, [r7, #20]
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	7c3b      	ldrb	r3, [r7, #16]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4603      	mov	r3, r0
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa53 	bl	8007a2a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa72 	bl	8007a88 <USBH_LL_ClosePipe>

  return USBH_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f836 	bl	800762c <USBH_GetFreePipe>
 80075c0:	4603      	mov	r3, r0
 80075c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80075c4:	89fb      	ldrh	r3, [r7, #14]
 80075c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00a      	beq.n	80075e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	89fb      	ldrh	r3, [r7, #14]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	33e0      	adds	r3, #224	; 0xe0
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80075e4:	89fb      	ldrh	r3, [r7, #14]
 80075e6:	b2db      	uxtb	r3, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d80d      	bhi.n	800761e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	33e0      	adds	r3, #224	; 0xe0
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	33e0      	adds	r3, #224	; 0xe0
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	e00f      	b.n	800765e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	33e0      	adds	r3, #224	; 0xe0
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	b29b      	uxth	r3, r3
 8007656:	e007      	b.n	8007668 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	3301      	adds	r3, #1
 800765c:	73fb      	strb	r3, [r7, #15]
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b0f      	cmp	r3, #15
 8007662:	d9ec      	bls.n	800763e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007664:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007678:	2201      	movs	r2, #1
 800767a:	490e      	ldr	r1, [pc, #56]	; (80076b4 <MX_USB_HOST_Init+0x40>)
 800767c:	480e      	ldr	r0, [pc, #56]	; (80076b8 <MX_USB_HOST_Init+0x44>)
 800767e:	f7fe fba7 	bl	8005dd0 <USBH_Init>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007688:	f7f9 fa20 	bl	8000acc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800768c:	490b      	ldr	r1, [pc, #44]	; (80076bc <MX_USB_HOST_Init+0x48>)
 800768e:	480a      	ldr	r0, [pc, #40]	; (80076b8 <MX_USB_HOST_Init+0x44>)
 8007690:	f7fe fc2c 	bl	8005eec <USBH_RegisterClass>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800769a:	f7f9 fa17 	bl	8000acc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800769e:	4806      	ldr	r0, [pc, #24]	; (80076b8 <MX_USB_HOST_Init+0x44>)
 80076a0:	f7fe fcb0 	bl	8006004 <USBH_Start>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80076aa:	f7f9 fa0f 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80076ae:	bf00      	nop
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	200001b4 	.word	0x200001b4
 80076bc:	2000000c 	.word	0x2000000c

080076c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80076c4:	4802      	ldr	r0, [pc, #8]	; (80076d0 <MX_USB_HOST_Process+0x10>)
 80076c6:	f7fe fcad 	bl	8006024 <USBH_Process>
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200001b4 	.word	0x200001b4

080076d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d819      	bhi.n	800771c <USBH_UserProcess+0x48>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <USBH_UserProcess+0x1c>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007715 	.word	0x08007715
 8007700:	08007705 	.word	0x08007705
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007704:	4b09      	ldr	r3, [pc, #36]	; (800772c <USBH_UserProcess+0x58>)
 8007706:	2203      	movs	r2, #3
 8007708:	701a      	strb	r2, [r3, #0]
  break;
 800770a:	e008      	b.n	800771e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <USBH_UserProcess+0x58>)
 800770e:	2202      	movs	r2, #2
 8007710:	701a      	strb	r2, [r3, #0]
  break;
 8007712:	e004      	b.n	800771e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <USBH_UserProcess+0x58>)
 8007716:	2201      	movs	r2, #1
 8007718:	701a      	strb	r2, [r3, #0]
  break;
 800771a:	e000      	b.n	800771e <USBH_UserProcess+0x4a>

  default:
  break;
 800771c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	2000058c 	.word	0x2000058c

08007730 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	; 0x28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007738:	f107 0314 	add.w	r3, r7, #20
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	609a      	str	r2, [r3, #8]
 8007744:	60da      	str	r2, [r3, #12]
 8007746:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007750:	d147      	bne.n	80077e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	4b25      	ldr	r3, [pc, #148]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	4a24      	ldr	r2, [pc, #144]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	6313      	str	r3, [r2, #48]	; 0x30
 8007762:	4b22      	ldr	r3, [pc, #136]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800776e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800777c:	f107 0314 	add.w	r3, r7, #20
 8007780:	4619      	mov	r1, r3
 8007782:	481b      	ldr	r0, [pc, #108]	; (80077f0 <HAL_HCD_MspInit+0xc0>)
 8007784:	f7f9 fd80 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007788:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800778c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800778e:	2302      	movs	r3, #2
 8007790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007796:	2300      	movs	r3, #0
 8007798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800779a:	230a      	movs	r3, #10
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800779e:	f107 0314 	add.w	r3, r7, #20
 80077a2:	4619      	mov	r1, r3
 80077a4:	4812      	ldr	r0, [pc, #72]	; (80077f0 <HAL_HCD_MspInit+0xc0>)
 80077a6:	f7f9 fd6f 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 80077ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ae:	4a0f      	ldr	r2, [pc, #60]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 80077b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b4:	6353      	str	r3, [r2, #52]	; 0x34
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	4a0b      	ldr	r2, [pc, #44]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 80077c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c4:	6453      	str	r3, [r2, #68]	; 0x44
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <HAL_HCD_MspInit+0xbc>)
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077d2:	2200      	movs	r2, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	2043      	movs	r0, #67	; 0x43
 80077d8:	f7f9 fd1f 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077dc:	2043      	movs	r0, #67	; 0x43
 80077de:	f7f9 fd38 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077e2:	bf00      	nop
 80077e4:	3728      	adds	r7, #40	; 0x28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40023800 	.word	0x40023800
 80077f0:	40020000 	.word	0x40020000

080077f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe ffed 	bl	80067e2 <USBH_LL_IncTimer>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff f825 	bl	800686e <USBH_LL_Connect>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff f82e 	bl	800689c <USBH_LL_Disconnect>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
 8007854:	4613      	mov	r3, r2
 8007856:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe ffdf 	bl	8006836 <USBH_LL_PortEnabled>
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe ffdf 	bl	8006852 <USBH_LL_PortDisabled>
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d12a      	bne.n	8007904 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80078ae:	4a18      	ldr	r2, [pc, #96]	; (8007910 <USBH_LL_Init+0x74>)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <USBH_LL_Init+0x74>)
 80078ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078be:	4b14      	ldr	r3, [pc, #80]	; (8007910 <USBH_LL_Init+0x74>)
 80078c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80078c6:	4b12      	ldr	r3, [pc, #72]	; (8007910 <USBH_LL_Init+0x74>)
 80078c8:	2208      	movs	r2, #8
 80078ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80078cc:	4b10      	ldr	r3, [pc, #64]	; (8007910 <USBH_LL_Init+0x74>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078d2:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <USBH_LL_Init+0x74>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80078d8:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <USBH_LL_Init+0x74>)
 80078da:	2202      	movs	r2, #2
 80078dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <USBH_LL_Init+0x74>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80078e4:	480a      	ldr	r0, [pc, #40]	; (8007910 <USBH_LL_Init+0x74>)
 80078e6:	f7f9 feb6 	bl	8001656 <HAL_HCD_Init>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80078f0:	f7f9 f8ec 	bl	8000acc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80078f4:	4806      	ldr	r0, [pc, #24]	; (8007910 <USBH_LL_Init+0x74>)
 80078f6:	f7fa fa9a 	bl	8001e2e <HAL_HCD_GetCurrentFrame>
 80078fa:	4603      	mov	r3, r0
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fe ff60 	bl	80067c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000590 	.word	0x20000590

08007914 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800792a:	4618      	mov	r0, r3
 800792c:	f7fa fa09 	bl	8001d42 <HAL_HCD_Start>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f95c 	bl	8007bf4 <USBH_Get_USB_Status>
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007940:	7bbb      	ldrb	r3, [r7, #14]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007960:	4618      	mov	r0, r3
 8007962:	f7fa fa11 	bl	8001d88 <HAL_HCD_Stop>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f941 	bl	8007bf4 <USBH_Get_USB_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007976:	7bbb      	ldrb	r3, [r7, #14]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007992:	4618      	mov	r0, r3
 8007994:	f7fa fa59 	bl	8001e4a <HAL_HCD_GetCurrentSpeed>
 8007998:	4603      	mov	r3, r0
 800799a:	2b02      	cmp	r3, #2
 800799c:	d00c      	beq.n	80079b8 <USBH_LL_GetSpeed+0x38>
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d80d      	bhi.n	80079be <USBH_LL_GetSpeed+0x3e>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <USBH_LL_GetSpeed+0x2c>
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d003      	beq.n	80079b2 <USBH_LL_GetSpeed+0x32>
 80079aa:	e008      	b.n	80079be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
    break;
 80079b0:	e008      	b.n	80079c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
    break;
 80079b6:	e005      	b.n	80079c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80079b8:	2302      	movs	r3, #2
 80079ba:	73fb      	strb	r3, [r7, #15]
    break;
 80079bc:	e002      	b.n	80079c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80079be:	2301      	movs	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
    break;
 80079c2:	bf00      	nop
  }
  return  speed;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fa f9ec 	bl	8001dc2 <HAL_HCD_ResetPort>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f8ff 	bl	8007bf4 <USBH_Get_USB_Status>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fa f9f3 	bl	8001e06 <HAL_HCD_HC_GetXferCount>
 8007a20:	4603      	mov	r3, r0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a2a:	b590      	push	{r4, r7, lr}
 8007a2c:	b089      	sub	sp, #36	; 0x24
 8007a2e:	af04      	add	r7, sp, #16
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	4608      	mov	r0, r1
 8007a34:	4611      	mov	r1, r2
 8007a36:	461a      	mov	r2, r3
 8007a38:	4603      	mov	r3, r0
 8007a3a:	70fb      	strb	r3, [r7, #3]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70bb      	strb	r3, [r7, #2]
 8007a40:	4613      	mov	r3, r2
 8007a42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a52:	787c      	ldrb	r4, [r7, #1]
 8007a54:	78ba      	ldrb	r2, [r7, #2]
 8007a56:	78f9      	ldrb	r1, [r7, #3]
 8007a58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a5a:	9302      	str	r3, [sp, #8]
 8007a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4623      	mov	r3, r4
 8007a6a:	f7f9 fe56 	bl	800171a <HAL_HCD_HC_Init>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f8bd 	bl	8007bf4 <USBH_Get_USB_Status>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd90      	pop	{r4, r7, pc}

08007a88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f9 fec6 	bl	8001838 <HAL_HCD_HC_Halt>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 f89e 	bl	8007bf4 <USBH_Get_USB_Status>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ac6:	b590      	push	{r4, r7, lr}
 8007ac8:	b089      	sub	sp, #36	; 0x24
 8007aca:	af04      	add	r7, sp, #16
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	70fb      	strb	r3, [r7, #3]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70bb      	strb	r3, [r7, #2]
 8007adc:	4613      	mov	r3, r2
 8007ade:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007aee:	787c      	ldrb	r4, [r7, #1]
 8007af0:	78ba      	ldrb	r2, [r7, #2]
 8007af2:	78f9      	ldrb	r1, [r7, #3]
 8007af4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	4623      	mov	r3, r4
 8007b0a:	f7f9 feb9 	bl	8001880 <HAL_HCD_HC_SubmitRequest>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f86d 	bl	8007bf4 <USBH_Get_USB_Status>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}

08007b28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fa f94d 	bl	8001dde <HAL_HCD_HC_GetURBState>
 8007b44:	4603      	mov	r3, r0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d103      	bne.n	8007b6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f870 	bl	8007c4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007b6c:	20c8      	movs	r0, #200	; 0xc8
 8007b6e:	f7f9 fa55 	bl	800101c <HAL_Delay>
  return USBH_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	212c      	movs	r1, #44	; 0x2c
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	333b      	adds	r3, #59	; 0x3b
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d009      	beq.n	8007bbc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	212c      	movs	r1, #44	; 0x2c
 8007bae:	fb01 f303 	mul.w	r3, r1, r3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3354      	adds	r3, #84	; 0x54
 8007bb6:	78ba      	ldrb	r2, [r7, #2]
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e008      	b.n	8007bce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	212c      	movs	r1, #44	; 0x2c
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3355      	adds	r3, #85	; 0x55
 8007bca:	78ba      	ldrb	r2, [r7, #2]
 8007bcc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7f9 fa19 	bl	800101c <HAL_Delay>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d817      	bhi.n	8007c38 <USBH_Get_USB_Status+0x44>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <USBH_Get_USB_Status+0x1c>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c27 	.word	0x08007c27
 8007c18:	08007c2d 	.word	0x08007c2d
 8007c1c:	08007c33 	.word	0x08007c33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
    break;
 8007c24:	e00b      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2a:	e008      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c30:	e005      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c32:	2302      	movs	r3, #2
 8007c34:	73fb      	strb	r3, [r7, #15]
    break;
 8007c36:	e002      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3c:	bf00      	nop
  }
  return usb_status;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	e001      	b.n	8007c6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007c66:	2301      	movs	r3, #1
 8007c68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4803      	ldr	r0, [pc, #12]	; (8007c80 <MX_DriverVbusFS+0x34>)
 8007c72:	f7f9 fcbd 	bl	80015f0 <HAL_GPIO_WritePin>
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40020800 	.word	0x40020800

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	; (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2000002c 	.word	0x2000002c

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4d0d      	ldr	r5, [pc, #52]	; (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	; (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4d0b      	ldr	r5, [pc, #44]	; (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	; (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f001 f834 	bl	8008d10 <_init>
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2600      	movs	r6, #0
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb8:	4798      	blx	r3
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc2:	4798      	blx	r3
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	08008e2c 	.word	0x08008e2c
 8007ccc:	08008e2c 	.word	0x08008e2c
 8007cd0:	08008e2c 	.word	0x08008e2c
 8007cd4:	08008e30 	.word	0x08008e30

08007cd8 <malloc>:
 8007cd8:	4b02      	ldr	r3, [pc, #8]	; (8007ce4 <malloc+0xc>)
 8007cda:	4601      	mov	r1, r0
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	f000 b87f 	b.w	8007de0 <_malloc_r>
 8007ce2:	bf00      	nop
 8007ce4:	2000002c 	.word	0x2000002c

08007ce8 <free>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <free+0xc>)
 8007cea:	4601      	mov	r1, r0
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f000 b80b 	b.w	8007d08 <_free_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000002c 	.word	0x2000002c

08007cf8 <memset>:
 8007cf8:	4402      	add	r2, r0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d100      	bne.n	8007d02 <memset+0xa>
 8007d00:	4770      	bx	lr
 8007d02:	f803 1b01 	strb.w	r1, [r3], #1
 8007d06:	e7f9      	b.n	8007cfc <memset+0x4>

08007d08 <_free_r>:
 8007d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	d044      	beq.n	8007d98 <_free_r+0x90>
 8007d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d12:	9001      	str	r0, [sp, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f1a1 0404 	sub.w	r4, r1, #4
 8007d1a:	bfb8      	it	lt
 8007d1c:	18e4      	addlt	r4, r4, r3
 8007d1e:	f000 fc51 	bl	80085c4 <__malloc_lock>
 8007d22:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <_free_r+0x94>)
 8007d24:	9801      	ldr	r0, [sp, #4]
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	b933      	cbnz	r3, 8007d38 <_free_r+0x30>
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	6014      	str	r4, [r2, #0]
 8007d2e:	b003      	add	sp, #12
 8007d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d34:	f000 bc4c 	b.w	80085d0 <__malloc_unlock>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d908      	bls.n	8007d4e <_free_r+0x46>
 8007d3c:	6825      	ldr	r5, [r4, #0]
 8007d3e:	1961      	adds	r1, r4, r5
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf01      	itttt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	1949      	addeq	r1, r1, r5
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	e7ed      	b.n	8007d2a <_free_r+0x22>
 8007d4e:	461a      	mov	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b10b      	cbz	r3, 8007d58 <_free_r+0x50>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x46>
 8007d58:	6811      	ldr	r1, [r2, #0]
 8007d5a:	1855      	adds	r5, r2, r1
 8007d5c:	42a5      	cmp	r5, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x70>
 8007d60:	6824      	ldr	r4, [r4, #0]
 8007d62:	4421      	add	r1, r4
 8007d64:	1854      	adds	r4, r2, r1
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	d1e0      	bne.n	8007d2e <_free_r+0x26>
 8007d6c:	681c      	ldr	r4, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	6053      	str	r3, [r2, #4]
 8007d72:	4421      	add	r1, r4
 8007d74:	6011      	str	r1, [r2, #0]
 8007d76:	e7da      	b.n	8007d2e <_free_r+0x26>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x78>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	e7d6      	b.n	8007d2e <_free_r+0x26>
 8007d80:	6825      	ldr	r5, [r4, #0]
 8007d82:	1961      	adds	r1, r4, r5
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1949      	addeq	r1, r1, r5
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	6054      	str	r4, [r2, #4]
 8007d96:	e7ca      	b.n	8007d2e <_free_r+0x26>
 8007d98:	b003      	add	sp, #12
 8007d9a:	bd30      	pop	{r4, r5, pc}
 8007d9c:	20000894 	.word	0x20000894

08007da0 <sbrk_aligned>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4e0e      	ldr	r6, [pc, #56]	; (8007ddc <sbrk_aligned+0x3c>)
 8007da4:	460c      	mov	r4, r1
 8007da6:	6831      	ldr	r1, [r6, #0]
 8007da8:	4605      	mov	r5, r0
 8007daa:	b911      	cbnz	r1, 8007db2 <sbrk_aligned+0x12>
 8007dac:	f000 f91a 	bl	8007fe4 <_sbrk_r>
 8007db0:	6030      	str	r0, [r6, #0]
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f915 	bl	8007fe4 <_sbrk_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	d00a      	beq.n	8007dd4 <sbrk_aligned+0x34>
 8007dbe:	1cc4      	adds	r4, r0, #3
 8007dc0:	f024 0403 	bic.w	r4, r4, #3
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d007      	beq.n	8007dd8 <sbrk_aligned+0x38>
 8007dc8:	1a21      	subs	r1, r4, r0
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 f90a 	bl	8007fe4 <_sbrk_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d101      	bne.n	8007dd8 <sbrk_aligned+0x38>
 8007dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8007dd8:	4620      	mov	r0, r4
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	20000898 	.word	0x20000898

08007de0 <_malloc_r>:
 8007de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de4:	1ccd      	adds	r5, r1, #3
 8007de6:	f025 0503 	bic.w	r5, r5, #3
 8007dea:	3508      	adds	r5, #8
 8007dec:	2d0c      	cmp	r5, #12
 8007dee:	bf38      	it	cc
 8007df0:	250c      	movcc	r5, #12
 8007df2:	2d00      	cmp	r5, #0
 8007df4:	4607      	mov	r7, r0
 8007df6:	db01      	blt.n	8007dfc <_malloc_r+0x1c>
 8007df8:	42a9      	cmp	r1, r5
 8007dfa:	d905      	bls.n	8007e08 <_malloc_r+0x28>
 8007dfc:	230c      	movs	r3, #12
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	2600      	movs	r6, #0
 8007e02:	4630      	mov	r0, r6
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	4e2e      	ldr	r6, [pc, #184]	; (8007ec4 <_malloc_r+0xe4>)
 8007e0a:	f000 fbdb 	bl	80085c4 <__malloc_lock>
 8007e0e:	6833      	ldr	r3, [r6, #0]
 8007e10:	461c      	mov	r4, r3
 8007e12:	bb34      	cbnz	r4, 8007e62 <_malloc_r+0x82>
 8007e14:	4629      	mov	r1, r5
 8007e16:	4638      	mov	r0, r7
 8007e18:	f7ff ffc2 	bl	8007da0 <sbrk_aligned>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	4604      	mov	r4, r0
 8007e20:	d14d      	bne.n	8007ebe <_malloc_r+0xde>
 8007e22:	6834      	ldr	r4, [r6, #0]
 8007e24:	4626      	mov	r6, r4
 8007e26:	2e00      	cmp	r6, #0
 8007e28:	d140      	bne.n	8007eac <_malloc_r+0xcc>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4638      	mov	r0, r7
 8007e30:	eb04 0803 	add.w	r8, r4, r3
 8007e34:	f000 f8d6 	bl	8007fe4 <_sbrk_r>
 8007e38:	4580      	cmp	r8, r0
 8007e3a:	d13a      	bne.n	8007eb2 <_malloc_r+0xd2>
 8007e3c:	6821      	ldr	r1, [r4, #0]
 8007e3e:	3503      	adds	r5, #3
 8007e40:	1a6d      	subs	r5, r5, r1
 8007e42:	f025 0503 	bic.w	r5, r5, #3
 8007e46:	3508      	adds	r5, #8
 8007e48:	2d0c      	cmp	r5, #12
 8007e4a:	bf38      	it	cc
 8007e4c:	250c      	movcc	r5, #12
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff ffa5 	bl	8007da0 <sbrk_aligned>
 8007e56:	3001      	adds	r0, #1
 8007e58:	d02b      	beq.n	8007eb2 <_malloc_r+0xd2>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	442b      	add	r3, r5
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	e00e      	b.n	8007e80 <_malloc_r+0xa0>
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	1b52      	subs	r2, r2, r5
 8007e66:	d41e      	bmi.n	8007ea6 <_malloc_r+0xc6>
 8007e68:	2a0b      	cmp	r2, #11
 8007e6a:	d916      	bls.n	8007e9a <_malloc_r+0xba>
 8007e6c:	1961      	adds	r1, r4, r5
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	6025      	str	r5, [r4, #0]
 8007e72:	bf18      	it	ne
 8007e74:	6059      	strne	r1, [r3, #4]
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	bf08      	it	eq
 8007e7a:	6031      	streq	r1, [r6, #0]
 8007e7c:	5162      	str	r2, [r4, r5]
 8007e7e:	604b      	str	r3, [r1, #4]
 8007e80:	4638      	mov	r0, r7
 8007e82:	f104 060b 	add.w	r6, r4, #11
 8007e86:	f000 fba3 	bl	80085d0 <__malloc_unlock>
 8007e8a:	f026 0607 	bic.w	r6, r6, #7
 8007e8e:	1d23      	adds	r3, r4, #4
 8007e90:	1af2      	subs	r2, r6, r3
 8007e92:	d0b6      	beq.n	8007e02 <_malloc_r+0x22>
 8007e94:	1b9b      	subs	r3, r3, r6
 8007e96:	50a3      	str	r3, [r4, r2]
 8007e98:	e7b3      	b.n	8007e02 <_malloc_r+0x22>
 8007e9a:	6862      	ldr	r2, [r4, #4]
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	bf0c      	ite	eq
 8007ea0:	6032      	streq	r2, [r6, #0]
 8007ea2:	605a      	strne	r2, [r3, #4]
 8007ea4:	e7ec      	b.n	8007e80 <_malloc_r+0xa0>
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	6864      	ldr	r4, [r4, #4]
 8007eaa:	e7b2      	b.n	8007e12 <_malloc_r+0x32>
 8007eac:	4634      	mov	r4, r6
 8007eae:	6876      	ldr	r6, [r6, #4]
 8007eb0:	e7b9      	b.n	8007e26 <_malloc_r+0x46>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	f000 fb8a 	bl	80085d0 <__malloc_unlock>
 8007ebc:	e7a1      	b.n	8007e02 <_malloc_r+0x22>
 8007ebe:	6025      	str	r5, [r4, #0]
 8007ec0:	e7de      	b.n	8007e80 <_malloc_r+0xa0>
 8007ec2:	bf00      	nop
 8007ec4:	20000894 	.word	0x20000894

08007ec8 <iprintf>:
 8007ec8:	b40f      	push	{r0, r1, r2, r3}
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <iprintf+0x2c>)
 8007ecc:	b513      	push	{r0, r1, r4, lr}
 8007ece:	681c      	ldr	r4, [r3, #0]
 8007ed0:	b124      	cbz	r4, 8007edc <iprintf+0x14>
 8007ed2:	69a3      	ldr	r3, [r4, #24]
 8007ed4:	b913      	cbnz	r3, 8007edc <iprintf+0x14>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fa6e 	bl	80083b8 <__sinit>
 8007edc:	ab05      	add	r3, sp, #20
 8007ede:	9a04      	ldr	r2, [sp, #16]
 8007ee0:	68a1      	ldr	r1, [r4, #8]
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fba3 	bl	8008630 <_vfiprintf_r>
 8007eea:	b002      	add	sp, #8
 8007eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef0:	b004      	add	sp, #16
 8007ef2:	4770      	bx	lr
 8007ef4:	2000002c 	.word	0x2000002c

08007ef8 <_puts_r>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	460e      	mov	r6, r1
 8007efc:	4605      	mov	r5, r0
 8007efe:	b118      	cbz	r0, 8007f08 <_puts_r+0x10>
 8007f00:	6983      	ldr	r3, [r0, #24]
 8007f02:	b90b      	cbnz	r3, 8007f08 <_puts_r+0x10>
 8007f04:	f000 fa58 	bl	80083b8 <__sinit>
 8007f08:	69ab      	ldr	r3, [r5, #24]
 8007f0a:	68ac      	ldr	r4, [r5, #8]
 8007f0c:	b913      	cbnz	r3, 8007f14 <_puts_r+0x1c>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 fa52 	bl	80083b8 <__sinit>
 8007f14:	4b2c      	ldr	r3, [pc, #176]	; (8007fc8 <_puts_r+0xd0>)
 8007f16:	429c      	cmp	r4, r3
 8007f18:	d120      	bne.n	8007f5c <_puts_r+0x64>
 8007f1a:	686c      	ldr	r4, [r5, #4]
 8007f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f1e:	07db      	lsls	r3, r3, #31
 8007f20:	d405      	bmi.n	8007f2e <_puts_r+0x36>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	0598      	lsls	r0, r3, #22
 8007f26:	d402      	bmi.n	8007f2e <_puts_r+0x36>
 8007f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2a:	f000 fae3 	bl	80084f4 <__retarget_lock_acquire_recursive>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	0719      	lsls	r1, r3, #28
 8007f32:	d51d      	bpl.n	8007f70 <_puts_r+0x78>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	b1db      	cbz	r3, 8007f70 <_puts_r+0x78>
 8007f38:	3e01      	subs	r6, #1
 8007f3a:	68a3      	ldr	r3, [r4, #8]
 8007f3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60a3      	str	r3, [r4, #8]
 8007f44:	bb39      	cbnz	r1, 8007f96 <_puts_r+0x9e>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da38      	bge.n	8007fbc <_puts_r+0xc4>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	210a      	movs	r1, #10
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f858 	bl	8008004 <__swbuf_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d011      	beq.n	8007f7c <_puts_r+0x84>
 8007f58:	250a      	movs	r5, #10
 8007f5a:	e011      	b.n	8007f80 <_puts_r+0x88>
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <_puts_r+0xd4>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d101      	bne.n	8007f66 <_puts_r+0x6e>
 8007f62:	68ac      	ldr	r4, [r5, #8]
 8007f64:	e7da      	b.n	8007f1c <_puts_r+0x24>
 8007f66:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <_puts_r+0xd8>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	bf08      	it	eq
 8007f6c:	68ec      	ldreq	r4, [r5, #12]
 8007f6e:	e7d5      	b.n	8007f1c <_puts_r+0x24>
 8007f70:	4621      	mov	r1, r4
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 f898 	bl	80080a8 <__swsetup_r>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d0dd      	beq.n	8007f38 <_puts_r+0x40>
 8007f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8007f80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f82:	07da      	lsls	r2, r3, #31
 8007f84:	d405      	bmi.n	8007f92 <_puts_r+0x9a>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_puts_r+0x9a>
 8007f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8e:	f000 fab2 	bl	80084f6 <__retarget_lock_release_recursive>
 8007f92:	4628      	mov	r0, r5
 8007f94:	bd70      	pop	{r4, r5, r6, pc}
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da04      	bge.n	8007fa4 <_puts_r+0xac>
 8007f9a:	69a2      	ldr	r2, [r4, #24]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	dc06      	bgt.n	8007fae <_puts_r+0xb6>
 8007fa0:	290a      	cmp	r1, #10
 8007fa2:	d004      	beq.n	8007fae <_puts_r+0xb6>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	6022      	str	r2, [r4, #0]
 8007faa:	7019      	strb	r1, [r3, #0]
 8007fac:	e7c5      	b.n	8007f3a <_puts_r+0x42>
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 f827 	bl	8008004 <__swbuf_r>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d1bf      	bne.n	8007f3a <_puts_r+0x42>
 8007fba:	e7df      	b.n	8007f7c <_puts_r+0x84>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	250a      	movs	r5, #10
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	6022      	str	r2, [r4, #0]
 8007fc4:	701d      	strb	r5, [r3, #0]
 8007fc6:	e7db      	b.n	8007f80 <_puts_r+0x88>
 8007fc8:	08008db0 	.word	0x08008db0
 8007fcc:	08008dd0 	.word	0x08008dd0
 8007fd0:	08008d90 	.word	0x08008d90

08007fd4 <puts>:
 8007fd4:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <puts+0xc>)
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	f7ff bf8d 	b.w	8007ef8 <_puts_r>
 8007fde:	bf00      	nop
 8007fe0:	2000002c 	.word	0x2000002c

08007fe4 <_sbrk_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d06      	ldr	r5, [pc, #24]	; (8008000 <_sbrk_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	f7f8 ff30 	bl	8000e54 <_sbrk>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_sbrk_r+0x1a>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_sbrk_r+0x1a>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	200008a0 	.word	0x200008a0

08008004 <__swbuf_r>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	460e      	mov	r6, r1
 8008008:	4614      	mov	r4, r2
 800800a:	4605      	mov	r5, r0
 800800c:	b118      	cbz	r0, 8008016 <__swbuf_r+0x12>
 800800e:	6983      	ldr	r3, [r0, #24]
 8008010:	b90b      	cbnz	r3, 8008016 <__swbuf_r+0x12>
 8008012:	f000 f9d1 	bl	80083b8 <__sinit>
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <__swbuf_r+0x98>)
 8008018:	429c      	cmp	r4, r3
 800801a:	d12b      	bne.n	8008074 <__swbuf_r+0x70>
 800801c:	686c      	ldr	r4, [r5, #4]
 800801e:	69a3      	ldr	r3, [r4, #24]
 8008020:	60a3      	str	r3, [r4, #8]
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	071a      	lsls	r2, r3, #28
 8008026:	d52f      	bpl.n	8008088 <__swbuf_r+0x84>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	b36b      	cbz	r3, 8008088 <__swbuf_r+0x84>
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1ac0      	subs	r0, r0, r3
 8008032:	6963      	ldr	r3, [r4, #20]
 8008034:	b2f6      	uxtb	r6, r6
 8008036:	4283      	cmp	r3, r0
 8008038:	4637      	mov	r7, r6
 800803a:	dc04      	bgt.n	8008046 <__swbuf_r+0x42>
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f926 	bl	8008290 <_fflush_r>
 8008044:	bb30      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	3b01      	subs	r3, #1
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	701e      	strb	r6, [r3, #0]
 8008054:	6963      	ldr	r3, [r4, #20]
 8008056:	3001      	adds	r0, #1
 8008058:	4283      	cmp	r3, r0
 800805a:	d004      	beq.n	8008066 <__swbuf_r+0x62>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	07db      	lsls	r3, r3, #31
 8008060:	d506      	bpl.n	8008070 <__swbuf_r+0x6c>
 8008062:	2e0a      	cmp	r6, #10
 8008064:	d104      	bne.n	8008070 <__swbuf_r+0x6c>
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f911 	bl	8008290 <_fflush_r>
 800806e:	b988      	cbnz	r0, 8008094 <__swbuf_r+0x90>
 8008070:	4638      	mov	r0, r7
 8008072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <__swbuf_r+0x9c>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d101      	bne.n	800807e <__swbuf_r+0x7a>
 800807a:	68ac      	ldr	r4, [r5, #8]
 800807c:	e7cf      	b.n	800801e <__swbuf_r+0x1a>
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <__swbuf_r+0xa0>)
 8008080:	429c      	cmp	r4, r3
 8008082:	bf08      	it	eq
 8008084:	68ec      	ldreq	r4, [r5, #12]
 8008086:	e7ca      	b.n	800801e <__swbuf_r+0x1a>
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	f000 f80c 	bl	80080a8 <__swsetup_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	d0cb      	beq.n	800802c <__swbuf_r+0x28>
 8008094:	f04f 37ff 	mov.w	r7, #4294967295
 8008098:	e7ea      	b.n	8008070 <__swbuf_r+0x6c>
 800809a:	bf00      	nop
 800809c:	08008db0 	.word	0x08008db0
 80080a0:	08008dd0 	.word	0x08008dd0
 80080a4:	08008d90 	.word	0x08008d90

080080a8 <__swsetup_r>:
 80080a8:	4b32      	ldr	r3, [pc, #200]	; (8008174 <__swsetup_r+0xcc>)
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	681d      	ldr	r5, [r3, #0]
 80080ae:	4606      	mov	r6, r0
 80080b0:	460c      	mov	r4, r1
 80080b2:	b125      	cbz	r5, 80080be <__swsetup_r+0x16>
 80080b4:	69ab      	ldr	r3, [r5, #24]
 80080b6:	b913      	cbnz	r3, 80080be <__swsetup_r+0x16>
 80080b8:	4628      	mov	r0, r5
 80080ba:	f000 f97d 	bl	80083b8 <__sinit>
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <__swsetup_r+0xd0>)
 80080c0:	429c      	cmp	r4, r3
 80080c2:	d10f      	bne.n	80080e4 <__swsetup_r+0x3c>
 80080c4:	686c      	ldr	r4, [r5, #4]
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080cc:	0719      	lsls	r1, r3, #28
 80080ce:	d42c      	bmi.n	800812a <__swsetup_r+0x82>
 80080d0:	06dd      	lsls	r5, r3, #27
 80080d2:	d411      	bmi.n	80080f8 <__swsetup_r+0x50>
 80080d4:	2309      	movs	r3, #9
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	e03e      	b.n	8008162 <__swsetup_r+0xba>
 80080e4:	4b25      	ldr	r3, [pc, #148]	; (800817c <__swsetup_r+0xd4>)
 80080e6:	429c      	cmp	r4, r3
 80080e8:	d101      	bne.n	80080ee <__swsetup_r+0x46>
 80080ea:	68ac      	ldr	r4, [r5, #8]
 80080ec:	e7eb      	b.n	80080c6 <__swsetup_r+0x1e>
 80080ee:	4b24      	ldr	r3, [pc, #144]	; (8008180 <__swsetup_r+0xd8>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	bf08      	it	eq
 80080f4:	68ec      	ldreq	r4, [r5, #12]
 80080f6:	e7e6      	b.n	80080c6 <__swsetup_r+0x1e>
 80080f8:	0758      	lsls	r0, r3, #29
 80080fa:	d512      	bpl.n	8008122 <__swsetup_r+0x7a>
 80080fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fe:	b141      	cbz	r1, 8008112 <__swsetup_r+0x6a>
 8008100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008104:	4299      	cmp	r1, r3
 8008106:	d002      	beq.n	800810e <__swsetup_r+0x66>
 8008108:	4630      	mov	r0, r6
 800810a:	f7ff fdfd 	bl	8007d08 <_free_r>
 800810e:	2300      	movs	r3, #0
 8008110:	6363      	str	r3, [r4, #52]	; 0x34
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	2300      	movs	r3, #0
 800811c:	6063      	str	r3, [r4, #4]
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	f043 0308 	orr.w	r3, r3, #8
 8008128:	81a3      	strh	r3, [r4, #12]
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	b94b      	cbnz	r3, 8008142 <__swsetup_r+0x9a>
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008138:	d003      	beq.n	8008142 <__swsetup_r+0x9a>
 800813a:	4621      	mov	r1, r4
 800813c:	4630      	mov	r0, r6
 800813e:	f000 fa01 	bl	8008544 <__smakebuf_r>
 8008142:	89a0      	ldrh	r0, [r4, #12]
 8008144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008148:	f010 0301 	ands.w	r3, r0, #1
 800814c:	d00a      	beq.n	8008164 <__swsetup_r+0xbc>
 800814e:	2300      	movs	r3, #0
 8008150:	60a3      	str	r3, [r4, #8]
 8008152:	6963      	ldr	r3, [r4, #20]
 8008154:	425b      	negs	r3, r3
 8008156:	61a3      	str	r3, [r4, #24]
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	b943      	cbnz	r3, 800816e <__swsetup_r+0xc6>
 800815c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008160:	d1ba      	bne.n	80080d8 <__swsetup_r+0x30>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	0781      	lsls	r1, r0, #30
 8008166:	bf58      	it	pl
 8008168:	6963      	ldrpl	r3, [r4, #20]
 800816a:	60a3      	str	r3, [r4, #8]
 800816c:	e7f4      	b.n	8008158 <__swsetup_r+0xb0>
 800816e:	2000      	movs	r0, #0
 8008170:	e7f7      	b.n	8008162 <__swsetup_r+0xba>
 8008172:	bf00      	nop
 8008174:	2000002c 	.word	0x2000002c
 8008178:	08008db0 	.word	0x08008db0
 800817c:	08008dd0 	.word	0x08008dd0
 8008180:	08008d90 	.word	0x08008d90

08008184 <__sflush_r>:
 8008184:	898a      	ldrh	r2, [r1, #12]
 8008186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818a:	4605      	mov	r5, r0
 800818c:	0710      	lsls	r0, r2, #28
 800818e:	460c      	mov	r4, r1
 8008190:	d458      	bmi.n	8008244 <__sflush_r+0xc0>
 8008192:	684b      	ldr	r3, [r1, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	dc05      	bgt.n	80081a4 <__sflush_r+0x20>
 8008198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	dc02      	bgt.n	80081a4 <__sflush_r+0x20>
 800819e:	2000      	movs	r0, #0
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	d0f9      	beq.n	800819e <__sflush_r+0x1a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b0:	682f      	ldr	r7, [r5, #0]
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	d032      	beq.n	800821c <__sflush_r+0x98>
 80081b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	075a      	lsls	r2, r3, #29
 80081bc:	d505      	bpl.n	80081ca <__sflush_r+0x46>
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	1ac0      	subs	r0, r0, r3
 80081c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081c4:	b10b      	cbz	r3, 80081ca <__sflush_r+0x46>
 80081c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081c8:	1ac0      	subs	r0, r0, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	4602      	mov	r2, r0
 80081ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d0:	6a21      	ldr	r1, [r4, #32]
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b0      	blx	r6
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	d106      	bne.n	80081ea <__sflush_r+0x66>
 80081dc:	6829      	ldr	r1, [r5, #0]
 80081de:	291d      	cmp	r1, #29
 80081e0:	d82c      	bhi.n	800823c <__sflush_r+0xb8>
 80081e2:	4a2a      	ldr	r2, [pc, #168]	; (800828c <__sflush_r+0x108>)
 80081e4:	40ca      	lsrs	r2, r1
 80081e6:	07d6      	lsls	r6, r2, #31
 80081e8:	d528      	bpl.n	800823c <__sflush_r+0xb8>
 80081ea:	2200      	movs	r2, #0
 80081ec:	6062      	str	r2, [r4, #4]
 80081ee:	04d9      	lsls	r1, r3, #19
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	6022      	str	r2, [r4, #0]
 80081f4:	d504      	bpl.n	8008200 <__sflush_r+0x7c>
 80081f6:	1c42      	adds	r2, r0, #1
 80081f8:	d101      	bne.n	80081fe <__sflush_r+0x7a>
 80081fa:	682b      	ldr	r3, [r5, #0]
 80081fc:	b903      	cbnz	r3, 8008200 <__sflush_r+0x7c>
 80081fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008202:	602f      	str	r7, [r5, #0]
 8008204:	2900      	cmp	r1, #0
 8008206:	d0ca      	beq.n	800819e <__sflush_r+0x1a>
 8008208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800820c:	4299      	cmp	r1, r3
 800820e:	d002      	beq.n	8008216 <__sflush_r+0x92>
 8008210:	4628      	mov	r0, r5
 8008212:	f7ff fd79 	bl	8007d08 <_free_r>
 8008216:	2000      	movs	r0, #0
 8008218:	6360      	str	r0, [r4, #52]	; 0x34
 800821a:	e7c1      	b.n	80081a0 <__sflush_r+0x1c>
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	2301      	movs	r3, #1
 8008220:	4628      	mov	r0, r5
 8008222:	47b0      	blx	r6
 8008224:	1c41      	adds	r1, r0, #1
 8008226:	d1c7      	bne.n	80081b8 <__sflush_r+0x34>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0c4      	beq.n	80081b8 <__sflush_r+0x34>
 800822e:	2b1d      	cmp	r3, #29
 8008230:	d001      	beq.n	8008236 <__sflush_r+0xb2>
 8008232:	2b16      	cmp	r3, #22
 8008234:	d101      	bne.n	800823a <__sflush_r+0xb6>
 8008236:	602f      	str	r7, [r5, #0]
 8008238:	e7b1      	b.n	800819e <__sflush_r+0x1a>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	e7ad      	b.n	80081a0 <__sflush_r+0x1c>
 8008244:	690f      	ldr	r7, [r1, #16]
 8008246:	2f00      	cmp	r7, #0
 8008248:	d0a9      	beq.n	800819e <__sflush_r+0x1a>
 800824a:	0793      	lsls	r3, r2, #30
 800824c:	680e      	ldr	r6, [r1, #0]
 800824e:	bf08      	it	eq
 8008250:	694b      	ldreq	r3, [r1, #20]
 8008252:	600f      	str	r7, [r1, #0]
 8008254:	bf18      	it	ne
 8008256:	2300      	movne	r3, #0
 8008258:	eba6 0807 	sub.w	r8, r6, r7
 800825c:	608b      	str	r3, [r1, #8]
 800825e:	f1b8 0f00 	cmp.w	r8, #0
 8008262:	dd9c      	ble.n	800819e <__sflush_r+0x1a>
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008268:	4643      	mov	r3, r8
 800826a:	463a      	mov	r2, r7
 800826c:	4628      	mov	r0, r5
 800826e:	47b0      	blx	r6
 8008270:	2800      	cmp	r0, #0
 8008272:	dc06      	bgt.n	8008282 <__sflush_r+0xfe>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827a:	81a3      	strh	r3, [r4, #12]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	e78e      	b.n	80081a0 <__sflush_r+0x1c>
 8008282:	4407      	add	r7, r0
 8008284:	eba8 0800 	sub.w	r8, r8, r0
 8008288:	e7e9      	b.n	800825e <__sflush_r+0xda>
 800828a:	bf00      	nop
 800828c:	20400001 	.word	0x20400001

08008290 <_fflush_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	690b      	ldr	r3, [r1, #16]
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	b913      	cbnz	r3, 80082a0 <_fflush_r+0x10>
 800829a:	2500      	movs	r5, #0
 800829c:	4628      	mov	r0, r5
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	b118      	cbz	r0, 80082aa <_fflush_r+0x1a>
 80082a2:	6983      	ldr	r3, [r0, #24]
 80082a4:	b90b      	cbnz	r3, 80082aa <_fflush_r+0x1a>
 80082a6:	f000 f887 	bl	80083b8 <__sinit>
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <_fflush_r+0x6c>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	d11b      	bne.n	80082e8 <_fflush_r+0x58>
 80082b0:	686c      	ldr	r4, [r5, #4]
 80082b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0ef      	beq.n	800829a <_fflush_r+0xa>
 80082ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082bc:	07d0      	lsls	r0, r2, #31
 80082be:	d404      	bmi.n	80082ca <_fflush_r+0x3a>
 80082c0:	0599      	lsls	r1, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_fflush_r+0x3a>
 80082c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c6:	f000 f915 	bl	80084f4 <__retarget_lock_acquire_recursive>
 80082ca:	4628      	mov	r0, r5
 80082cc:	4621      	mov	r1, r4
 80082ce:	f7ff ff59 	bl	8008184 <__sflush_r>
 80082d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082d4:	07da      	lsls	r2, r3, #31
 80082d6:	4605      	mov	r5, r0
 80082d8:	d4e0      	bmi.n	800829c <_fflush_r+0xc>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	059b      	lsls	r3, r3, #22
 80082de:	d4dd      	bmi.n	800829c <_fflush_r+0xc>
 80082e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e2:	f000 f908 	bl	80084f6 <__retarget_lock_release_recursive>
 80082e6:	e7d9      	b.n	800829c <_fflush_r+0xc>
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <_fflush_r+0x70>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <_fflush_r+0x62>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7df      	b.n	80082b2 <_fflush_r+0x22>
 80082f2:	4b04      	ldr	r3, [pc, #16]	; (8008304 <_fflush_r+0x74>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7da      	b.n	80082b2 <_fflush_r+0x22>
 80082fc:	08008db0 	.word	0x08008db0
 8008300:	08008dd0 	.word	0x08008dd0
 8008304:	08008d90 	.word	0x08008d90

08008308 <std>:
 8008308:	2300      	movs	r3, #0
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	e9c0 3300 	strd	r3, r3, [r0]
 8008312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008316:	6083      	str	r3, [r0, #8]
 8008318:	8181      	strh	r1, [r0, #12]
 800831a:	6643      	str	r3, [r0, #100]	; 0x64
 800831c:	81c2      	strh	r2, [r0, #14]
 800831e:	6183      	str	r3, [r0, #24]
 8008320:	4619      	mov	r1, r3
 8008322:	2208      	movs	r2, #8
 8008324:	305c      	adds	r0, #92	; 0x5c
 8008326:	f7ff fce7 	bl	8007cf8 <memset>
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <std+0x38>)
 800832c:	6263      	str	r3, [r4, #36]	; 0x24
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <std+0x3c>)
 8008330:	62a3      	str	r3, [r4, #40]	; 0x28
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <std+0x40>)
 8008334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <std+0x44>)
 8008338:	6224      	str	r4, [r4, #32]
 800833a:	6323      	str	r3, [r4, #48]	; 0x30
 800833c:	bd10      	pop	{r4, pc}
 800833e:	bf00      	nop
 8008340:	08008bb9 	.word	0x08008bb9
 8008344:	08008bdb 	.word	0x08008bdb
 8008348:	08008c13 	.word	0x08008c13
 800834c:	08008c37 	.word	0x08008c37

08008350 <_cleanup_r>:
 8008350:	4901      	ldr	r1, [pc, #4]	; (8008358 <_cleanup_r+0x8>)
 8008352:	f000 b8af 	b.w	80084b4 <_fwalk_reent>
 8008356:	bf00      	nop
 8008358:	08008291 	.word	0x08008291

0800835c <__sfmoreglue>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	2268      	movs	r2, #104	; 0x68
 8008360:	1e4d      	subs	r5, r1, #1
 8008362:	4355      	muls	r5, r2
 8008364:	460e      	mov	r6, r1
 8008366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800836a:	f7ff fd39 	bl	8007de0 <_malloc_r>
 800836e:	4604      	mov	r4, r0
 8008370:	b140      	cbz	r0, 8008384 <__sfmoreglue+0x28>
 8008372:	2100      	movs	r1, #0
 8008374:	e9c0 1600 	strd	r1, r6, [r0]
 8008378:	300c      	adds	r0, #12
 800837a:	60a0      	str	r0, [r4, #8]
 800837c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008380:	f7ff fcba 	bl	8007cf8 <memset>
 8008384:	4620      	mov	r0, r4
 8008386:	bd70      	pop	{r4, r5, r6, pc}

08008388 <__sfp_lock_acquire>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__sfp_lock_acquire+0x8>)
 800838a:	f000 b8b3 	b.w	80084f4 <__retarget_lock_acquire_recursive>
 800838e:	bf00      	nop
 8008390:	2000089d 	.word	0x2000089d

08008394 <__sfp_lock_release>:
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <__sfp_lock_release+0x8>)
 8008396:	f000 b8ae 	b.w	80084f6 <__retarget_lock_release_recursive>
 800839a:	bf00      	nop
 800839c:	2000089d 	.word	0x2000089d

080083a0 <__sinit_lock_acquire>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__sinit_lock_acquire+0x8>)
 80083a2:	f000 b8a7 	b.w	80084f4 <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	2000089e 	.word	0x2000089e

080083ac <__sinit_lock_release>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__sinit_lock_release+0x8>)
 80083ae:	f000 b8a2 	b.w	80084f6 <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	2000089e 	.word	0x2000089e

080083b8 <__sinit>:
 80083b8:	b510      	push	{r4, lr}
 80083ba:	4604      	mov	r4, r0
 80083bc:	f7ff fff0 	bl	80083a0 <__sinit_lock_acquire>
 80083c0:	69a3      	ldr	r3, [r4, #24]
 80083c2:	b11b      	cbz	r3, 80083cc <__sinit+0x14>
 80083c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c8:	f7ff bff0 	b.w	80083ac <__sinit_lock_release>
 80083cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083d0:	6523      	str	r3, [r4, #80]	; 0x50
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <__sinit+0x68>)
 80083d4:	4a13      	ldr	r2, [pc, #76]	; (8008424 <__sinit+0x6c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083da:	42a3      	cmp	r3, r4
 80083dc:	bf04      	itt	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	61a3      	streq	r3, [r4, #24]
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 f820 	bl	8008428 <__sfp>
 80083e8:	6060      	str	r0, [r4, #4]
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 f81c 	bl	8008428 <__sfp>
 80083f0:	60a0      	str	r0, [r4, #8]
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 f818 	bl	8008428 <__sfp>
 80083f8:	2200      	movs	r2, #0
 80083fa:	60e0      	str	r0, [r4, #12]
 80083fc:	2104      	movs	r1, #4
 80083fe:	6860      	ldr	r0, [r4, #4]
 8008400:	f7ff ff82 	bl	8008308 <std>
 8008404:	68a0      	ldr	r0, [r4, #8]
 8008406:	2201      	movs	r2, #1
 8008408:	2109      	movs	r1, #9
 800840a:	f7ff ff7d 	bl	8008308 <std>
 800840e:	68e0      	ldr	r0, [r4, #12]
 8008410:	2202      	movs	r2, #2
 8008412:	2112      	movs	r1, #18
 8008414:	f7ff ff78 	bl	8008308 <std>
 8008418:	2301      	movs	r3, #1
 800841a:	61a3      	str	r3, [r4, #24]
 800841c:	e7d2      	b.n	80083c4 <__sinit+0xc>
 800841e:	bf00      	nop
 8008420:	08008d8c 	.word	0x08008d8c
 8008424:	08008351 	.word	0x08008351

08008428 <__sfp>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	4607      	mov	r7, r0
 800842c:	f7ff ffac 	bl	8008388 <__sfp_lock_acquire>
 8008430:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <__sfp+0x84>)
 8008432:	681e      	ldr	r6, [r3, #0]
 8008434:	69b3      	ldr	r3, [r6, #24]
 8008436:	b913      	cbnz	r3, 800843e <__sfp+0x16>
 8008438:	4630      	mov	r0, r6
 800843a:	f7ff ffbd 	bl	80083b8 <__sinit>
 800843e:	3648      	adds	r6, #72	; 0x48
 8008440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008444:	3b01      	subs	r3, #1
 8008446:	d503      	bpl.n	8008450 <__sfp+0x28>
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	b30b      	cbz	r3, 8008490 <__sfp+0x68>
 800844c:	6836      	ldr	r6, [r6, #0]
 800844e:	e7f7      	b.n	8008440 <__sfp+0x18>
 8008450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008454:	b9d5      	cbnz	r5, 800848c <__sfp+0x64>
 8008456:	4b16      	ldr	r3, [pc, #88]	; (80084b0 <__sfp+0x88>)
 8008458:	60e3      	str	r3, [r4, #12]
 800845a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800845e:	6665      	str	r5, [r4, #100]	; 0x64
 8008460:	f000 f847 	bl	80084f2 <__retarget_lock_init_recursive>
 8008464:	f7ff ff96 	bl	8008394 <__sfp_lock_release>
 8008468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800846c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008470:	6025      	str	r5, [r4, #0]
 8008472:	61a5      	str	r5, [r4, #24]
 8008474:	2208      	movs	r2, #8
 8008476:	4629      	mov	r1, r5
 8008478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800847c:	f7ff fc3c 	bl	8007cf8 <memset>
 8008480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008488:	4620      	mov	r0, r4
 800848a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848c:	3468      	adds	r4, #104	; 0x68
 800848e:	e7d9      	b.n	8008444 <__sfp+0x1c>
 8008490:	2104      	movs	r1, #4
 8008492:	4638      	mov	r0, r7
 8008494:	f7ff ff62 	bl	800835c <__sfmoreglue>
 8008498:	4604      	mov	r4, r0
 800849a:	6030      	str	r0, [r6, #0]
 800849c:	2800      	cmp	r0, #0
 800849e:	d1d5      	bne.n	800844c <__sfp+0x24>
 80084a0:	f7ff ff78 	bl	8008394 <__sfp_lock_release>
 80084a4:	230c      	movs	r3, #12
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	e7ee      	b.n	8008488 <__sfp+0x60>
 80084aa:	bf00      	nop
 80084ac:	08008d8c 	.word	0x08008d8c
 80084b0:	ffff0001 	.word	0xffff0001

080084b4 <_fwalk_reent>:
 80084b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b8:	4606      	mov	r6, r0
 80084ba:	4688      	mov	r8, r1
 80084bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084c0:	2700      	movs	r7, #0
 80084c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084c6:	f1b9 0901 	subs.w	r9, r9, #1
 80084ca:	d505      	bpl.n	80084d8 <_fwalk_reent+0x24>
 80084cc:	6824      	ldr	r4, [r4, #0]
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	d1f7      	bne.n	80084c2 <_fwalk_reent+0xe>
 80084d2:	4638      	mov	r0, r7
 80084d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d8:	89ab      	ldrh	r3, [r5, #12]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d907      	bls.n	80084ee <_fwalk_reent+0x3a>
 80084de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084e2:	3301      	adds	r3, #1
 80084e4:	d003      	beq.n	80084ee <_fwalk_reent+0x3a>
 80084e6:	4629      	mov	r1, r5
 80084e8:	4630      	mov	r0, r6
 80084ea:	47c0      	blx	r8
 80084ec:	4307      	orrs	r7, r0
 80084ee:	3568      	adds	r5, #104	; 0x68
 80084f0:	e7e9      	b.n	80084c6 <_fwalk_reent+0x12>

080084f2 <__retarget_lock_init_recursive>:
 80084f2:	4770      	bx	lr

080084f4 <__retarget_lock_acquire_recursive>:
 80084f4:	4770      	bx	lr

080084f6 <__retarget_lock_release_recursive>:
 80084f6:	4770      	bx	lr

080084f8 <__swhatbuf_r>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	460e      	mov	r6, r1
 80084fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008500:	2900      	cmp	r1, #0
 8008502:	b096      	sub	sp, #88	; 0x58
 8008504:	4614      	mov	r4, r2
 8008506:	461d      	mov	r5, r3
 8008508:	da08      	bge.n	800851c <__swhatbuf_r+0x24>
 800850a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	061a      	lsls	r2, r3, #24
 8008514:	d410      	bmi.n	8008538 <__swhatbuf_r+0x40>
 8008516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851a:	e00e      	b.n	800853a <__swhatbuf_r+0x42>
 800851c:	466a      	mov	r2, sp
 800851e:	f000 fbb1 	bl	8008c84 <_fstat_r>
 8008522:	2800      	cmp	r0, #0
 8008524:	dbf1      	blt.n	800850a <__swhatbuf_r+0x12>
 8008526:	9a01      	ldr	r2, [sp, #4]
 8008528:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800852c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008530:	425a      	negs	r2, r3
 8008532:	415a      	adcs	r2, r3
 8008534:	602a      	str	r2, [r5, #0]
 8008536:	e7ee      	b.n	8008516 <__swhatbuf_r+0x1e>
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	2000      	movs	r0, #0
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	b016      	add	sp, #88	; 0x58
 8008540:	bd70      	pop	{r4, r5, r6, pc}
	...

08008544 <__smakebuf_r>:
 8008544:	898b      	ldrh	r3, [r1, #12]
 8008546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008548:	079d      	lsls	r5, r3, #30
 800854a:	4606      	mov	r6, r0
 800854c:	460c      	mov	r4, r1
 800854e:	d507      	bpl.n	8008560 <__smakebuf_r+0x1c>
 8008550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	6123      	str	r3, [r4, #16]
 8008558:	2301      	movs	r3, #1
 800855a:	6163      	str	r3, [r4, #20]
 800855c:	b002      	add	sp, #8
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	ab01      	add	r3, sp, #4
 8008562:	466a      	mov	r2, sp
 8008564:	f7ff ffc8 	bl	80084f8 <__swhatbuf_r>
 8008568:	9900      	ldr	r1, [sp, #0]
 800856a:	4605      	mov	r5, r0
 800856c:	4630      	mov	r0, r6
 800856e:	f7ff fc37 	bl	8007de0 <_malloc_r>
 8008572:	b948      	cbnz	r0, 8008588 <__smakebuf_r+0x44>
 8008574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008578:	059a      	lsls	r2, r3, #22
 800857a:	d4ef      	bmi.n	800855c <__smakebuf_r+0x18>
 800857c:	f023 0303 	bic.w	r3, r3, #3
 8008580:	f043 0302 	orr.w	r3, r3, #2
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	e7e3      	b.n	8008550 <__smakebuf_r+0xc>
 8008588:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <__smakebuf_r+0x7c>)
 800858a:	62b3      	str	r3, [r6, #40]	; 0x28
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	6020      	str	r0, [r4, #0]
 8008590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	6163      	str	r3, [r4, #20]
 800859a:	9b01      	ldr	r3, [sp, #4]
 800859c:	6120      	str	r0, [r4, #16]
 800859e:	b15b      	cbz	r3, 80085b8 <__smakebuf_r+0x74>
 80085a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a4:	4630      	mov	r0, r6
 80085a6:	f000 fb7f 	bl	8008ca8 <_isatty_r>
 80085aa:	b128      	cbz	r0, 80085b8 <__smakebuf_r+0x74>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	f023 0303 	bic.w	r3, r3, #3
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	89a0      	ldrh	r0, [r4, #12]
 80085ba:	4305      	orrs	r5, r0
 80085bc:	81a5      	strh	r5, [r4, #12]
 80085be:	e7cd      	b.n	800855c <__smakebuf_r+0x18>
 80085c0:	08008351 	.word	0x08008351

080085c4 <__malloc_lock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_lock+0x8>)
 80085c6:	f7ff bf95 	b.w	80084f4 <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	2000089c 	.word	0x2000089c

080085d0 <__malloc_unlock>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__malloc_unlock+0x8>)
 80085d2:	f7ff bf90 	b.w	80084f6 <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	2000089c 	.word	0x2000089c

080085dc <__sfputc_r>:
 80085dc:	6893      	ldr	r3, [r2, #8]
 80085de:	3b01      	subs	r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	b410      	push	{r4}
 80085e4:	6093      	str	r3, [r2, #8]
 80085e6:	da08      	bge.n	80085fa <__sfputc_r+0x1e>
 80085e8:	6994      	ldr	r4, [r2, #24]
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	db01      	blt.n	80085f2 <__sfputc_r+0x16>
 80085ee:	290a      	cmp	r1, #10
 80085f0:	d103      	bne.n	80085fa <__sfputc_r+0x1e>
 80085f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085f6:	f7ff bd05 	b.w	8008004 <__swbuf_r>
 80085fa:	6813      	ldr	r3, [r2, #0]
 80085fc:	1c58      	adds	r0, r3, #1
 80085fe:	6010      	str	r0, [r2, #0]
 8008600:	7019      	strb	r1, [r3, #0]
 8008602:	4608      	mov	r0, r1
 8008604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008608:	4770      	bx	lr

0800860a <__sfputs_r>:
 800860a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860c:	4606      	mov	r6, r0
 800860e:	460f      	mov	r7, r1
 8008610:	4614      	mov	r4, r2
 8008612:	18d5      	adds	r5, r2, r3
 8008614:	42ac      	cmp	r4, r5
 8008616:	d101      	bne.n	800861c <__sfputs_r+0x12>
 8008618:	2000      	movs	r0, #0
 800861a:	e007      	b.n	800862c <__sfputs_r+0x22>
 800861c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008620:	463a      	mov	r2, r7
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ffda 	bl	80085dc <__sfputc_r>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d1f3      	bne.n	8008614 <__sfputs_r+0xa>
 800862c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008630 <_vfiprintf_r>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	460d      	mov	r5, r1
 8008636:	b09d      	sub	sp, #116	; 0x74
 8008638:	4614      	mov	r4, r2
 800863a:	4698      	mov	r8, r3
 800863c:	4606      	mov	r6, r0
 800863e:	b118      	cbz	r0, 8008648 <_vfiprintf_r+0x18>
 8008640:	6983      	ldr	r3, [r0, #24]
 8008642:	b90b      	cbnz	r3, 8008648 <_vfiprintf_r+0x18>
 8008644:	f7ff feb8 	bl	80083b8 <__sinit>
 8008648:	4b89      	ldr	r3, [pc, #548]	; (8008870 <_vfiprintf_r+0x240>)
 800864a:	429d      	cmp	r5, r3
 800864c:	d11b      	bne.n	8008686 <_vfiprintf_r+0x56>
 800864e:	6875      	ldr	r5, [r6, #4]
 8008650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d405      	bmi.n	8008662 <_vfiprintf_r+0x32>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	059a      	lsls	r2, r3, #22
 800865a:	d402      	bmi.n	8008662 <_vfiprintf_r+0x32>
 800865c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865e:	f7ff ff49 	bl	80084f4 <__retarget_lock_acquire_recursive>
 8008662:	89ab      	ldrh	r3, [r5, #12]
 8008664:	071b      	lsls	r3, r3, #28
 8008666:	d501      	bpl.n	800866c <_vfiprintf_r+0x3c>
 8008668:	692b      	ldr	r3, [r5, #16]
 800866a:	b9eb      	cbnz	r3, 80086a8 <_vfiprintf_r+0x78>
 800866c:	4629      	mov	r1, r5
 800866e:	4630      	mov	r0, r6
 8008670:	f7ff fd1a 	bl	80080a8 <__swsetup_r>
 8008674:	b1c0      	cbz	r0, 80086a8 <_vfiprintf_r+0x78>
 8008676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008678:	07dc      	lsls	r4, r3, #31
 800867a:	d50e      	bpl.n	800869a <_vfiprintf_r+0x6a>
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	b01d      	add	sp, #116	; 0x74
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	4b7b      	ldr	r3, [pc, #492]	; (8008874 <_vfiprintf_r+0x244>)
 8008688:	429d      	cmp	r5, r3
 800868a:	d101      	bne.n	8008690 <_vfiprintf_r+0x60>
 800868c:	68b5      	ldr	r5, [r6, #8]
 800868e:	e7df      	b.n	8008650 <_vfiprintf_r+0x20>
 8008690:	4b79      	ldr	r3, [pc, #484]	; (8008878 <_vfiprintf_r+0x248>)
 8008692:	429d      	cmp	r5, r3
 8008694:	bf08      	it	eq
 8008696:	68f5      	ldreq	r5, [r6, #12]
 8008698:	e7da      	b.n	8008650 <_vfiprintf_r+0x20>
 800869a:	89ab      	ldrh	r3, [r5, #12]
 800869c:	0598      	lsls	r0, r3, #22
 800869e:	d4ed      	bmi.n	800867c <_vfiprintf_r+0x4c>
 80086a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086a2:	f7ff ff28 	bl	80084f6 <__retarget_lock_release_recursive>
 80086a6:	e7e9      	b.n	800867c <_vfiprintf_r+0x4c>
 80086a8:	2300      	movs	r3, #0
 80086aa:	9309      	str	r3, [sp, #36]	; 0x24
 80086ac:	2320      	movs	r3, #32
 80086ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b6:	2330      	movs	r3, #48	; 0x30
 80086b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800887c <_vfiprintf_r+0x24c>
 80086bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086c0:	f04f 0901 	mov.w	r9, #1
 80086c4:	4623      	mov	r3, r4
 80086c6:	469a      	mov	sl, r3
 80086c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086cc:	b10a      	cbz	r2, 80086d2 <_vfiprintf_r+0xa2>
 80086ce:	2a25      	cmp	r2, #37	; 0x25
 80086d0:	d1f9      	bne.n	80086c6 <_vfiprintf_r+0x96>
 80086d2:	ebba 0b04 	subs.w	fp, sl, r4
 80086d6:	d00b      	beq.n	80086f0 <_vfiprintf_r+0xc0>
 80086d8:	465b      	mov	r3, fp
 80086da:	4622      	mov	r2, r4
 80086dc:	4629      	mov	r1, r5
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff ff93 	bl	800860a <__sfputs_r>
 80086e4:	3001      	adds	r0, #1
 80086e6:	f000 80aa 	beq.w	800883e <_vfiprintf_r+0x20e>
 80086ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ec:	445a      	add	r2, fp
 80086ee:	9209      	str	r2, [sp, #36]	; 0x24
 80086f0:	f89a 3000 	ldrb.w	r3, [sl]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80a2 	beq.w	800883e <_vfiprintf_r+0x20e>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008704:	f10a 0a01 	add.w	sl, sl, #1
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	9307      	str	r3, [sp, #28]
 800870c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008710:	931a      	str	r3, [sp, #104]	; 0x68
 8008712:	4654      	mov	r4, sl
 8008714:	2205      	movs	r2, #5
 8008716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871a:	4858      	ldr	r0, [pc, #352]	; (800887c <_vfiprintf_r+0x24c>)
 800871c:	f7f7 fd58 	bl	80001d0 <memchr>
 8008720:	9a04      	ldr	r2, [sp, #16]
 8008722:	b9d8      	cbnz	r0, 800875c <_vfiprintf_r+0x12c>
 8008724:	06d1      	lsls	r1, r2, #27
 8008726:	bf44      	itt	mi
 8008728:	2320      	movmi	r3, #32
 800872a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872e:	0713      	lsls	r3, r2, #28
 8008730:	bf44      	itt	mi
 8008732:	232b      	movmi	r3, #43	; 0x2b
 8008734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008738:	f89a 3000 	ldrb.w	r3, [sl]
 800873c:	2b2a      	cmp	r3, #42	; 0x2a
 800873e:	d015      	beq.n	800876c <_vfiprintf_r+0x13c>
 8008740:	9a07      	ldr	r2, [sp, #28]
 8008742:	4654      	mov	r4, sl
 8008744:	2000      	movs	r0, #0
 8008746:	f04f 0c0a 	mov.w	ip, #10
 800874a:	4621      	mov	r1, r4
 800874c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008750:	3b30      	subs	r3, #48	; 0x30
 8008752:	2b09      	cmp	r3, #9
 8008754:	d94e      	bls.n	80087f4 <_vfiprintf_r+0x1c4>
 8008756:	b1b0      	cbz	r0, 8008786 <_vfiprintf_r+0x156>
 8008758:	9207      	str	r2, [sp, #28]
 800875a:	e014      	b.n	8008786 <_vfiprintf_r+0x156>
 800875c:	eba0 0308 	sub.w	r3, r0, r8
 8008760:	fa09 f303 	lsl.w	r3, r9, r3
 8008764:	4313      	orrs	r3, r2
 8008766:	9304      	str	r3, [sp, #16]
 8008768:	46a2      	mov	sl, r4
 800876a:	e7d2      	b.n	8008712 <_vfiprintf_r+0xe2>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	1d19      	adds	r1, r3, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	9103      	str	r1, [sp, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	bfbb      	ittet	lt
 8008778:	425b      	neglt	r3, r3
 800877a:	f042 0202 	orrlt.w	r2, r2, #2
 800877e:	9307      	strge	r3, [sp, #28]
 8008780:	9307      	strlt	r3, [sp, #28]
 8008782:	bfb8      	it	lt
 8008784:	9204      	strlt	r2, [sp, #16]
 8008786:	7823      	ldrb	r3, [r4, #0]
 8008788:	2b2e      	cmp	r3, #46	; 0x2e
 800878a:	d10c      	bne.n	80087a6 <_vfiprintf_r+0x176>
 800878c:	7863      	ldrb	r3, [r4, #1]
 800878e:	2b2a      	cmp	r3, #42	; 0x2a
 8008790:	d135      	bne.n	80087fe <_vfiprintf_r+0x1ce>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	1d1a      	adds	r2, r3, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	9203      	str	r2, [sp, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	bfb8      	it	lt
 800879e:	f04f 33ff 	movlt.w	r3, #4294967295
 80087a2:	3402      	adds	r4, #2
 80087a4:	9305      	str	r3, [sp, #20]
 80087a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800888c <_vfiprintf_r+0x25c>
 80087aa:	7821      	ldrb	r1, [r4, #0]
 80087ac:	2203      	movs	r2, #3
 80087ae:	4650      	mov	r0, sl
 80087b0:	f7f7 fd0e 	bl	80001d0 <memchr>
 80087b4:	b140      	cbz	r0, 80087c8 <_vfiprintf_r+0x198>
 80087b6:	2340      	movs	r3, #64	; 0x40
 80087b8:	eba0 000a 	sub.w	r0, r0, sl
 80087bc:	fa03 f000 	lsl.w	r0, r3, r0
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	4303      	orrs	r3, r0
 80087c4:	3401      	adds	r4, #1
 80087c6:	9304      	str	r3, [sp, #16]
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	482c      	ldr	r0, [pc, #176]	; (8008880 <_vfiprintf_r+0x250>)
 80087ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d2:	2206      	movs	r2, #6
 80087d4:	f7f7 fcfc 	bl	80001d0 <memchr>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d03f      	beq.n	800885c <_vfiprintf_r+0x22c>
 80087dc:	4b29      	ldr	r3, [pc, #164]	; (8008884 <_vfiprintf_r+0x254>)
 80087de:	bb1b      	cbnz	r3, 8008828 <_vfiprintf_r+0x1f8>
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	3307      	adds	r3, #7
 80087e4:	f023 0307 	bic.w	r3, r3, #7
 80087e8:	3308      	adds	r3, #8
 80087ea:	9303      	str	r3, [sp, #12]
 80087ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ee:	443b      	add	r3, r7
 80087f0:	9309      	str	r3, [sp, #36]	; 0x24
 80087f2:	e767      	b.n	80086c4 <_vfiprintf_r+0x94>
 80087f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087f8:	460c      	mov	r4, r1
 80087fa:	2001      	movs	r0, #1
 80087fc:	e7a5      	b.n	800874a <_vfiprintf_r+0x11a>
 80087fe:	2300      	movs	r3, #0
 8008800:	3401      	adds	r4, #1
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	4619      	mov	r1, r3
 8008806:	f04f 0c0a 	mov.w	ip, #10
 800880a:	4620      	mov	r0, r4
 800880c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008810:	3a30      	subs	r2, #48	; 0x30
 8008812:	2a09      	cmp	r2, #9
 8008814:	d903      	bls.n	800881e <_vfiprintf_r+0x1ee>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0c5      	beq.n	80087a6 <_vfiprintf_r+0x176>
 800881a:	9105      	str	r1, [sp, #20]
 800881c:	e7c3      	b.n	80087a6 <_vfiprintf_r+0x176>
 800881e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008822:	4604      	mov	r4, r0
 8008824:	2301      	movs	r3, #1
 8008826:	e7f0      	b.n	800880a <_vfiprintf_r+0x1da>
 8008828:	ab03      	add	r3, sp, #12
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	462a      	mov	r2, r5
 800882e:	4b16      	ldr	r3, [pc, #88]	; (8008888 <_vfiprintf_r+0x258>)
 8008830:	a904      	add	r1, sp, #16
 8008832:	4630      	mov	r0, r6
 8008834:	f3af 8000 	nop.w
 8008838:	4607      	mov	r7, r0
 800883a:	1c78      	adds	r0, r7, #1
 800883c:	d1d6      	bne.n	80087ec <_vfiprintf_r+0x1bc>
 800883e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008840:	07d9      	lsls	r1, r3, #31
 8008842:	d405      	bmi.n	8008850 <_vfiprintf_r+0x220>
 8008844:	89ab      	ldrh	r3, [r5, #12]
 8008846:	059a      	lsls	r2, r3, #22
 8008848:	d402      	bmi.n	8008850 <_vfiprintf_r+0x220>
 800884a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800884c:	f7ff fe53 	bl	80084f6 <__retarget_lock_release_recursive>
 8008850:	89ab      	ldrh	r3, [r5, #12]
 8008852:	065b      	lsls	r3, r3, #25
 8008854:	f53f af12 	bmi.w	800867c <_vfiprintf_r+0x4c>
 8008858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800885a:	e711      	b.n	8008680 <_vfiprintf_r+0x50>
 800885c:	ab03      	add	r3, sp, #12
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	462a      	mov	r2, r5
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <_vfiprintf_r+0x258>)
 8008864:	a904      	add	r1, sp, #16
 8008866:	4630      	mov	r0, r6
 8008868:	f000 f880 	bl	800896c <_printf_i>
 800886c:	e7e4      	b.n	8008838 <_vfiprintf_r+0x208>
 800886e:	bf00      	nop
 8008870:	08008db0 	.word	0x08008db0
 8008874:	08008dd0 	.word	0x08008dd0
 8008878:	08008d90 	.word	0x08008d90
 800887c:	08008df0 	.word	0x08008df0
 8008880:	08008dfa 	.word	0x08008dfa
 8008884:	00000000 	.word	0x00000000
 8008888:	0800860b 	.word	0x0800860b
 800888c:	08008df6 	.word	0x08008df6

08008890 <_printf_common>:
 8008890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008894:	4616      	mov	r6, r2
 8008896:	4699      	mov	r9, r3
 8008898:	688a      	ldr	r2, [r1, #8]
 800889a:	690b      	ldr	r3, [r1, #16]
 800889c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	bfb8      	it	lt
 80088a4:	4613      	movlt	r3, r2
 80088a6:	6033      	str	r3, [r6, #0]
 80088a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088ac:	4607      	mov	r7, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b10a      	cbz	r2, 80088b6 <_printf_common+0x26>
 80088b2:	3301      	adds	r3, #1
 80088b4:	6033      	str	r3, [r6, #0]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	0699      	lsls	r1, r3, #26
 80088ba:	bf42      	ittt	mi
 80088bc:	6833      	ldrmi	r3, [r6, #0]
 80088be:	3302      	addmi	r3, #2
 80088c0:	6033      	strmi	r3, [r6, #0]
 80088c2:	6825      	ldr	r5, [r4, #0]
 80088c4:	f015 0506 	ands.w	r5, r5, #6
 80088c8:	d106      	bne.n	80088d8 <_printf_common+0x48>
 80088ca:	f104 0a19 	add.w	sl, r4, #25
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	6832      	ldr	r2, [r6, #0]
 80088d2:	1a9b      	subs	r3, r3, r2
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dc26      	bgt.n	8008926 <_printf_common+0x96>
 80088d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088dc:	1e13      	subs	r3, r2, #0
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	bf18      	it	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	0692      	lsls	r2, r2, #26
 80088e6:	d42b      	bmi.n	8008940 <_printf_common+0xb0>
 80088e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ec:	4649      	mov	r1, r9
 80088ee:	4638      	mov	r0, r7
 80088f0:	47c0      	blx	r8
 80088f2:	3001      	adds	r0, #1
 80088f4:	d01e      	beq.n	8008934 <_printf_common+0xa4>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	68e5      	ldr	r5, [r4, #12]
 80088fa:	6832      	ldr	r2, [r6, #0]
 80088fc:	f003 0306 	and.w	r3, r3, #6
 8008900:	2b04      	cmp	r3, #4
 8008902:	bf08      	it	eq
 8008904:	1aad      	subeq	r5, r5, r2
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	6922      	ldr	r2, [r4, #16]
 800890a:	bf0c      	ite	eq
 800890c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008910:	2500      	movne	r5, #0
 8008912:	4293      	cmp	r3, r2
 8008914:	bfc4      	itt	gt
 8008916:	1a9b      	subgt	r3, r3, r2
 8008918:	18ed      	addgt	r5, r5, r3
 800891a:	2600      	movs	r6, #0
 800891c:	341a      	adds	r4, #26
 800891e:	42b5      	cmp	r5, r6
 8008920:	d11a      	bne.n	8008958 <_printf_common+0xc8>
 8008922:	2000      	movs	r0, #0
 8008924:	e008      	b.n	8008938 <_printf_common+0xa8>
 8008926:	2301      	movs	r3, #1
 8008928:	4652      	mov	r2, sl
 800892a:	4649      	mov	r1, r9
 800892c:	4638      	mov	r0, r7
 800892e:	47c0      	blx	r8
 8008930:	3001      	adds	r0, #1
 8008932:	d103      	bne.n	800893c <_printf_common+0xac>
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893c:	3501      	adds	r5, #1
 800893e:	e7c6      	b.n	80088ce <_printf_common+0x3e>
 8008940:	18e1      	adds	r1, r4, r3
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	2030      	movs	r0, #48	; 0x30
 8008946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800894a:	4422      	add	r2, r4
 800894c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008954:	3302      	adds	r3, #2
 8008956:	e7c7      	b.n	80088e8 <_printf_common+0x58>
 8008958:	2301      	movs	r3, #1
 800895a:	4622      	mov	r2, r4
 800895c:	4649      	mov	r1, r9
 800895e:	4638      	mov	r0, r7
 8008960:	47c0      	blx	r8
 8008962:	3001      	adds	r0, #1
 8008964:	d0e6      	beq.n	8008934 <_printf_common+0xa4>
 8008966:	3601      	adds	r6, #1
 8008968:	e7d9      	b.n	800891e <_printf_common+0x8e>
	...

0800896c <_printf_i>:
 800896c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	7e0f      	ldrb	r7, [r1, #24]
 8008972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008974:	2f78      	cmp	r7, #120	; 0x78
 8008976:	4691      	mov	r9, r2
 8008978:	4680      	mov	r8, r0
 800897a:	460c      	mov	r4, r1
 800897c:	469a      	mov	sl, r3
 800897e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008982:	d807      	bhi.n	8008994 <_printf_i+0x28>
 8008984:	2f62      	cmp	r7, #98	; 0x62
 8008986:	d80a      	bhi.n	800899e <_printf_i+0x32>
 8008988:	2f00      	cmp	r7, #0
 800898a:	f000 80d8 	beq.w	8008b3e <_printf_i+0x1d2>
 800898e:	2f58      	cmp	r7, #88	; 0x58
 8008990:	f000 80a3 	beq.w	8008ada <_printf_i+0x16e>
 8008994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800899c:	e03a      	b.n	8008a14 <_printf_i+0xa8>
 800899e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089a2:	2b15      	cmp	r3, #21
 80089a4:	d8f6      	bhi.n	8008994 <_printf_i+0x28>
 80089a6:	a101      	add	r1, pc, #4	; (adr r1, 80089ac <_printf_i+0x40>)
 80089a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	08008a19 	.word	0x08008a19
 80089b4:	08008995 	.word	0x08008995
 80089b8:	08008995 	.word	0x08008995
 80089bc:	08008995 	.word	0x08008995
 80089c0:	08008995 	.word	0x08008995
 80089c4:	08008a19 	.word	0x08008a19
 80089c8:	08008995 	.word	0x08008995
 80089cc:	08008995 	.word	0x08008995
 80089d0:	08008995 	.word	0x08008995
 80089d4:	08008995 	.word	0x08008995
 80089d8:	08008b25 	.word	0x08008b25
 80089dc:	08008a49 	.word	0x08008a49
 80089e0:	08008b07 	.word	0x08008b07
 80089e4:	08008995 	.word	0x08008995
 80089e8:	08008995 	.word	0x08008995
 80089ec:	08008b47 	.word	0x08008b47
 80089f0:	08008995 	.word	0x08008995
 80089f4:	08008a49 	.word	0x08008a49
 80089f8:	08008995 	.word	0x08008995
 80089fc:	08008995 	.word	0x08008995
 8008a00:	08008b0f 	.word	0x08008b0f
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	1d1a      	adds	r2, r3, #4
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	602a      	str	r2, [r5, #0]
 8008a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a14:	2301      	movs	r3, #1
 8008a16:	e0a3      	b.n	8008b60 <_printf_i+0x1f4>
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	6829      	ldr	r1, [r5, #0]
 8008a1c:	0606      	lsls	r6, r0, #24
 8008a1e:	f101 0304 	add.w	r3, r1, #4
 8008a22:	d50a      	bpl.n	8008a3a <_printf_i+0xce>
 8008a24:	680e      	ldr	r6, [r1, #0]
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	da03      	bge.n	8008a34 <_printf_i+0xc8>
 8008a2c:	232d      	movs	r3, #45	; 0x2d
 8008a2e:	4276      	negs	r6, r6
 8008a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a34:	485e      	ldr	r0, [pc, #376]	; (8008bb0 <_printf_i+0x244>)
 8008a36:	230a      	movs	r3, #10
 8008a38:	e019      	b.n	8008a6e <_printf_i+0x102>
 8008a3a:	680e      	ldr	r6, [r1, #0]
 8008a3c:	602b      	str	r3, [r5, #0]
 8008a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a42:	bf18      	it	ne
 8008a44:	b236      	sxthne	r6, r6
 8008a46:	e7ef      	b.n	8008a28 <_printf_i+0xbc>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	1d19      	adds	r1, r3, #4
 8008a4e:	6029      	str	r1, [r5, #0]
 8008a50:	0601      	lsls	r1, r0, #24
 8008a52:	d501      	bpl.n	8008a58 <_printf_i+0xec>
 8008a54:	681e      	ldr	r6, [r3, #0]
 8008a56:	e002      	b.n	8008a5e <_printf_i+0xf2>
 8008a58:	0646      	lsls	r6, r0, #25
 8008a5a:	d5fb      	bpl.n	8008a54 <_printf_i+0xe8>
 8008a5c:	881e      	ldrh	r6, [r3, #0]
 8008a5e:	4854      	ldr	r0, [pc, #336]	; (8008bb0 <_printf_i+0x244>)
 8008a60:	2f6f      	cmp	r7, #111	; 0x6f
 8008a62:	bf0c      	ite	eq
 8008a64:	2308      	moveq	r3, #8
 8008a66:	230a      	movne	r3, #10
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a6e:	6865      	ldr	r5, [r4, #4]
 8008a70:	60a5      	str	r5, [r4, #8]
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	bfa2      	ittt	ge
 8008a76:	6821      	ldrge	r1, [r4, #0]
 8008a78:	f021 0104 	bicge.w	r1, r1, #4
 8008a7c:	6021      	strge	r1, [r4, #0]
 8008a7e:	b90e      	cbnz	r6, 8008a84 <_printf_i+0x118>
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	d04d      	beq.n	8008b20 <_printf_i+0x1b4>
 8008a84:	4615      	mov	r5, r2
 8008a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a8e:	5dc7      	ldrb	r7, [r0, r7]
 8008a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a94:	4637      	mov	r7, r6
 8008a96:	42bb      	cmp	r3, r7
 8008a98:	460e      	mov	r6, r1
 8008a9a:	d9f4      	bls.n	8008a86 <_printf_i+0x11a>
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d10b      	bne.n	8008ab8 <_printf_i+0x14c>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	07de      	lsls	r6, r3, #31
 8008aa4:	d508      	bpl.n	8008ab8 <_printf_i+0x14c>
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	6861      	ldr	r1, [r4, #4]
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	bfde      	ittt	le
 8008aae:	2330      	movle	r3, #48	; 0x30
 8008ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ab8:	1b52      	subs	r2, r2, r5
 8008aba:	6122      	str	r2, [r4, #16]
 8008abc:	f8cd a000 	str.w	sl, [sp]
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	aa03      	add	r2, sp, #12
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	f7ff fee2 	bl	8008890 <_printf_common>
 8008acc:	3001      	adds	r0, #1
 8008ace:	d14c      	bne.n	8008b6a <_printf_i+0x1fe>
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	b004      	add	sp, #16
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ada:	4835      	ldr	r0, [pc, #212]	; (8008bb0 <_printf_i+0x244>)
 8008adc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ae0:	6829      	ldr	r1, [r5, #0]
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ae8:	6029      	str	r1, [r5, #0]
 8008aea:	061d      	lsls	r5, r3, #24
 8008aec:	d514      	bpl.n	8008b18 <_printf_i+0x1ac>
 8008aee:	07df      	lsls	r7, r3, #31
 8008af0:	bf44      	itt	mi
 8008af2:	f043 0320 	orrmi.w	r3, r3, #32
 8008af6:	6023      	strmi	r3, [r4, #0]
 8008af8:	b91e      	cbnz	r6, 8008b02 <_printf_i+0x196>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f023 0320 	bic.w	r3, r3, #32
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	2310      	movs	r3, #16
 8008b04:	e7b0      	b.n	8008a68 <_printf_i+0xfc>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	f043 0320 	orr.w	r3, r3, #32
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	2378      	movs	r3, #120	; 0x78
 8008b10:	4828      	ldr	r0, [pc, #160]	; (8008bb4 <_printf_i+0x248>)
 8008b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b16:	e7e3      	b.n	8008ae0 <_printf_i+0x174>
 8008b18:	0659      	lsls	r1, r3, #25
 8008b1a:	bf48      	it	mi
 8008b1c:	b2b6      	uxthmi	r6, r6
 8008b1e:	e7e6      	b.n	8008aee <_printf_i+0x182>
 8008b20:	4615      	mov	r5, r2
 8008b22:	e7bb      	b.n	8008a9c <_printf_i+0x130>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	6826      	ldr	r6, [r4, #0]
 8008b28:	6961      	ldr	r1, [r4, #20]
 8008b2a:	1d18      	adds	r0, r3, #4
 8008b2c:	6028      	str	r0, [r5, #0]
 8008b2e:	0635      	lsls	r5, r6, #24
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	d501      	bpl.n	8008b38 <_printf_i+0x1cc>
 8008b34:	6019      	str	r1, [r3, #0]
 8008b36:	e002      	b.n	8008b3e <_printf_i+0x1d2>
 8008b38:	0670      	lsls	r0, r6, #25
 8008b3a:	d5fb      	bpl.n	8008b34 <_printf_i+0x1c8>
 8008b3c:	8019      	strh	r1, [r3, #0]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	4615      	mov	r5, r2
 8008b44:	e7ba      	b.n	8008abc <_printf_i+0x150>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	1d1a      	adds	r2, r3, #4
 8008b4a:	602a      	str	r2, [r5, #0]
 8008b4c:	681d      	ldr	r5, [r3, #0]
 8008b4e:	6862      	ldr	r2, [r4, #4]
 8008b50:	2100      	movs	r1, #0
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7f7 fb3c 	bl	80001d0 <memchr>
 8008b58:	b108      	cbz	r0, 8008b5e <_printf_i+0x1f2>
 8008b5a:	1b40      	subs	r0, r0, r5
 8008b5c:	6060      	str	r0, [r4, #4]
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	6123      	str	r3, [r4, #16]
 8008b62:	2300      	movs	r3, #0
 8008b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b68:	e7a8      	b.n	8008abc <_printf_i+0x150>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4640      	mov	r0, r8
 8008b72:	47d0      	blx	sl
 8008b74:	3001      	adds	r0, #1
 8008b76:	d0ab      	beq.n	8008ad0 <_printf_i+0x164>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	079b      	lsls	r3, r3, #30
 8008b7c:	d413      	bmi.n	8008ba6 <_printf_i+0x23a>
 8008b7e:	68e0      	ldr	r0, [r4, #12]
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	4298      	cmp	r0, r3
 8008b84:	bfb8      	it	lt
 8008b86:	4618      	movlt	r0, r3
 8008b88:	e7a4      	b.n	8008ad4 <_printf_i+0x168>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4640      	mov	r0, r8
 8008b92:	47d0      	blx	sl
 8008b94:	3001      	adds	r0, #1
 8008b96:	d09b      	beq.n	8008ad0 <_printf_i+0x164>
 8008b98:	3501      	adds	r5, #1
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	9903      	ldr	r1, [sp, #12]
 8008b9e:	1a5b      	subs	r3, r3, r1
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dcf2      	bgt.n	8008b8a <_printf_i+0x21e>
 8008ba4:	e7eb      	b.n	8008b7e <_printf_i+0x212>
 8008ba6:	2500      	movs	r5, #0
 8008ba8:	f104 0619 	add.w	r6, r4, #25
 8008bac:	e7f5      	b.n	8008b9a <_printf_i+0x22e>
 8008bae:	bf00      	nop
 8008bb0:	08008e01 	.word	0x08008e01
 8008bb4:	08008e12 	.word	0x08008e12

08008bb8 <__sread>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	460c      	mov	r4, r1
 8008bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc0:	f000 f894 	bl	8008cec <_read_r>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	bfab      	itete	ge
 8008bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bca:	89a3      	ldrhlt	r3, [r4, #12]
 8008bcc:	181b      	addge	r3, r3, r0
 8008bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bd2:	bfac      	ite	ge
 8008bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bd6:	81a3      	strhlt	r3, [r4, #12]
 8008bd8:	bd10      	pop	{r4, pc}

08008bda <__swrite>:
 8008bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bde:	461f      	mov	r7, r3
 8008be0:	898b      	ldrh	r3, [r1, #12]
 8008be2:	05db      	lsls	r3, r3, #23
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	4616      	mov	r6, r2
 8008bea:	d505      	bpl.n	8008bf8 <__swrite+0x1e>
 8008bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f000 f868 	bl	8008cc8 <_lseek_r>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	4632      	mov	r2, r6
 8008c06:	463b      	mov	r3, r7
 8008c08:	4628      	mov	r0, r5
 8008c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0e:	f000 b817 	b.w	8008c40 <_write_r>

08008c12 <__sseek>:
 8008c12:	b510      	push	{r4, lr}
 8008c14:	460c      	mov	r4, r1
 8008c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1a:	f000 f855 	bl	8008cc8 <_lseek_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	bf15      	itete	ne
 8008c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c2e:	81a3      	strheq	r3, [r4, #12]
 8008c30:	bf18      	it	ne
 8008c32:	81a3      	strhne	r3, [r4, #12]
 8008c34:	bd10      	pop	{r4, pc}

08008c36 <__sclose>:
 8008c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3a:	f000 b813 	b.w	8008c64 <_close_r>
	...

08008c40 <_write_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d07      	ldr	r5, [pc, #28]	; (8008c60 <_write_r+0x20>)
 8008c44:	4604      	mov	r4, r0
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	602a      	str	r2, [r5, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f7f7 fcb7 	bl	80005c2 <_write>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_write_r+0x1e>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_write_r+0x1e>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	200008a0 	.word	0x200008a0

08008c64 <_close_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d06      	ldr	r5, [pc, #24]	; (8008c80 <_close_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	f7f8 f8bb 	bl	8000dea <_close>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_close_r+0x1a>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_close_r+0x1a>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	200008a0 	.word	0x200008a0

08008c84 <_fstat_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d07      	ldr	r5, [pc, #28]	; (8008ca4 <_fstat_r+0x20>)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	f7f8 f8b6 	bl	8000e02 <_fstat>
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	d102      	bne.n	8008ca0 <_fstat_r+0x1c>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	b103      	cbz	r3, 8008ca0 <_fstat_r+0x1c>
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200008a0 	.word	0x200008a0

08008ca8 <_isatty_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d06      	ldr	r5, [pc, #24]	; (8008cc4 <_isatty_r+0x1c>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7f8 f8b5 	bl	8000e22 <_isatty>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_isatty_r+0x1a>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_isatty_r+0x1a>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	200008a0 	.word	0x200008a0

08008cc8 <_lseek_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	; (8008ce8 <_lseek_r+0x20>)
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4608      	mov	r0, r1
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f7f8 f8ae 	bl	8000e38 <_lseek>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_lseek_r+0x1e>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_lseek_r+0x1e>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	200008a0 	.word	0x200008a0

08008cec <_read_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	; (8008d0c <_read_r+0x20>)
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	602a      	str	r2, [r5, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f7f8 f858 	bl	8000db0 <_read>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_read_r+0x1e>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_read_r+0x1e>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	200008a0 	.word	0x200008a0

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
